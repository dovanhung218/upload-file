{"ast":null,"code":"/**\n * ZipStream\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}\n * @copyright (c) 2014 Chris Talkington, contributors.\n */\nvar inherits = require('util').inherits;\nvar ZipArchiveOutputStream = require('compress-commons').ZipArchiveOutputStream;\nvar ZipArchiveEntry = require('compress-commons').ZipArchiveEntry;\nvar util = require('archiver-utils');\n\n/**\n * @constructor\n * @extends external:ZipArchiveOutputStream\n * @param {Object} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n */\nvar ZipStream = module.exports = function (options) {\n  if (!(this instanceof ZipStream)) {\n    return new ZipStream(options);\n  }\n  options = this.options = options || {};\n  options.zlib = options.zlib || {};\n  ZipArchiveOutputStream.call(this, options);\n  if (typeof options.level === 'number' && options.level >= 0) {\n    options.zlib.level = options.level;\n    delete options.level;\n  }\n  if (!options.forceZip64 && typeof options.zlib.level === 'number' && options.zlib.level === 0) {\n    options.store = true;\n  }\n  if (options.comment && options.comment.length > 0) {\n    this.setComment(options.comment);\n  }\n};\ninherits(ZipStream, ZipArchiveOutputStream);\n\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @return {Object}\n */\nZipStream.prototype._normalizeFileData = function (data) {\n  data = util.defaults(data, {\n    type: 'file',\n    name: null,\n    linkname: null,\n    date: null,\n    mode: null,\n    store: this.options.store,\n    comment: ''\n  });\n  var isDir = data.type === 'directory';\n  var isSymlink = data.type === 'symlink';\n  if (data.name) {\n    data.name = util.sanitizePath(data.name);\n    if (!isSymlink && data.name.slice(-1) === '/') {\n      isDir = true;\n      data.type = 'directory';\n    } else if (isDir) {\n      data.name += '/';\n    }\n  }\n  if (isDir || isSymlink) {\n    data.store = true;\n  }\n  data.date = util.dateify(data.date);\n  return data;\n};\n\n/**\n * Appends an entry given an input source (text string, buffer, or stream).\n *\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {Object} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {String} [data.comment] Sets the entry comment.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {Boolean} [data.store=options.store] Sets the compression method to STORE.\n * @param  {String} [data.type=file] Sets the entry type. Defaults to `directory`\n * if name ends with trailing slash.\n * @param  {Function} callback\n * @return this\n */\nZipStream.prototype.entry = function (source, data, callback) {\n  if (typeof callback !== 'function') {\n    callback = this._emitErrorCallback.bind(this);\n  }\n  data = this._normalizeFileData(data);\n  if (data.type !== 'file' && data.type !== 'directory' && data.type !== 'symlink') {\n    callback(new Error(data.type + ' entries not currently supported'));\n    return;\n  }\n  if (typeof data.name !== 'string' || data.name.length === 0) {\n    callback(new Error('entry name must be a non-empty string value'));\n    return;\n  }\n  if (data.type === 'symlink' && typeof data.linkname !== 'string') {\n    callback(new Error('entry linkname must be a non-empty string value when type equals symlink'));\n    return;\n  }\n  var entry = new ZipArchiveEntry(data.name);\n  entry.setTime(data.date, this.options.forceLocalTime);\n  if (data.store) {\n    entry.setMethod(0);\n  }\n  if (data.comment.length > 0) {\n    entry.setComment(data.comment);\n  }\n  if (data.type === 'symlink' && typeof data.mode !== 'number') {\n    data.mode = 40960; // 0120000\n  }\n\n  if (typeof data.mode === 'number') {\n    if (data.type === 'symlink') {\n      data.mode |= 40960;\n    }\n    entry.setUnixMode(data.mode);\n  }\n  if (data.type === 'symlink' && typeof data.linkname === 'string') {\n    source = Buffer.from(data.linkname);\n  }\n  return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);\n};\n\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * @return void\n */\nZipStream.prototype.finalize = function () {\n  this.finish();\n};\n\n/**\n * Returns the current number of bytes written to this stream.\n * @function ZipStream#getBytesWritten\n * @returns {Number}\n */\n\n/**\n * Compress Commons ZipArchiveOutputStream\n * @external ZipArchiveOutputStream\n * @see {@link https://github.com/archiverjs/node-compress-commons}\n */","map":{"version":3,"names":["inherits","require","ZipArchiveOutputStream","ZipArchiveEntry","util","ZipStream","module","exports","options","zlib","call","level","forceZip64","store","comment","length","setComment","prototype","_normalizeFileData","data","defaults","type","name","linkname","date","mode","isDir","isSymlink","sanitizePath","slice","dateify","entry","source","callback","_emitErrorCallback","bind","Error","setTime","forceLocalTime","setMethod","setUnixMode","Buffer","from","finalize","finish"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/zip-stream/index.js"],"sourcesContent":["/**\n * ZipStream\n *\n * @ignore\n * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}\n * @copyright (c) 2014 Chris Talkington, contributors.\n */\nvar inherits = require('util').inherits;\n\nvar ZipArchiveOutputStream = require('compress-commons').ZipArchiveOutputStream;\nvar ZipArchiveEntry = require('compress-commons').ZipArchiveEntry;\n\nvar util = require('archiver-utils');\n\n/**\n * @constructor\n * @extends external:ZipArchiveOutputStream\n * @param {Object} [options]\n * @param {String} [options.comment] Sets the zip archive comment.\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\n * to control compression.\n */\nvar ZipStream = module.exports = function(options) {\n  if (!(this instanceof ZipStream)) {\n    return new ZipStream(options);\n  }\n\n  options = this.options = options || {};\n  options.zlib = options.zlib || {};\n\n  ZipArchiveOutputStream.call(this, options);\n\n  if (typeof options.level === 'number' && options.level >= 0) {\n    options.zlib.level = options.level;\n    delete options.level;\n  }\n\n  if (!options.forceZip64 && typeof options.zlib.level === 'number' && options.zlib.level === 0) {\n    options.store = true;\n  }\n\n  if (options.comment && options.comment.length > 0) {\n    this.setComment(options.comment);\n  }\n};\n\ninherits(ZipStream, ZipArchiveOutputStream);\n\n/**\n * Normalizes entry data with fallbacks for key properties.\n *\n * @private\n * @param  {Object} data\n * @return {Object}\n */\nZipStream.prototype._normalizeFileData = function(data) {\n  data = util.defaults(data, {\n    type: 'file',\n    name: null,\n    linkname: null,\n    date: null,\n    mode: null,\n    store: this.options.store,\n    comment: ''\n  });\n\n  var isDir = data.type === 'directory';\n  var isSymlink = data.type === 'symlink';\n\n  if (data.name) {\n    data.name = util.sanitizePath(data.name);\n\n    if (!isSymlink && data.name.slice(-1) === '/') {\n      isDir = true;\n      data.type = 'directory';\n    } else if (isDir) {\n      data.name += '/';\n    }\n  }\n\n  if (isDir || isSymlink) {\n    data.store = true;\n  }\n\n  data.date = util.dateify(data.date);\n\n  return data;\n};\n\n/**\n * Appends an entry given an input source (text string, buffer, or stream).\n *\n * @param  {(Buffer|Stream|String)} source The input source.\n * @param  {Object} data\n * @param  {String} data.name Sets the entry name including internal path.\n * @param  {String} [data.comment] Sets the entry comment.\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\n * @param  {Boolean} [data.store=options.store] Sets the compression method to STORE.\n * @param  {String} [data.type=file] Sets the entry type. Defaults to `directory`\n * if name ends with trailing slash.\n * @param  {Function} callback\n * @return this\n */\nZipStream.prototype.entry = function(source, data, callback) {\n  if (typeof callback !== 'function') {\n    callback = this._emitErrorCallback.bind(this);\n  }\n\n  data = this._normalizeFileData(data);\n\n  if (data.type !== 'file' && data.type !== 'directory' && data.type !== 'symlink') {\n    callback(new Error(data.type + ' entries not currently supported'));\n    return;\n  }\n\n  if (typeof data.name !== 'string' || data.name.length === 0) {\n    callback(new Error('entry name must be a non-empty string value'));\n    return;\n  }\n\n  if (data.type === 'symlink' && typeof data.linkname !== 'string') {\n    callback(new Error('entry linkname must be a non-empty string value when type equals symlink'));\n    return;\n  }\n\n  var entry = new ZipArchiveEntry(data.name);\n  entry.setTime(data.date, this.options.forceLocalTime);\n\n  if (data.store) {\n    entry.setMethod(0);\n  }\n\n  if (data.comment.length > 0) {\n    entry.setComment(data.comment);\n  }\n\n  if (data.type === 'symlink' && typeof data.mode !== 'number') {\n    data.mode = 40960; // 0120000\n  }\n\n  if (typeof data.mode === 'number') {\n    if (data.type === 'symlink') {\n      data.mode |= 40960;\n    }\n\n    entry.setUnixMode(data.mode);\n  }\n\n  if (data.type === 'symlink' && typeof data.linkname === 'string') {\n    source = Buffer.from(data.linkname);\n  }\n\n  return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);\n};\n\n/**\n * Finalizes the instance and prevents further appending to the archive\n * structure (queue will continue til drained).\n *\n * @return void\n */\nZipStream.prototype.finalize = function() {\n  this.finish();\n};\n\n/**\n * Returns the current number of bytes written to this stream.\n * @function ZipStream#getBytesWritten\n * @returns {Number}\n */\n\n/**\n * Compress Commons ZipArchiveOutputStream\n * @external ZipArchiveOutputStream\n * @see {@link https://github.com/archiverjs/node-compress-commons}\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,MAAM,CAAC,CAACD,QAAQ;AAEvC,IAAIE,sBAAsB,GAAGD,OAAO,CAAC,kBAAkB,CAAC,CAACC,sBAAsB;AAC/E,IAAIC,eAAe,GAAGF,OAAO,CAAC,kBAAkB,CAAC,CAACE,eAAe;AAEjE,IAAIC,IAAI,GAAGH,OAAO,CAAC,gBAAgB,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,SAAS,GAAGC,MAAM,CAACC,OAAO,GAAG,UAASC,OAAO,EAAE;EACjD,IAAI,EAAE,IAAI,YAAYH,SAAS,CAAC,EAAE;IAChC,OAAO,IAAIA,SAAS,CAACG,OAAO,CAAC;EAC/B;EAEAA,OAAO,GAAG,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACtCA,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACC,IAAI,IAAI,CAAC,CAAC;EAEjCP,sBAAsB,CAACQ,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC;EAE1C,IAAI,OAAOA,OAAO,CAACG,KAAK,KAAK,QAAQ,IAAIH,OAAO,CAACG,KAAK,IAAI,CAAC,EAAE;IAC3DH,OAAO,CAACC,IAAI,CAACE,KAAK,GAAGH,OAAO,CAACG,KAAK;IAClC,OAAOH,OAAO,CAACG,KAAK;EACtB;EAEA,IAAI,CAACH,OAAO,CAACI,UAAU,IAAI,OAAOJ,OAAO,CAACC,IAAI,CAACE,KAAK,KAAK,QAAQ,IAAIH,OAAO,CAACC,IAAI,CAACE,KAAK,KAAK,CAAC,EAAE;IAC7FH,OAAO,CAACK,KAAK,GAAG,IAAI;EACtB;EAEA,IAAIL,OAAO,CAACM,OAAO,IAAIN,OAAO,CAACM,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACjD,IAAI,CAACC,UAAU,CAACR,OAAO,CAACM,OAAO,CAAC;EAClC;AACF,CAAC;AAEDd,QAAQ,CAACK,SAAS,EAAEH,sBAAsB,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,SAAS,CAACY,SAAS,CAACC,kBAAkB,GAAG,UAASC,IAAI,EAAE;EACtDA,IAAI,GAAGf,IAAI,CAACgB,QAAQ,CAACD,IAAI,EAAE;IACzBE,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,IAAI;IACVZ,KAAK,EAAE,IAAI,CAACL,OAAO,CAACK,KAAK;IACzBC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,IAAIY,KAAK,GAAGP,IAAI,CAACE,IAAI,KAAK,WAAW;EACrC,IAAIM,SAAS,GAAGR,IAAI,CAACE,IAAI,KAAK,SAAS;EAEvC,IAAIF,IAAI,CAACG,IAAI,EAAE;IACbH,IAAI,CAACG,IAAI,GAAGlB,IAAI,CAACwB,YAAY,CAACT,IAAI,CAACG,IAAI,CAAC;IAExC,IAAI,CAACK,SAAS,IAAIR,IAAI,CAACG,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC7CH,KAAK,GAAG,IAAI;MACZP,IAAI,CAACE,IAAI,GAAG,WAAW;IACzB,CAAC,MAAM,IAAIK,KAAK,EAAE;MAChBP,IAAI,CAACG,IAAI,IAAI,GAAG;IAClB;EACF;EAEA,IAAII,KAAK,IAAIC,SAAS,EAAE;IACtBR,IAAI,CAACN,KAAK,GAAG,IAAI;EACnB;EAEAM,IAAI,CAACK,IAAI,GAAGpB,IAAI,CAAC0B,OAAO,CAACX,IAAI,CAACK,IAAI,CAAC;EAEnC,OAAOL,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,SAAS,CAACY,SAAS,CAACc,KAAK,GAAG,UAASC,MAAM,EAAEb,IAAI,EAAEc,QAAQ,EAAE;EAC3D,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAClCA,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC;EAC/C;EAEAhB,IAAI,GAAG,IAAI,CAACD,kBAAkB,CAACC,IAAI,CAAC;EAEpC,IAAIA,IAAI,CAACE,IAAI,KAAK,MAAM,IAAIF,IAAI,CAACE,IAAI,KAAK,WAAW,IAAIF,IAAI,CAACE,IAAI,KAAK,SAAS,EAAE;IAChFY,QAAQ,CAAC,IAAIG,KAAK,CAACjB,IAAI,CAACE,IAAI,GAAG,kCAAkC,CAAC,CAAC;IACnE;EACF;EAEA,IAAI,OAAOF,IAAI,CAACG,IAAI,KAAK,QAAQ,IAAIH,IAAI,CAACG,IAAI,CAACP,MAAM,KAAK,CAAC,EAAE;IAC3DkB,QAAQ,CAAC,IAAIG,KAAK,CAAC,6CAA6C,CAAC,CAAC;IAClE;EACF;EAEA,IAAIjB,IAAI,CAACE,IAAI,KAAK,SAAS,IAAI,OAAOF,IAAI,CAACI,QAAQ,KAAK,QAAQ,EAAE;IAChEU,QAAQ,CAAC,IAAIG,KAAK,CAAC,0EAA0E,CAAC,CAAC;IAC/F;EACF;EAEA,IAAIL,KAAK,GAAG,IAAI5B,eAAe,CAACgB,IAAI,CAACG,IAAI,CAAC;EAC1CS,KAAK,CAACM,OAAO,CAAClB,IAAI,CAACK,IAAI,EAAE,IAAI,CAAChB,OAAO,CAAC8B,cAAc,CAAC;EAErD,IAAInB,IAAI,CAACN,KAAK,EAAE;IACdkB,KAAK,CAACQ,SAAS,CAAC,CAAC,CAAC;EACpB;EAEA,IAAIpB,IAAI,CAACL,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IAC3BgB,KAAK,CAACf,UAAU,CAACG,IAAI,CAACL,OAAO,CAAC;EAChC;EAEA,IAAIK,IAAI,CAACE,IAAI,KAAK,SAAS,IAAI,OAAOF,IAAI,CAACM,IAAI,KAAK,QAAQ,EAAE;IAC5DN,IAAI,CAACM,IAAI,GAAG,KAAK,CAAC,CAAC;EACrB;;EAEA,IAAI,OAAON,IAAI,CAACM,IAAI,KAAK,QAAQ,EAAE;IACjC,IAAIN,IAAI,CAACE,IAAI,KAAK,SAAS,EAAE;MAC3BF,IAAI,CAACM,IAAI,IAAI,KAAK;IACpB;IAEAM,KAAK,CAACS,WAAW,CAACrB,IAAI,CAACM,IAAI,CAAC;EAC9B;EAEA,IAAIN,IAAI,CAACE,IAAI,KAAK,SAAS,IAAI,OAAOF,IAAI,CAACI,QAAQ,KAAK,QAAQ,EAAE;IAChES,MAAM,GAAGS,MAAM,CAACC,IAAI,CAACvB,IAAI,CAACI,QAAQ,CAAC;EACrC;EAEA,OAAOrB,sBAAsB,CAACe,SAAS,CAACc,KAAK,CAACrB,IAAI,CAAC,IAAI,EAAEqB,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC;AACnF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA5B,SAAS,CAACY,SAAS,CAAC0B,QAAQ,GAAG,YAAW;EACxC,IAAI,CAACC,MAAM,EAAE;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}