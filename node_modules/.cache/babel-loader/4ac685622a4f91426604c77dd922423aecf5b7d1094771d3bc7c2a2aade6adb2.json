{"ast":null,"code":"//\n// officegen: basic OpenOffice common code\n//\n// Please refer to README.md for this module's documentations.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n\n/**\n * Basicgen common utilities used by any document type related to Open Office.\n */\n\nvar baseobj = require('./basicgen.js');\n\n/**\n * Extend officegen object with OpenOffice support.\n *\n * This method extending the given officegen object with the common OpenOffice code.\n *\n * @param {object} genobj The object to extend.\n * @param {object} new_type The type of object to create.\n * @param {object} options The object's options.\n * @param {object} gen_private Access to the internals of this object.\n * @param {object} type_info Additional information about this type.\n * @constructor\n * @name makeoodoc\n */\nfunction makeoodoc(genobj, new_type, options, gen_private, type_info) {\n  /**\n   * Get the string that opening every Office XML type.\n   * <br /><br />\n   *\n   * Every OpenOffice XML resource will have this header at the begining of the file.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  gen_private.plugs.type.openoffice.makeOpenOfficeBasicXml = function (data) {\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n  };\n\n  // Basic API for plugins:\n\n  gen_private.plugs.type.openoffice = {};\n\n  /**\n   * Create the mimetpe resource.\n   * <br /><br />\n   *\n   * Every OpenOffice based document must have this resource.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function makeOpenOfficeMimeType(data) {\n    return 'application/vnd.oasis.opendocument.' + gen_private.mixed.res_data.mimeType;\n  }\n\n  /**\n   * Generate the manifest XML resource.\n   * <br /><br />\n   *\n   * Tbis function creating the manifest resource.\n   *\n   * @param {object} data Array filled with all the resources information.\n   * @return Text string.\n   */\n  gen_private.plugs.type.openoffice.makeManifest = function (data) {\n    var outString = gen_private.plugs.type.openoffice.makeOpenOfficeBasicXml(data);\n    outString += '<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\\n';\n\n    // Add all the rels records inside the data array:\n    for (var i = 0, total_size = data.length; i < total_size; i++) {\n      if (typeof data[i] !== 'undefined') {\n        outString += ' <manifest:file-entry manifest:media-type=\"' + data[i].type + '\" manifest:full-path=\"' + data[i].target + '\"/>\\n';\n      } // Endif.\n    } // End of for loop.\n\n    outString += '</manifest:manifest>\\n';\n    return outString;\n  };\n\n  /**\n   * Prepare the officegen object to OpenOffice documents.\n   * <br /><br />\n   *\n   * Every plugin that implementing gemenrating OpenOffice document must call this method to initialize\n   * the common stuff.\n   *\n   * @param {object} mimeType The mime type of this document.\n   * @param {object} ext_opt Optional settings (unused right now).\n   */\n  gen_private.plugs.type.openoffice.makeOfficeGenerator = function (mimeType, ext_opt) {\n    gen_private.mixed.res_data.mimeType = mimeType;\n    gen_private.mixed.files_list = [];\n    gen_private.mixed.files_list.push({\n      name: 'content.xml',\n      type: 'text/xml'\n    }, {\n      name: 'settings.xml',\n      type: 'text/xml'\n    }, {\n      name: 'styles.xml',\n      type: 'text/xml'\n    }, {\n      name: 'manifest.rdf',\n      type: 'application/rdf+xml'\n    }, {\n      name: 'meta.xml',\n      type: 'text/xml'\n    });\n    gen_private.plugs.intAddAnyResourceToParse('mimetype', 'buffer', null, makeOpenOfficeMimeType, true);\n    gen_private.plugs.intAddAnyResourceToParse('META-INF\\\\manifest.xml', 'buffer', gen_private.mixed.rels_main, gen_private.plugs.type.openoffice.cbMakeRels, true);\n    // gen_private.plugs.intAddAnyResourceToParse ( 'settings.xml', 'buffer', null, make???, true )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'styles.xml', 'buffer', null, make???, true )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'manifest.rdf', 'buffer', null, make???, true )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'meta.xml', 'buffer', null, make???, true )\n  };\n\n  return this;\n}\nbaseobj.plugins.registerPrototype('openoffice', makeoodoc, 'OpenOffice Document Prototype');\nexports.makeoodoc = makeoodoc;","map":{"version":3,"names":["baseobj","require","makeoodoc","genobj","new_type","options","gen_private","type_info","plugs","type","openoffice","makeOpenOfficeBasicXml","data","makeOpenOfficeMimeType","mixed","res_data","mimeType","makeManifest","outString","i","total_size","length","target","makeOfficeGenerator","ext_opt","files_list","push","name","intAddAnyResourceToParse","rels_main","cbMakeRels","plugins","registerPrototype","exports"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/officegen/lib/openofficegen.js"],"sourcesContent":["//\n// officegen: basic OpenOffice common code\n//\n// Please refer to README.md for this module's documentations.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n\n/**\n * Basicgen common utilities used by any document type related to Open Office.\n */\n\nvar baseobj = require('./basicgen.js')\n\n/**\n * Extend officegen object with OpenOffice support.\n *\n * This method extending the given officegen object with the common OpenOffice code.\n *\n * @param {object} genobj The object to extend.\n * @param {object} new_type The type of object to create.\n * @param {object} options The object's options.\n * @param {object} gen_private Access to the internals of this object.\n * @param {object} type_info Additional information about this type.\n * @constructor\n * @name makeoodoc\n */\nfunction makeoodoc(genobj, new_type, options, gen_private, type_info) {\n  /**\n   * Get the string that opening every Office XML type.\n   * <br /><br />\n   *\n   * Every OpenOffice XML resource will have this header at the begining of the file.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  gen_private.plugs.type.openoffice.makeOpenOfficeBasicXml = function(data) {\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n  }\n\n  // Basic API for plugins:\n\n  gen_private.plugs.type.openoffice = {}\n\n  /**\n   * Create the mimetpe resource.\n   * <br /><br />\n   *\n   * Every OpenOffice based document must have this resource.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function makeOpenOfficeMimeType(data) {\n    return (\n      'application/vnd.oasis.opendocument.' +\n      gen_private.mixed.res_data.mimeType\n    )\n  }\n\n  /**\n   * Generate the manifest XML resource.\n   * <br /><br />\n   *\n   * Tbis function creating the manifest resource.\n   *\n   * @param {object} data Array filled with all the resources information.\n   * @return Text string.\n   */\n  gen_private.plugs.type.openoffice.makeManifest = function(data) {\n    var outString = gen_private.plugs.type.openoffice.makeOpenOfficeBasicXml(\n      data\n    )\n    outString +=\n      '<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\\n'\n\n    // Add all the rels records inside the data array:\n    for (var i = 0, total_size = data.length; i < total_size; i++) {\n      if (typeof data[i] !== 'undefined') {\n        outString +=\n          ' <manifest:file-entry manifest:media-type=\"' +\n          data[i].type +\n          '\" manifest:full-path=\"' +\n          data[i].target +\n          '\"/>\\n'\n      } // Endif.\n    } // End of for loop.\n\n    outString += '</manifest:manifest>\\n'\n    return outString\n  }\n\n  /**\n   * Prepare the officegen object to OpenOffice documents.\n   * <br /><br />\n   *\n   * Every plugin that implementing gemenrating OpenOffice document must call this method to initialize\n   * the common stuff.\n   *\n   * @param {object} mimeType The mime type of this document.\n   * @param {object} ext_opt Optional settings (unused right now).\n   */\n  gen_private.plugs.type.openoffice.makeOfficeGenerator = function(\n    mimeType,\n    ext_opt\n  ) {\n    gen_private.mixed.res_data.mimeType = mimeType\n    gen_private.mixed.files_list = []\n\n    gen_private.mixed.files_list.push(\n      {\n        name: 'content.xml',\n        type: 'text/xml'\n      },\n      {\n        name: 'settings.xml',\n        type: 'text/xml'\n      },\n      {\n        name: 'styles.xml',\n        type: 'text/xml'\n      },\n      {\n        name: 'manifest.rdf',\n        type: 'application/rdf+xml'\n      },\n      {\n        name: 'meta.xml',\n        type: 'text/xml'\n      }\n    )\n\n    gen_private.plugs.intAddAnyResourceToParse(\n      'mimetype',\n      'buffer',\n      null,\n      makeOpenOfficeMimeType,\n      true\n    )\n    gen_private.plugs.intAddAnyResourceToParse(\n      'META-INF\\\\manifest.xml',\n      'buffer',\n      gen_private.mixed.rels_main,\n      gen_private.plugs.type.openoffice.cbMakeRels,\n      true\n    )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'settings.xml', 'buffer', null, make???, true )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'styles.xml', 'buffer', null, make???, true )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'manifest.rdf', 'buffer', null, make???, true )\n    // gen_private.plugs.intAddAnyResourceToParse ( 'meta.xml', 'buffer', null, make???, true )\n  }\n\n  return this\n}\n\nbaseobj.plugins.registerPrototype(\n  'openoffice',\n  makeoodoc,\n  'OpenOffice Document Prototype'\n)\n\nexports.makeoodoc = makeoodoc\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}