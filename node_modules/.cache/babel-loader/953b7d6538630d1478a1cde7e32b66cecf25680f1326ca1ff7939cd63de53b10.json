{"ast":null,"code":"//\n// officegen: basic common code\n//\n// Please refer to README.md for this module's documentations.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n\n;\n(function () {\n  var sys = require('util');\n  var events = require('events');\n  require('stream').Transform || require('readable-stream/transform');\n\n  // Used by generate:\n  var archiver = require('archiver');\n  var fs = require('fs');\n  var PassThrough = require('stream').PassThrough || require('readable-stream/passthrough');\n\n  // Global data shared by all the officegen objects:\n\n  var officegenGlobals = {}; // Our internal global objects.\n\n  officegenGlobals.settings = {};\n  officegenGlobals.types = {};\n  officegenGlobals.docPrototypes = {};\n  officegenGlobals.resParserTypes = {};\n\n  /**\n   * The constructor of the office generator object.\n   * <br /><br />\n   * This constructor function is been called by makegen().\n   *\n   * <h3><b>The options:</b></h3>\n   *\n   * The configuration options effecting the operation of the officegen object. Some of them can be only been\n   * declared on the 'options' object passed to the constructor object and the rest can be configured by either\n   * a property with the same name or by special function.\n   *\n   * <h3><b>List of options:</b></h3>\n   *\n   * <ul>\n   * <li>'type' - the type of generator to create. Possible options: either 'pptx', 'docx' or 'xlsx'.</li>\n   * <li>'creator' - the name of the document's author. The default is 'officegen'.</li>\n   * <li>'onend' - callback that been fired after finishing to create the zip stream.</li>\n   * <li>'onerr' - callback that been fired on error.</li>\n   * </ul>\n   *\n   * @param {object} options List of configuration options (see in the description of this function).\n   * @constructor\n   * @name officegen\n   */\n  var officegen = function (options) {\n    if (this instanceof officegen === false) {\n      return new officegen(options);\n    } // Endif.\n\n    events.EventEmitter.call(this);\n    // Transform.call(this, {objectMode : true})\n\n    // Internal events for plugins - NOT for the user:\n    // event 'beforeGen'\n    // event 'afterGen'\n    // event 'clearDoc'\n\n    var genobj = this; // Can be accessed by all the functions been declared inside the officegen object.\n\n    /**\n     * For all the private data of each officegen instance that we don't want the user of officegen to access it.\n     * Each officegen object has it's own copy of the private object so changes been done to the private object of one officegen document will not effect other objects.\n     * <br /><br />\n     * List of data members:\n     * <ul>\n     * <li>features (object) - ???.</li>\n     * <ul>\n     * <li>type</li>\n     * <li>outputType (string) - The type of the container to hold all the resources.</li>\n     * </ul>\n     * <li>pages</li>\n     * <li>resources</li>\n     * <li>type</li>\n     * <li>plugs</li>\n     * <li>length</li>\n     * </ul>\n     * @namespace officegen#private\n     */\n    var privateData = {};\n\n    // Features been configured by the type selector and you can't change them:\n    privateData.features = {};\n    privateData.features.type = {};\n    privateData.features.outputType = 'zip';\n    // privateData.features.page_name\n\n    // Resources and \"pages\" of the document:\n    privateData.pages = []; // Information about all the pages to create.\n    privateData.resources = []; // List of all the resources to create inside the zip.\n\n    // Extra data needed by the document and it's specific to either to \"document prototype\" (like MS-office) or a document type (like pptx):\n    privateData.type = {};\n\n    /**\n     * Combine the given options and the default values.\n     * <br /><br />\n     *\n     * This function creating the real options object.\n     *\n     * @param {object} options The options to configure.\n     * @param {object} source The default configuration.\n     */\n    function setOptions(object, source) {\n      object = object || {};\n      var objectTypes = {\n        boolean: false,\n        function: true,\n        object: true,\n        number: false,\n        string: false,\n        undefined: false\n      };\n      function isObject(value) {\n        return !!(value && objectTypes[typeof value]);\n      }\n      function keys(object) {\n        if (!isObject(object)) {\n          return [];\n        }\n        return Object.keys(object);\n      }\n      var index;\n      var iterable = object;\n      var result = iterable;\n      var args = arguments;\n      var argsIndex = 0;\n      var argsLength = args.length;\n\n      // Loop variables:\n      var ownIndex = -1;\n      var ownProps = objectTypes[typeof iterable] && keys(iterable);\n      var length = ownProps ? ownProps.length : 0;\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {\n          while (++ownIndex < length) {\n            index = ownProps[ownIndex];\n            if (typeof result[index] === 'undefined' || result[index] === null) {\n              result[index] = iterable[index];\n            } else if (isObject(result[index]) && isObject(iterable[index])) {\n              result[index] = setOptions(result[index], iterable[index]);\n            } // Endif.\n          } // End of while loop.\n        } // Endif.\n      } // End of while loop.\n\n      return result;\n    }\n\n    /**\n     * Configure this object to generate the given type of document.\n     * <br /><br />\n     *\n     * Called by the document constructor to configure the new document object to the given type.\n     *\n     * @param {string} new_type The type of document to create.\n     */\n    function setGeneratorType(new_type) {\n      privateData.length = 0;\n      var is_ok = false;\n      if (new_type) {\n        for (var cur_type in officegenGlobals.types) {\n          if (cur_type === new_type && officegenGlobals.types[cur_type] && officegenGlobals.types[cur_type].createFunc) {\n            officegenGlobals.types[cur_type].createFunc(genobj, new_type, genobj.options, privateData, officegenGlobals.types[cur_type]);\n            is_ok = true;\n            break;\n          } // Endif.\n        } // End of for loop.\n\n        if (!is_ok) {\n          // console.error ( '\\nFATAL ERROR: Either unknown or unsupported file type - %s\\n', options.type )\n          genobj.emit('error', 'FATAL ERROR: Invalid file type.');\n        } // Endif.\n      } // Endif.\n    }\n\n    /**\n     * API for plugins.\n     * <br /><br />\n     * Officegen plugins can extend officegen to support more document formats.\n     * <br /><br />\n     * Examples how to do it can be found on lib/gendocx.js, lib/genpptx.js and lib/genxlsx.js.\n     * @namespace officegen#private#plugs\n     * @example <caption>Adding a new document type to officegen</caption>\n     * var baseobj = require ( \"officegen\" )\n     *\n     * function makeMyDoc ( officegenObj, typeCodeName, options, officegenObjPlugins, typeInfo ) {\n     *   // officegenObjPlugins = Plugins access to extend officegenObj.\n     * }\n     *\n     * baseobj.plugins.registerDocType (\n     *   'mydoctype', // The document type's code name.\n     *   makeMyDoc,\n     *   {},\n     *   baseobj.docType.TEXT,\n     *   \"My Special Document File Format\"\n     * )\n     */\n    privateData.plugs = {\n      /**\n       * Add a resource to the list of resources to place inside the output zip file.\n       * <br /><br />\n       *\n       * This method adding a resource to the list of resources to place inside the output document ZIP.\n       * <br />\n       * Changed by vtloc in 2014Jan10.\n       *\n       * @param {string} resource_name The name of the resource (path).\n       * @param {string} type_of_res The type of this resource: either 'file', 'buffer', 'stream' or 'officegen' (the last one allow you to put office document inside office document).\n       * @param {object} res_data Optional data to use when creating this resource.\n       * @param {function} res_cb Callback to generate this resource (for 'buffer' mode only).\n       * @param {boolean} is_always Is true if this resource is perment for all the zip of this document type.\n       * @param {boolean} removed_after_used Is true if we need to delete this file after used.\n       * @memberof officegen#private#plugs\n       */\n      intAddAnyResourceToParse: function (resource_name, type_of_res, res_data, res_cb, is_always, removed_after_used) {\n        var newRes = {};\n        newRes.name = resource_name;\n        newRes.type = type_of_res;\n        newRes.data = res_data;\n        newRes.callback = res_cb;\n        newRes.is_perment = is_always;\n\n        // delete the temporatory resources after used\n        // @author vtloc\n        // @date 2014Jan10\n        if (removed_after_used) {\n          newRes.removed_after_used = removed_after_used;\n        } else {\n          newRes.removed_after_used = false;\n        } // Endif.\n\n        if (officegenGlobals.settings.verbose) {\n          console.log('[officegen] Push new res : ', newRes);\n        } // Endif.\n\n        privateData.resources.push(newRes);\n      },\n      /**\n       * Any additional plugin API must be placed here.\n       * @memberof officegen#private#plugs\n       */\n      type: {}\n    };\n\n    // Public API:\n\n    /**\n     * Generating the output document stream.\n     * <br /><br />\n     *\n     * The user of officegen must call this method after filling all the information about what to put inside\n     * the generated document. This method is creating the output document directly into the given stream object.\n     *\n     * The options parameters properties:\n     *\n     * 'finalize' - callback to be called after finishing to generate the document.\n     * 'error' - callback to be called on error.\n     *\n     * @param {object} output_stream The stream to receive the generated document.\n     * @param {object} options Way to pass callbacks.\n     * @function generate\n     * @memberof officegen\n     * @instance\n     */\n    this.generate = function (output_stream, options) {\n      if (officegenGlobals.settings.verbose) {\n        console.log('[officegen] Start generate() : ', {\n          outputType: privateData.features.outputType\n        });\n      }\n      if (typeof options === 'object') {\n        if (options.finalize) {\n          genobj.on('finalize', options.finalize);\n        } // Endif.\n\n        if (options.error) {\n          genobj.on('error', options.error);\n        } // Endif.\n      } // Endif.\n\n      if (privateData.features.page_name) {\n        if (privateData.pages.length === 0) {\n          genobj.emit('error', 'ERROR: No ' + privateData.features.page_name + ' been found inside your document.');\n        } // Endif.\n      } // Endif.\n\n      // Allow the type generator to prepare everything:\n      genobj.emit('beforeGen', privateData);\n      var archive = archiver(privateData.features.outputType === 'zip' ? 'zip' : 'tar');\n\n      /**\n       * Error handler.\n       * <br /><br />\n       *\n       * This is our error handler method for creating archive.\n       *\n       * @param {string} err The error string.\n       */\n      function onArchiveError(err) {\n        genobj.emit('error', err);\n      }\n      archive.on('error', onArchiveError);\n      if (privateData.features.outputType === 'gzip') {\n        var zlib = require('zlib');\n        var gzipper = zlib.createGzip();\n        archive.pipe(gzipper).pipe(output_stream);\n      } else {\n        archive.pipe(output_stream);\n      } // Endif.\n\n      /**\n       * Add the next resource into the zip stream.\n       * <br /><br />\n       *\n       * This function adding the next resource into the zip stream.\n       */\n      function generateNextResource() {\n        var resStream;\n        for (let cur_index = 0; cur_index < privateData.resources.length; cur_index++) {\n          if (officegenGlobals.settings.verbose) {\n            console.log('[officegen] generateNextResource ' + cur_index + ' : ', privateData.resources[cur_index]);\n          }\n          if (typeof privateData.resources[cur_index] !== 'undefined') {\n            switch (privateData.resources[cur_index].type) {\n              // Generate the resource text data by calling to provided function:\n              case 'buffer':\n                resStream = privateData.resources[cur_index].callback(privateData.resources[cur_index].data);\n                break;\n\n              // Just copy the file as is:\n              case 'file':\n                resStream = fs.createReadStream(privateData.resources[cur_index].data || privateData.resources[cur_index].name);\n                break;\n\n              // Just use this stream:\n              case 'stream':\n                resStream = privateData.resources[cur_index].data;\n                break;\n\n              // Officegen object:\n              case 'officegen':\n                resStream = new PassThrough();\n                privateData.resources[cur_index].data.generate(resStream);\n                break;\n\n              // Custom parser:\n              default:\n                for (var cur_parserType in officegenGlobals.resParserTypes) {\n                  if (cur_parserType === privateData.resources[cur_index].type && officegenGlobals.resParserTypes[cur_parserType] && officegenGlobals.resParserTypes[cur_parserType].parserFunc) {\n                    resStream = officegenGlobals.resParserTypes[cur_parserType].parserFunc(genobj, privateData.resources[cur_index].name, privateData.resources[cur_index].callback,\n                    // Can be used as the template source for template engines.\n                    privateData.resources[cur_index].data,\n                    // The data for the template engine.\n                    officegenGlobals.resParserTypes[cur_parserType].extra_data);\n                    break;\n                  } // Endif.\n                }\n              // End of for loop.\n            } // End of switch.\n\n            if (typeof resStream !== 'undefined') {\n              if (officegenGlobals.settings.verbose) {\n                console.log('[officegen] Adding into archive : \"' + privateData.resources[cur_index].name + '\" (' + privateData.resources[cur_index].type + ')...');\n              } // Endif.\n\n              archive.append(resStream, {\n                name: privateData.resources[cur_index].name\n              });\n              continue;\n            } else {\n              if (officegenGlobals.settings.verbose) {\n                console.log('[officegen] resStream is undefined'); // is it normal ??\n              }\n\n              continue;\n            } // Endif.\n          } else {\n            // Removed resource - just ignore it:\n            continue;\n          } // Endif.\n        } // Endfor\n\n        privateData.resources.forEach(function (resource) {\n          if (resource.removed_after_used) {\n            var filename = resource.data || resource.name;\n            if (officegenGlobals.settings.verbose) {\n              console.log('[officegen] Removing resource: ', filename);\n            }\n            fs.unlinkSync(filename);\n          }\n        });\n\n        // No more resources to add - close the archive:\n        if (officegenGlobals.settings.verbose) {\n          console.log('[officegen] Finalizing archive ...');\n        }\n        archive.finalize();\n\n        // Event to the type generator:\n        genobj.emit('afterGen', privateData, null, archive.pointer());\n        genobj.emit('finalize', archive.pointer());\n      }\n\n      // Start the process of generating the output zip stream:\n      generateNextResource();\n    };\n\n    /**\n     * Reuse this object for a new document of the same type.\n     * <br /><br />\n     *\n     * Call this method if you want to start generating a new document of the same type using this object.\n     * @function startNewDoc\n     * @memberof officegen\n     * @instance\n     */\n    this.startNewDoc = function () {\n      var kill = [];\n      for (var i = 0; i < privateData.resources.length; i++) {\n        if (!privateData.resources[i].is_perment) {\n          kill.push(i);\n        } // Endif.\n      } // End of for loop.\n\n      for (i = 0; i < kill.length; i++) {\n        privateData.resources.splice(kill[i] - i, 1);\n      } // End of for loop.\n\n      privateData.pages.length = 0;\n      genobj.emit('clearDoc', privateData);\n    };\n\n    // Public API - plugin API:\n\n    /**\n     * Register a new resource to add into the generated ZIP stream.\n     * <br /><br />\n     *\n     * Using this method the user can add extra custom resources into the generated ZIP stream.\n     *\n     * @param {string} resource_name The name of the resource (path).\n     * @param {string} type_of_res The type of this resource: either 'file' or 'buffer'.\n     * @param {object} res_data Optional data to use when creating this resource.\n     * @param {function} res_cb Callback to generate this resource (for 'buffer' mode only).\n     * @function addResourceToParse\n     * @memberof officegen\n     * @instance\n     */\n    this.addResourceToParse = function (resource_name, type_of_res, res_data, res_cb) {\n      // We don't want the user to add permanent resources to the list of resources:\n      privateData.plugs.intAddAnyResourceToParse(resource_name, type_of_res, res_data, res_cb, false);\n    };\n    if (typeof options === 'string') {\n      options = {\n        type: options\n      };\n    } // Endif.\n\n    // See the officegen descriptions for the rules of the options:\n    genobj.options = setOptions(options, {\n      type: 'unknown'\n    });\n    if (genobj.options && genobj.options.onerr) {\n      genobj.on('error', genobj.options.onerr);\n    } // Endif.\n\n    if (genobj.options && genobj.options.onend) {\n      genobj.on('finalize', genobj.options.onend);\n    } // Endif.\n\n    // Configure this object depending on the user's selected type:\n    if (genobj.options.type) {\n      setGeneratorType(genobj.options.type);\n    } // Endif.\n\n    return this;\n  };\n  sys.inherits(officegen, events.EventEmitter);\n\n  /**\n   * Create a new officegen object.\n   * <br /><br />\n   *\n   * This method creating a new officegen based object.\n   */\n  module.exports = function (options) {\n    return new officegen(options);\n  };\n\n  /**\n   * Change the verbose state of officegen.\n   * <br /><br />\n   *\n   * This is a global settings effecting all the officegen objects in your application. You should\n   * use it only for debugging.\n   *\n   * @param {boolean} new_state Either true or false.\n   */\n  module.exports.setVerboseMode = function setVerboseMode(new_state) {\n    officegenGlobals.settings.verbose = new_state;\n  };\n\n  /**\n   * Plugin API effecting all the instances of the officegen object.\n   *\n   * @namespace officegen#plugins\n   */\n  var plugins = {\n    /**\n     * Register a new type of document that we can generate.\n     * <br /><br />\n     *\n     * This method registering a new type of document that we can generate. You can extend officegen to support any\n     * type of document that based on resources files inside ZIP stream.\n     *\n     * @param {string} typeName The type of the document file.\n     * @param {function} createFunc The function to use to create this type of file.\n     * @param {object} schema_data Information needed by Schema-API to generate this kind of document.\n     * @param {string} docType Document type.\n     * @param {string} displayName The display name of this type.\n     * @memberof officegen#plugins\n     */\n    registerDocType: function (typeName, createFunc, schema_data, docType, displayName) {\n      officegenGlobals.types[typeName] = {};\n      officegenGlobals.types[typeName].createFunc = createFunc;\n      officegenGlobals.types[typeName].schema_data = schema_data;\n      officegenGlobals.types[typeName].type = docType;\n      officegenGlobals.types[typeName].display = displayName;\n    },\n    /**\n     * Get a document type object by name.\n     * <br /><br />\n     *\n     * This method get a document type object.\n     *\n     * @param {string} typeName The name of the document type.\n     * @return The plugin object of the document type.\n     * @memberof officegen#plugins\n     */\n    getDocTypeByName: function (typeName) {\n      return officegenGlobals.types[typeName];\n    },\n    /**\n     * Register a document prototype object.\n     * <br /><br />\n     *\n     * This method registering a prototype document object. You can place all the common code needed by a group of document\n     * types in a single prototype object.\n     *\n     * @param {string} typeName The name of the prototype object.\n     * @param {object} baseObj The prototype object.\n     * @param {string} displayName The display name of this type.\n     * @memberof officegen#plugins\n     */\n    registerPrototype: function (typeName, baseObj, displayName) {\n      officegenGlobals.docPrototypes[typeName] = {};\n      officegenGlobals.docPrototypes[typeName].baseObj = baseObj;\n      officegenGlobals.docPrototypes[typeName].display = displayName;\n    },\n    /**\n     * Get a document prototype object by name.\n     * <br /><br />\n     *\n     * This method get a prototype object.\n     *\n     * @param {string} typeName The name of the prototype object.\n     * @return The prototype plugin object.\n     * @memberof officegen#plugins\n     */\n    getPrototypeByName: function getPrototypeByName(typeName) {\n      return officegenGlobals.docPrototypes[typeName];\n    },\n    /**\n     * Register a new resource parser.\n     * <br /><br />\n     *\n     * This method registering a new resource parser. One use of this feature is in case that you are developing a new\n     * type of document and you want to extend officegen to use some kind of template engine as jade, ejs, haml* or CoffeeKup.\n     * In this case you can use a template engine to generate one or more of the resources inside the output archive.\n     * Another use of this method is to replace an existing plugin with different implementation.\n     *\n     * @param {string} typeName The type of the parser plugin.\n     * @param {function} parserFunc The resource generating function.\n     * @param {object} extra_data Optional additional data that may be required by the parser function.\n     * @param {string} displayName The display name of this type.\n     * @memberof officegen#plugins\n     */\n    registerParserType: function (typeName, parserFunc, extra_data, displayName) {\n      officegenGlobals.resParserTypes[typeName] = {};\n      officegenGlobals.resParserTypes[typeName].parserFunc = parserFunc;\n      officegenGlobals.resParserTypes[typeName].extra_data = extra_data;\n      officegenGlobals.resParserTypes[typeName].display = displayName;\n    },\n    /**\n     * Get if we need verbose mode.\n     * @param {string} docType Optional, Allow filtering by document type.\n     * @param {string} moduleName Optional, Allow filtering by feature / module.\n     * @memberof officegen#plugins\n     */\n    getVerboseMode: function (docType, moduleName) {\n      if (!docType && !moduleName) {\n        return !!officegenGlobals.settings.verbose;\n      } // Endif.\n\n      var verboseFlag;\n      if (officegenGlobals.settings.verbose && typeof officegenGlobals.settings.verbose === 'object') {\n        if (docType && officegenGlobals.settings.verbose.docType && typeof officegenGlobals.settings.verbose.docType === 'object' && officegenGlobals.settings.verbose.docType.indexOf) {\n          verboseFlag = officegenGlobals.settings.verbose.docType.indexOf(docType) >= 0;\n        } // Endif.\n\n        if (verboseFlag !== false && moduleName && officegenGlobals.settings.verbose.moduleName && typeof officegenGlobals.settings.verbose.moduleName === 'object' && officegenGlobals.settings.verbose.moduleName.indexOf) {\n          verboseFlag = officegenGlobals.settings.verbose.moduleName.indexOf(moduleName) >= 0;\n        } // Endif.\n      } // Endif.\n\n      return !!verboseFlag;\n    }\n  };\n  module.exports.plugins = plugins;\n  module.exports.schema = officegenGlobals.types;\n  module.exports.docType = {\n    TEXT: 1,\n    SPREADSHEET: 2,\n    PRESENTATION: 3\n  };\n})();","map":{"version":3,"names":["sys","require","events","Transform","archiver","fs","PassThrough","officegenGlobals","settings","types","docPrototypes","resParserTypes","officegen","options","EventEmitter","call","genobj","privateData","features","type","outputType","pages","resources","setOptions","object","source","objectTypes","boolean","function","number","string","undefined","isObject","value","keys","Object","index","iterable","result","args","arguments","argsIndex","argsLength","length","ownIndex","ownProps","setGeneratorType","new_type","is_ok","cur_type","createFunc","emit","plugs","intAddAnyResourceToParse","resource_name","type_of_res","res_data","res_cb","is_always","removed_after_used","newRes","name","data","callback","is_perment","verbose","console","log","push","generate","output_stream","finalize","on","error","page_name","archive","onArchiveError","err","zlib","gzipper","createGzip","pipe","generateNextResource","resStream","cur_index","createReadStream","cur_parserType","parserFunc","extra_data","append","forEach","resource","filename","unlinkSync","pointer","startNewDoc","kill","i","splice","addResourceToParse","onerr","onend","inherits","module","exports","setVerboseMode","new_state","plugins","registerDocType","typeName","schema_data","docType","displayName","display","getDocTypeByName","registerPrototype","baseObj","getPrototypeByName","registerParserType","getVerboseMode","moduleName","verboseFlag","indexOf","schema","TEXT","SPREADSHEET","PRESENTATION"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/officegen/lib/basicgen.js"],"sourcesContent":["//\n// officegen: basic common code\n//\n// Please refer to README.md for this module's documentations.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n\n;(function() {\n  var sys = require('util')\n  var events = require('events')\n\n  require('stream').Transform || require('readable-stream/transform')\n\n  // Used by generate:\n  var archiver = require('archiver')\n  var fs = require('fs')\n  var PassThrough =\n    require('stream').PassThrough || require('readable-stream/passthrough')\n\n  // Global data shared by all the officegen objects:\n\n  var officegenGlobals = {} // Our internal global objects.\n\n  officegenGlobals.settings = {}\n  officegenGlobals.types = {}\n  officegenGlobals.docPrototypes = {}\n  officegenGlobals.resParserTypes = {}\n\n  /**\n   * The constructor of the office generator object.\n   * <br /><br />\n   * This constructor function is been called by makegen().\n   *\n   * <h3><b>The options:</b></h3>\n   *\n   * The configuration options effecting the operation of the officegen object. Some of them can be only been\n   * declared on the 'options' object passed to the constructor object and the rest can be configured by either\n   * a property with the same name or by special function.\n   *\n   * <h3><b>List of options:</b></h3>\n   *\n   * <ul>\n   * <li>'type' - the type of generator to create. Possible options: either 'pptx', 'docx' or 'xlsx'.</li>\n   * <li>'creator' - the name of the document's author. The default is 'officegen'.</li>\n   * <li>'onend' - callback that been fired after finishing to create the zip stream.</li>\n   * <li>'onerr' - callback that been fired on error.</li>\n   * </ul>\n   *\n   * @param {object} options List of configuration options (see in the description of this function).\n   * @constructor\n   * @name officegen\n   */\n  var officegen = function(options) {\n    if (this instanceof officegen === false) {\n      return new officegen(options)\n    } // Endif.\n\n    events.EventEmitter.call(this)\n    // Transform.call(this, {objectMode : true})\n\n    // Internal events for plugins - NOT for the user:\n    // event 'beforeGen'\n    // event 'afterGen'\n    // event 'clearDoc'\n\n    var genobj = this // Can be accessed by all the functions been declared inside the officegen object.\n\n    /**\n     * For all the private data of each officegen instance that we don't want the user of officegen to access it.\n     * Each officegen object has it's own copy of the private object so changes been done to the private object of one officegen document will not effect other objects.\n     * <br /><br />\n     * List of data members:\n     * <ul>\n     * <li>features (object) - ???.</li>\n     * <ul>\n     * <li>type</li>\n     * <li>outputType (string) - The type of the container to hold all the resources.</li>\n     * </ul>\n     * <li>pages</li>\n     * <li>resources</li>\n     * <li>type</li>\n     * <li>plugs</li>\n     * <li>length</li>\n     * </ul>\n     * @namespace officegen#private\n     */\n    var privateData = {}\n\n    // Features been configured by the type selector and you can't change them:\n    privateData.features = {}\n    privateData.features.type = {}\n    privateData.features.outputType = 'zip'\n    // privateData.features.page_name\n\n    // Resources and \"pages\" of the document:\n    privateData.pages = [] // Information about all the pages to create.\n    privateData.resources = [] // List of all the resources to create inside the zip.\n\n    // Extra data needed by the document and it's specific to either to \"document prototype\" (like MS-office) or a document type (like pptx):\n    privateData.type = {}\n\n    /**\n     * Combine the given options and the default values.\n     * <br /><br />\n     *\n     * This function creating the real options object.\n     *\n     * @param {object} options The options to configure.\n     * @param {object} source The default configuration.\n     */\n    function setOptions(object, source) {\n      object = object || {}\n\n      var objectTypes = {\n        boolean: false,\n        function: true,\n        object: true,\n        number: false,\n        string: false,\n        undefined: false\n      }\n\n      function isObject(value) {\n        return !!(value && objectTypes[typeof value])\n      }\n\n      function keys(object) {\n        if (!isObject(object)) {\n          return []\n        }\n\n        return Object.keys(object)\n      }\n\n      var index\n      var iterable = object\n      var result = iterable\n\n      var args = arguments\n      var argsIndex = 0\n      var argsLength = args.length\n\n      // Loop variables:\n      var ownIndex = -1\n      var ownProps = objectTypes[typeof iterable] && keys(iterable)\n      var length = ownProps ? ownProps.length : 0\n\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex]\n\n        if (iterable && objectTypes[typeof iterable]) {\n          while (++ownIndex < length) {\n            index = ownProps[ownIndex]\n\n            if (\n              typeof result[index] === 'undefined' ||\n              result[index] === null\n            ) {\n              result[index] = iterable[index]\n            } else if (isObject(result[index]) && isObject(iterable[index])) {\n              result[index] = setOptions(result[index], iterable[index])\n            } // Endif.\n          } // End of while loop.\n        } // Endif.\n      } // End of while loop.\n\n      return result\n    }\n\n    /**\n     * Configure this object to generate the given type of document.\n     * <br /><br />\n     *\n     * Called by the document constructor to configure the new document object to the given type.\n     *\n     * @param {string} new_type The type of document to create.\n     */\n    function setGeneratorType(new_type) {\n      privateData.length = 0\n      var is_ok = false\n\n      if (new_type) {\n        for (var cur_type in officegenGlobals.types) {\n          if (\n            cur_type === new_type &&\n            officegenGlobals.types[cur_type] &&\n            officegenGlobals.types[cur_type].createFunc\n          ) {\n            officegenGlobals.types[cur_type].createFunc(\n              genobj,\n              new_type,\n              genobj.options,\n              privateData,\n              officegenGlobals.types[cur_type]\n            )\n            is_ok = true\n            break\n          } // Endif.\n        } // End of for loop.\n\n        if (!is_ok) {\n          // console.error ( '\\nFATAL ERROR: Either unknown or unsupported file type - %s\\n', options.type )\n          genobj.emit('error', 'FATAL ERROR: Invalid file type.')\n        } // Endif.\n      } // Endif.\n    }\n\n    /**\n     * API for plugins.\n     * <br /><br />\n     * Officegen plugins can extend officegen to support more document formats.\n     * <br /><br />\n     * Examples how to do it can be found on lib/gendocx.js, lib/genpptx.js and lib/genxlsx.js.\n     * @namespace officegen#private#plugs\n     * @example <caption>Adding a new document type to officegen</caption>\n     * var baseobj = require ( \"officegen\" )\n     *\n     * function makeMyDoc ( officegenObj, typeCodeName, options, officegenObjPlugins, typeInfo ) {\n     *   // officegenObjPlugins = Plugins access to extend officegenObj.\n     * }\n     *\n     * baseobj.plugins.registerDocType (\n     *   'mydoctype', // The document type's code name.\n     *   makeMyDoc,\n     *   {},\n     *   baseobj.docType.TEXT,\n     *   \"My Special Document File Format\"\n     * )\n     */\n    privateData.plugs = {\n      /**\n       * Add a resource to the list of resources to place inside the output zip file.\n       * <br /><br />\n       *\n       * This method adding a resource to the list of resources to place inside the output document ZIP.\n       * <br />\n       * Changed by vtloc in 2014Jan10.\n       *\n       * @param {string} resource_name The name of the resource (path).\n       * @param {string} type_of_res The type of this resource: either 'file', 'buffer', 'stream' or 'officegen' (the last one allow you to put office document inside office document).\n       * @param {object} res_data Optional data to use when creating this resource.\n       * @param {function} res_cb Callback to generate this resource (for 'buffer' mode only).\n       * @param {boolean} is_always Is true if this resource is perment for all the zip of this document type.\n       * @param {boolean} removed_after_used Is true if we need to delete this file after used.\n       * @memberof officegen#private#plugs\n       */\n      intAddAnyResourceToParse: function(\n        resource_name,\n        type_of_res,\n        res_data,\n        res_cb,\n        is_always,\n        removed_after_used\n      ) {\n        var newRes = {}\n\n        newRes.name = resource_name\n        newRes.type = type_of_res\n        newRes.data = res_data\n        newRes.callback = res_cb\n        newRes.is_perment = is_always\n\n        // delete the temporatory resources after used\n        // @author vtloc\n        // @date 2014Jan10\n        if (removed_after_used) {\n          newRes.removed_after_used = removed_after_used\n        } else {\n          newRes.removed_after_used = false\n        } // Endif.\n\n        if (officegenGlobals.settings.verbose) {\n          console.log('[officegen] Push new res : ', newRes)\n        } // Endif.\n\n        privateData.resources.push(newRes)\n      },\n\n      /**\n       * Any additional plugin API must be placed here.\n       * @memberof officegen#private#plugs\n       */\n      type: {}\n    }\n\n    // Public API:\n\n    /**\n     * Generating the output document stream.\n     * <br /><br />\n     *\n     * The user of officegen must call this method after filling all the information about what to put inside\n     * the generated document. This method is creating the output document directly into the given stream object.\n     *\n     * The options parameters properties:\n     *\n     * 'finalize' - callback to be called after finishing to generate the document.\n     * 'error' - callback to be called on error.\n     *\n     * @param {object} output_stream The stream to receive the generated document.\n     * @param {object} options Way to pass callbacks.\n     * @function generate\n     * @memberof officegen\n     * @instance\n     */\n    this.generate = function(output_stream, options) {\n      if (officegenGlobals.settings.verbose) {\n        console.log('[officegen] Start generate() : ', {\n          outputType: privateData.features.outputType\n        })\n      }\n\n      if (typeof options === 'object') {\n        if (options.finalize) {\n          genobj.on('finalize', options.finalize)\n        } // Endif.\n\n        if (options.error) {\n          genobj.on('error', options.error)\n        } // Endif.\n      } // Endif.\n\n      if (privateData.features.page_name) {\n        if (privateData.pages.length === 0) {\n          genobj.emit(\n            'error',\n            'ERROR: No ' +\n              privateData.features.page_name +\n              ' been found inside your document.'\n          )\n        } // Endif.\n      } // Endif.\n\n      // Allow the type generator to prepare everything:\n      genobj.emit('beforeGen', privateData)\n\n      var archive = archiver(\n        privateData.features.outputType === 'zip' ? 'zip' : 'tar'\n      )\n\n      /**\n       * Error handler.\n       * <br /><br />\n       *\n       * This is our error handler method for creating archive.\n       *\n       * @param {string} err The error string.\n       */\n      function onArchiveError(err) {\n        genobj.emit('error', err)\n      }\n\n      archive.on('error', onArchiveError)\n\n      if (privateData.features.outputType === 'gzip') {\n        var zlib = require('zlib')\n        var gzipper = zlib.createGzip()\n\n        archive.pipe(gzipper).pipe(output_stream)\n      } else {\n        archive.pipe(output_stream)\n      } // Endif.\n\n      /**\n       * Add the next resource into the zip stream.\n       * <br /><br />\n       *\n       * This function adding the next resource into the zip stream.\n       */\n      function generateNextResource() {\n        var resStream\n\n        for (\n          let cur_index = 0;\n          cur_index < privateData.resources.length;\n          cur_index++\n        ) {\n          if (officegenGlobals.settings.verbose) {\n            console.log(\n              '[officegen] generateNextResource ' + cur_index + ' : ',\n              privateData.resources[cur_index]\n            )\n          }\n\n          if (typeof privateData.resources[cur_index] !== 'undefined') {\n            switch (privateData.resources[cur_index].type) {\n              // Generate the resource text data by calling to provided function:\n              case 'buffer':\n                resStream = privateData.resources[cur_index].callback(\n                  privateData.resources[cur_index].data\n                )\n                break\n\n              // Just copy the file as is:\n              case 'file':\n                resStream = fs.createReadStream(\n                  privateData.resources[cur_index].data ||\n                    privateData.resources[cur_index].name\n                )\n                break\n\n              // Just use this stream:\n              case 'stream':\n                resStream = privateData.resources[cur_index].data\n                break\n\n              // Officegen object:\n              case 'officegen':\n                resStream = new PassThrough()\n                privateData.resources[cur_index].data.generate(resStream)\n                break\n\n              // Custom parser:\n              default:\n                for (var cur_parserType in officegenGlobals.resParserTypes) {\n                  if (\n                    cur_parserType === privateData.resources[cur_index].type &&\n                    officegenGlobals.resParserTypes[cur_parserType] &&\n                    officegenGlobals.resParserTypes[cur_parserType].parserFunc\n                  ) {\n                    resStream = officegenGlobals.resParserTypes[\n                      cur_parserType\n                    ].parserFunc(\n                      genobj,\n                      privateData.resources[cur_index].name,\n                      privateData.resources[cur_index].callback, // Can be used as the template source for template engines.\n                      privateData.resources[cur_index].data, // The data for the template engine.\n                      officegenGlobals.resParserTypes[cur_parserType].extra_data\n                    )\n                    break\n                  } // Endif.\n                } // End of for loop.\n            } // End of switch.\n\n            if (typeof resStream !== 'undefined') {\n              if (officegenGlobals.settings.verbose) {\n                console.log(\n                  '[officegen] Adding into archive : \"' +\n                    privateData.resources[cur_index].name +\n                    '\" (' +\n                    privateData.resources[cur_index].type +\n                    ')...'\n                )\n              } // Endif.\n\n              archive.append(resStream, {\n                name: privateData.resources[cur_index].name\n              })\n\n              continue\n            } else {\n              if (officegenGlobals.settings.verbose) {\n                console.log('[officegen] resStream is undefined') // is it normal ??\n              }\n              continue\n            } // Endif.\n          } else {\n            // Removed resource - just ignore it:\n            continue\n          } // Endif.\n        } // Endfor\n\n        privateData.resources.forEach(function(resource) {\n          if (resource.removed_after_used) {\n            var filename = resource.data || resource.name\n\n            if (officegenGlobals.settings.verbose) {\n              console.log('[officegen] Removing resource: ', filename)\n            }\n\n            fs.unlinkSync(filename)\n          }\n        })\n\n        // No more resources to add - close the archive:\n        if (officegenGlobals.settings.verbose) {\n          console.log('[officegen] Finalizing archive ...')\n        }\n        archive.finalize()\n\n        // Event to the type generator:\n        genobj.emit('afterGen', privateData, null, archive.pointer())\n\n        genobj.emit('finalize', archive.pointer())\n      }\n\n      // Start the process of generating the output zip stream:\n      generateNextResource()\n    }\n\n    /**\n     * Reuse this object for a new document of the same type.\n     * <br /><br />\n     *\n     * Call this method if you want to start generating a new document of the same type using this object.\n     * @function startNewDoc\n     * @memberof officegen\n     * @instance\n     */\n    this.startNewDoc = function() {\n      var kill = []\n\n      for (var i = 0; i < privateData.resources.length; i++) {\n        if (!privateData.resources[i].is_perment) {\n          kill.push(i)\n        } // Endif.\n      } // End of for loop.\n\n      for (i = 0; i < kill.length; i++) {\n        privateData.resources.splice(kill[i] - i, 1)\n      } // End of for loop.\n\n      privateData.pages.length = 0\n\n      genobj.emit('clearDoc', privateData)\n    }\n\n    // Public API - plugin API:\n\n    /**\n     * Register a new resource to add into the generated ZIP stream.\n     * <br /><br />\n     *\n     * Using this method the user can add extra custom resources into the generated ZIP stream.\n     *\n     * @param {string} resource_name The name of the resource (path).\n     * @param {string} type_of_res The type of this resource: either 'file' or 'buffer'.\n     * @param {object} res_data Optional data to use when creating this resource.\n     * @param {function} res_cb Callback to generate this resource (for 'buffer' mode only).\n     * @function addResourceToParse\n     * @memberof officegen\n     * @instance\n     */\n    this.addResourceToParse = function(\n      resource_name,\n      type_of_res,\n      res_data,\n      res_cb\n    ) {\n      // We don't want the user to add permanent resources to the list of resources:\n      privateData.plugs.intAddAnyResourceToParse(\n        resource_name,\n        type_of_res,\n        res_data,\n        res_cb,\n        false\n      )\n    }\n\n    if (typeof options === 'string') {\n      options = { type: options }\n    } // Endif.\n\n    // See the officegen descriptions for the rules of the options:\n    genobj.options = setOptions(options, { type: 'unknown' })\n\n    if (genobj.options && genobj.options.onerr) {\n      genobj.on('error', genobj.options.onerr)\n    } // Endif.\n\n    if (genobj.options && genobj.options.onend) {\n      genobj.on('finalize', genobj.options.onend)\n    } // Endif.\n\n    // Configure this object depending on the user's selected type:\n    if (genobj.options.type) {\n      setGeneratorType(genobj.options.type)\n    } // Endif.\n\n    return this\n  }\n\n  sys.inherits(officegen, events.EventEmitter)\n\n  /**\n   * Create a new officegen object.\n   * <br /><br />\n   *\n   * This method creating a new officegen based object.\n   */\n  module.exports = function(options) {\n    return new officegen(options)\n  }\n\n  /**\n   * Change the verbose state of officegen.\n   * <br /><br />\n   *\n   * This is a global settings effecting all the officegen objects in your application. You should\n   * use it only for debugging.\n   *\n   * @param {boolean} new_state Either true or false.\n   */\n  module.exports.setVerboseMode = function setVerboseMode(new_state) {\n    officegenGlobals.settings.verbose = new_state\n  }\n\n  /**\n   * Plugin API effecting all the instances of the officegen object.\n   *\n   * @namespace officegen#plugins\n   */\n  var plugins = {\n    /**\n     * Register a new type of document that we can generate.\n     * <br /><br />\n     *\n     * This method registering a new type of document that we can generate. You can extend officegen to support any\n     * type of document that based on resources files inside ZIP stream.\n     *\n     * @param {string} typeName The type of the document file.\n     * @param {function} createFunc The function to use to create this type of file.\n     * @param {object} schema_data Information needed by Schema-API to generate this kind of document.\n     * @param {string} docType Document type.\n     * @param {string} displayName The display name of this type.\n     * @memberof officegen#plugins\n     */\n    registerDocType: function(\n      typeName,\n      createFunc,\n      schema_data,\n      docType,\n      displayName\n    ) {\n      officegenGlobals.types[typeName] = {}\n      officegenGlobals.types[typeName].createFunc = createFunc\n      officegenGlobals.types[typeName].schema_data = schema_data\n      officegenGlobals.types[typeName].type = docType\n      officegenGlobals.types[typeName].display = displayName\n    },\n\n    /**\n     * Get a document type object by name.\n     * <br /><br />\n     *\n     * This method get a document type object.\n     *\n     * @param {string} typeName The name of the document type.\n     * @return The plugin object of the document type.\n     * @memberof officegen#plugins\n     */\n    getDocTypeByName: function(typeName) {\n      return officegenGlobals.types[typeName]\n    },\n\n    /**\n     * Register a document prototype object.\n     * <br /><br />\n     *\n     * This method registering a prototype document object. You can place all the common code needed by a group of document\n     * types in a single prototype object.\n     *\n     * @param {string} typeName The name of the prototype object.\n     * @param {object} baseObj The prototype object.\n     * @param {string} displayName The display name of this type.\n     * @memberof officegen#plugins\n     */\n    registerPrototype: function(typeName, baseObj, displayName) {\n      officegenGlobals.docPrototypes[typeName] = {}\n      officegenGlobals.docPrototypes[typeName].baseObj = baseObj\n      officegenGlobals.docPrototypes[typeName].display = displayName\n    },\n\n    /**\n     * Get a document prototype object by name.\n     * <br /><br />\n     *\n     * This method get a prototype object.\n     *\n     * @param {string} typeName The name of the prototype object.\n     * @return The prototype plugin object.\n     * @memberof officegen#plugins\n     */\n    getPrototypeByName: function getPrototypeByName(typeName) {\n      return officegenGlobals.docPrototypes[typeName]\n    },\n\n    /**\n     * Register a new resource parser.\n     * <br /><br />\n     *\n     * This method registering a new resource parser. One use of this feature is in case that you are developing a new\n     * type of document and you want to extend officegen to use some kind of template engine as jade, ejs, haml* or CoffeeKup.\n     * In this case you can use a template engine to generate one or more of the resources inside the output archive.\n     * Another use of this method is to replace an existing plugin with different implementation.\n     *\n     * @param {string} typeName The type of the parser plugin.\n     * @param {function} parserFunc The resource generating function.\n     * @param {object} extra_data Optional additional data that may be required by the parser function.\n     * @param {string} displayName The display name of this type.\n     * @memberof officegen#plugins\n     */\n    registerParserType: function(\n      typeName,\n      parserFunc,\n      extra_data,\n      displayName\n    ) {\n      officegenGlobals.resParserTypes[typeName] = {}\n      officegenGlobals.resParserTypes[typeName].parserFunc = parserFunc\n      officegenGlobals.resParserTypes[typeName].extra_data = extra_data\n      officegenGlobals.resParserTypes[typeName].display = displayName\n    },\n\n    /**\n     * Get if we need verbose mode.\n     * @param {string} docType Optional, Allow filtering by document type.\n     * @param {string} moduleName Optional, Allow filtering by feature / module.\n     * @memberof officegen#plugins\n     */\n    getVerboseMode: function(docType, moduleName) {\n      if (!docType && !moduleName) {\n        return !!officegenGlobals.settings.verbose\n      } // Endif.\n\n      var verboseFlag\n\n      if (\n        officegenGlobals.settings.verbose &&\n        typeof officegenGlobals.settings.verbose === 'object'\n      ) {\n        if (\n          docType &&\n          officegenGlobals.settings.verbose.docType &&\n          typeof officegenGlobals.settings.verbose.docType === 'object' &&\n          officegenGlobals.settings.verbose.docType.indexOf\n        ) {\n          verboseFlag =\n            officegenGlobals.settings.verbose.docType.indexOf(docType) >= 0\n        } // Endif.\n\n        if (\n          verboseFlag !== false &&\n          moduleName &&\n          officegenGlobals.settings.verbose.moduleName &&\n          typeof officegenGlobals.settings.verbose.moduleName === 'object' &&\n          officegenGlobals.settings.verbose.moduleName.indexOf\n        ) {\n          verboseFlag =\n            officegenGlobals.settings.verbose.moduleName.indexOf(moduleName) >=\n            0\n        } // Endif.\n      } // Endif.\n\n      return !!verboseFlag\n    }\n  }\n\n  module.exports.plugins = plugins\n  module.exports.schema = officegenGlobals.types\n  module.exports.docType = { TEXT: 1, SPREADSHEET: 2, PRESENTATION: 3 }\n})()\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}