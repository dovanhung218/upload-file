{"ast":null,"code":"/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\nvar inherits = require('util').inherits;\nvar crc32 = require('buffer-crc32');\nvar {\n  CRC32Stream\n} = require('crc32-stream');\nvar {\n  DeflateCRC32Stream\n} = require('crc32-stream');\nvar ArchiveOutputStream = require('../archive-output-stream');\nvar ZipArchiveEntry = require('./zip-archive-entry');\nvar GeneralPurposeBit = require('./general-purpose-bit');\nvar constants = require('./constants');\nvar util = require('../../util');\nvar zipUtil = require('./util');\nvar ZipArchiveOutputStream = module.exports = function (options) {\n  if (!(this instanceof ZipArchiveOutputStream)) {\n    return new ZipArchiveOutputStream(options);\n  }\n  options = this.options = this._defaults(options);\n  ArchiveOutputStream.call(this, options);\n  this._entry = null;\n  this._entries = [];\n  this._archive = {\n    centralLength: 0,\n    centralOffset: 0,\n    comment: '',\n    finish: false,\n    finished: false,\n    processing: false,\n    forceZip64: options.forceZip64,\n    forceLocalTime: options.forceLocalTime\n  };\n};\ninherits(ZipArchiveOutputStream, ArchiveOutputStream);\nZipArchiveOutputStream.prototype._afterAppend = function (ae) {\n  this._entries.push(ae);\n  if (ae.getGeneralPurposeBit().usesDataDescriptor()) {\n    this._writeDataDescriptor(ae);\n  }\n  this._archive.processing = false;\n  this._entry = null;\n  if (this._archive.finish && !this._archive.finished) {\n    this._finish();\n  }\n};\nZipArchiveOutputStream.prototype._appendBuffer = function (ae, source, callback) {\n  if (source.length === 0) {\n    ae.setMethod(constants.METHOD_STORED);\n  }\n  var method = ae.getMethod();\n  if (method === constants.METHOD_STORED) {\n    ae.setSize(source.length);\n    ae.setCompressedSize(source.length);\n    ae.setCrc(crc32.unsigned(source));\n  }\n  this._writeLocalFileHeader(ae);\n  if (method === constants.METHOD_STORED) {\n    this.write(source);\n    this._afterAppend(ae);\n    callback(null, ae);\n    return;\n  } else if (method === constants.METHOD_DEFLATED) {\n    this._smartStream(ae, callback).end(source);\n    return;\n  } else {\n    callback(new Error('compression method ' + method + ' not implemented'));\n    return;\n  }\n};\nZipArchiveOutputStream.prototype._appendStream = function (ae, source, callback) {\n  ae.getGeneralPurposeBit().useDataDescriptor(true);\n  ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\n  this._writeLocalFileHeader(ae);\n  var smart = this._smartStream(ae, callback);\n  source.once('error', function (err) {\n    smart.emit('error', err);\n    smart.end();\n  });\n  source.pipe(smart);\n};\nZipArchiveOutputStream.prototype._defaults = function (o) {\n  if (typeof o !== 'object') {\n    o = {};\n  }\n  if (typeof o.zlib !== 'object') {\n    o.zlib = {};\n  }\n  if (typeof o.zlib.level !== 'number') {\n    o.zlib.level = constants.ZLIB_BEST_SPEED;\n  }\n  o.forceZip64 = !!o.forceZip64;\n  o.forceLocalTime = !!o.forceLocalTime;\n  return o;\n};\nZipArchiveOutputStream.prototype._finish = function () {\n  this._archive.centralOffset = this.offset;\n  this._entries.forEach(function (ae) {\n    this._writeCentralFileHeader(ae);\n  }.bind(this));\n  this._archive.centralLength = this.offset - this._archive.centralOffset;\n  if (this.isZip64()) {\n    this._writeCentralDirectoryZip64();\n  }\n  this._writeCentralDirectoryEnd();\n  this._archive.processing = false;\n  this._archive.finish = true;\n  this._archive.finished = true;\n  this.end();\n};\nZipArchiveOutputStream.prototype._normalizeEntry = function (ae) {\n  if (ae.getMethod() === -1) {\n    ae.setMethod(constants.METHOD_DEFLATED);\n  }\n  if (ae.getMethod() === constants.METHOD_DEFLATED) {\n    ae.getGeneralPurposeBit().useDataDescriptor(true);\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\n  }\n  if (ae.getTime() === -1) {\n    ae.setTime(new Date(), this._archive.forceLocalTime);\n  }\n  ae._offsets = {\n    file: 0,\n    data: 0,\n    contents: 0\n  };\n};\nZipArchiveOutputStream.prototype._smartStream = function (ae, callback) {\n  var deflate = ae.getMethod() === constants.METHOD_DEFLATED;\n  var process = deflate ? new DeflateCRC32Stream(this.options.zlib) : new CRC32Stream();\n  var error = null;\n  function handleStuff() {\n    var digest = process.digest().readUInt32BE(0);\n    ae.setCrc(digest);\n    ae.setSize(process.size());\n    ae.setCompressedSize(process.size(true));\n    this._afterAppend(ae);\n    callback(error, ae);\n  }\n  process.once('end', handleStuff.bind(this));\n  process.once('error', function (err) {\n    error = err;\n  });\n  process.pipe(this, {\n    end: false\n  });\n  return process;\n};\nZipArchiveOutputStream.prototype._writeCentralDirectoryEnd = function () {\n  var records = this._entries.length;\n  var size = this._archive.centralLength;\n  var offset = this._archive.centralOffset;\n  if (this.isZip64()) {\n    records = constants.ZIP64_MAGIC_SHORT;\n    size = constants.ZIP64_MAGIC;\n    offset = constants.ZIP64_MAGIC;\n  }\n\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_EOCD));\n\n  // disk numbers\n  this.write(constants.SHORT_ZERO);\n  this.write(constants.SHORT_ZERO);\n\n  // number of entries\n  this.write(zipUtil.getShortBytes(records));\n  this.write(zipUtil.getShortBytes(records));\n\n  // length and location of CD\n  this.write(zipUtil.getLongBytes(size));\n  this.write(zipUtil.getLongBytes(offset));\n\n  // archive comment\n  var comment = this.getComment();\n  var commentLength = Buffer.byteLength(comment);\n  this.write(zipUtil.getShortBytes(commentLength));\n  this.write(comment);\n};\nZipArchiveOutputStream.prototype._writeCentralDirectoryZip64 = function () {\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD));\n\n  // size of the ZIP64 EOCD record\n  this.write(zipUtil.getEightBytes(44));\n\n  // version made by\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));\n\n  // version to extract\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));\n\n  // disk numbers\n  this.write(constants.LONG_ZERO);\n  this.write(constants.LONG_ZERO);\n\n  // number of entries\n  this.write(zipUtil.getEightBytes(this._entries.length));\n  this.write(zipUtil.getEightBytes(this._entries.length));\n\n  // length and location of CD\n  this.write(zipUtil.getEightBytes(this._archive.centralLength));\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset));\n\n  // extensible data sector\n  // not implemented at this time\n\n  // end of central directory locator\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD_LOC));\n\n  // disk number holding the ZIP64 EOCD record\n  this.write(constants.LONG_ZERO);\n\n  // relative offset of the ZIP64 EOCD record\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset + this._archive.centralLength));\n\n  // total number of disks\n  this.write(zipUtil.getLongBytes(1));\n};\nZipArchiveOutputStream.prototype._writeCentralFileHeader = function (ae) {\n  var gpb = ae.getGeneralPurposeBit();\n  var method = ae.getMethod();\n  var offsets = ae._offsets;\n  var size = ae.getSize();\n  var compressedSize = ae.getCompressedSize();\n  if (ae.isZip64() || offsets.file > constants.ZIP64_MAGIC) {\n    size = constants.ZIP64_MAGIC;\n    compressedSize = constants.ZIP64_MAGIC;\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\n    var extraBuf = Buffer.concat([zipUtil.getShortBytes(constants.ZIP64_EXTRA_ID), zipUtil.getShortBytes(24), zipUtil.getEightBytes(ae.getSize()), zipUtil.getEightBytes(ae.getCompressedSize()), zipUtil.getEightBytes(offsets.file)], 28);\n    ae.setExtra(extraBuf);\n  }\n\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_CFH));\n\n  // version made by\n  this.write(zipUtil.getShortBytes(ae.getPlatform() << 8 | constants.VERSION_MADEBY));\n\n  // version to extract and general bit flag\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\n  this.write(gpb.encode());\n\n  // compression method\n  this.write(zipUtil.getShortBytes(method));\n\n  // datetime\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\n\n  // crc32 checksum\n  this.write(zipUtil.getLongBytes(ae.getCrc()));\n\n  // sizes\n  this.write(zipUtil.getLongBytes(compressedSize));\n  this.write(zipUtil.getLongBytes(size));\n  var name = ae.getName();\n  var comment = ae.getComment();\n  var extra = ae.getCentralDirectoryExtra();\n  if (gpb.usesUTF8ForNames()) {\n    name = Buffer.from(name);\n    comment = Buffer.from(comment);\n  }\n\n  // name length\n  this.write(zipUtil.getShortBytes(name.length));\n\n  // extra length\n  this.write(zipUtil.getShortBytes(extra.length));\n\n  // comments length\n  this.write(zipUtil.getShortBytes(comment.length));\n\n  // disk number start\n  this.write(constants.SHORT_ZERO);\n\n  // internal attributes\n  this.write(zipUtil.getShortBytes(ae.getInternalAttributes()));\n\n  // external attributes\n  this.write(zipUtil.getLongBytes(ae.getExternalAttributes()));\n\n  // relative offset of LFH\n  if (offsets.file > constants.ZIP64_MAGIC) {\n    this.write(zipUtil.getLongBytes(constants.ZIP64_MAGIC));\n  } else {\n    this.write(zipUtil.getLongBytes(offsets.file));\n  }\n\n  // name\n  this.write(name);\n\n  // extra\n  this.write(extra);\n\n  // comment\n  this.write(comment);\n};\nZipArchiveOutputStream.prototype._writeDataDescriptor = function (ae) {\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_DD));\n\n  // crc32 checksum\n  this.write(zipUtil.getLongBytes(ae.getCrc()));\n\n  // sizes\n  if (ae.isZip64()) {\n    this.write(zipUtil.getEightBytes(ae.getCompressedSize()));\n    this.write(zipUtil.getEightBytes(ae.getSize()));\n  } else {\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\n    this.write(zipUtil.getLongBytes(ae.getSize()));\n  }\n};\nZipArchiveOutputStream.prototype._writeLocalFileHeader = function (ae) {\n  var gpb = ae.getGeneralPurposeBit();\n  var method = ae.getMethod();\n  var name = ae.getName();\n  var extra = ae.getLocalFileDataExtra();\n  if (ae.isZip64()) {\n    gpb.useDataDescriptor(true);\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\n  }\n  if (gpb.usesUTF8ForNames()) {\n    name = Buffer.from(name);\n  }\n  ae._offsets.file = this.offset;\n\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_LFH));\n\n  // version to extract and general bit flag\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\n  this.write(gpb.encode());\n\n  // compression method\n  this.write(zipUtil.getShortBytes(method));\n\n  // datetime\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\n  ae._offsets.data = this.offset;\n\n  // crc32 checksum and sizes\n  if (gpb.usesDataDescriptor()) {\n    this.write(constants.LONG_ZERO);\n    this.write(constants.LONG_ZERO);\n    this.write(constants.LONG_ZERO);\n  } else {\n    this.write(zipUtil.getLongBytes(ae.getCrc()));\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\n    this.write(zipUtil.getLongBytes(ae.getSize()));\n  }\n\n  // name length\n  this.write(zipUtil.getShortBytes(name.length));\n\n  // extra length\n  this.write(zipUtil.getShortBytes(extra.length));\n\n  // name\n  this.write(name);\n\n  // extra\n  this.write(extra);\n  ae._offsets.contents = this.offset;\n};\nZipArchiveOutputStream.prototype.getComment = function (comment) {\n  return this._archive.comment !== null ? this._archive.comment : '';\n};\nZipArchiveOutputStream.prototype.isZip64 = function () {\n  return this._archive.forceZip64 || this._entries.length > constants.ZIP64_MAGIC_SHORT || this._archive.centralLength > constants.ZIP64_MAGIC || this._archive.centralOffset > constants.ZIP64_MAGIC;\n};\nZipArchiveOutputStream.prototype.setComment = function (comment) {\n  this._archive.comment = comment;\n};","map":{"version":3,"names":["inherits","require","crc32","CRC32Stream","DeflateCRC32Stream","ArchiveOutputStream","ZipArchiveEntry","GeneralPurposeBit","constants","util","zipUtil","ZipArchiveOutputStream","module","exports","options","_defaults","call","_entry","_entries","_archive","centralLength","centralOffset","comment","finish","finished","processing","forceZip64","forceLocalTime","prototype","_afterAppend","ae","push","getGeneralPurposeBit","usesDataDescriptor","_writeDataDescriptor","_finish","_appendBuffer","source","callback","length","setMethod","METHOD_STORED","method","getMethod","setSize","setCompressedSize","setCrc","unsigned","_writeLocalFileHeader","write","METHOD_DEFLATED","_smartStream","end","Error","_appendStream","useDataDescriptor","setVersionNeededToExtract","MIN_VERSION_DATA_DESCRIPTOR","smart","once","err","emit","pipe","o","zlib","level","ZLIB_BEST_SPEED","offset","forEach","_writeCentralFileHeader","bind","isZip64","_writeCentralDirectoryZip64","_writeCentralDirectoryEnd","_normalizeEntry","getTime","setTime","Date","_offsets","file","data","contents","deflate","process","error","handleStuff","digest","readUInt32BE","size","records","ZIP64_MAGIC_SHORT","ZIP64_MAGIC","getLongBytes","SIG_EOCD","SHORT_ZERO","getShortBytes","getComment","commentLength","Buffer","byteLength","SIG_ZIP64_EOCD","getEightBytes","MIN_VERSION_ZIP64","LONG_ZERO","SIG_ZIP64_EOCD_LOC","gpb","offsets","getSize","compressedSize","getCompressedSize","extraBuf","concat","ZIP64_EXTRA_ID","setExtra","SIG_CFH","getPlatform","VERSION_MADEBY","getVersionNeededToExtract","encode","getTimeDos","getCrc","name","getName","extra","getCentralDirectoryExtra","usesUTF8ForNames","from","getInternalAttributes","getExternalAttributes","SIG_DD","getLocalFileDataExtra","SIG_LFH","setComment"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js"],"sourcesContent":["/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\r\nvar inherits = require('util').inherits;\r\nvar crc32 = require('buffer-crc32');\r\nvar {CRC32Stream} = require('crc32-stream');\r\nvar {DeflateCRC32Stream} = require('crc32-stream');\r\n\r\nvar ArchiveOutputStream = require('../archive-output-stream');\r\nvar ZipArchiveEntry = require('./zip-archive-entry');\r\nvar GeneralPurposeBit = require('./general-purpose-bit');\r\n\r\nvar constants = require('./constants');\r\nvar util = require('../../util');\r\nvar zipUtil = require('./util');\r\n\r\nvar ZipArchiveOutputStream = module.exports = function(options) {\r\n  if (!(this instanceof ZipArchiveOutputStream)) {\r\n    return new ZipArchiveOutputStream(options);\r\n  }\r\n\r\n  options = this.options = this._defaults(options);\r\n\r\n  ArchiveOutputStream.call(this, options);\r\n\r\n  this._entry = null;\r\n  this._entries = [];\r\n  this._archive = {\r\n    centralLength: 0,\r\n    centralOffset: 0,\r\n    comment: '',\r\n    finish: false,\r\n    finished: false,\r\n    processing: false,\r\n    forceZip64: options.forceZip64,\r\n    forceLocalTime: options.forceLocalTime\r\n  };\r\n};\r\n\r\ninherits(ZipArchiveOutputStream, ArchiveOutputStream);\r\n\r\nZipArchiveOutputStream.prototype._afterAppend = function(ae) {\r\n  this._entries.push(ae);\r\n\r\n  if (ae.getGeneralPurposeBit().usesDataDescriptor()) {\r\n    this._writeDataDescriptor(ae);\r\n  }\r\n\r\n  this._archive.processing = false;\r\n  this._entry = null;\r\n\r\n  if (this._archive.finish && !this._archive.finished) {\r\n    this._finish();\r\n  }\r\n};\r\n\r\nZipArchiveOutputStream.prototype._appendBuffer = function(ae, source, callback) {\r\n  if (source.length === 0) {\r\n    ae.setMethod(constants.METHOD_STORED);\r\n  }\r\n\r\n  var method = ae.getMethod();\r\n\r\n  if (method === constants.METHOD_STORED) {\r\n    ae.setSize(source.length);\r\n    ae.setCompressedSize(source.length);\r\n    ae.setCrc(crc32.unsigned(source));\r\n  }\r\n\r\n  this._writeLocalFileHeader(ae);\r\n\r\n  if (method === constants.METHOD_STORED) {\r\n    this.write(source);\r\n    this._afterAppend(ae);\r\n    callback(null, ae);\r\n    return;\r\n  } else if (method === constants.METHOD_DEFLATED) {\r\n    this._smartStream(ae, callback).end(source);\r\n    return;\r\n  } else {\r\n    callback(new Error('compression method ' + method + ' not implemented'));\r\n    return;\r\n  }\r\n};\r\n\r\nZipArchiveOutputStream.prototype._appendStream = function(ae, source, callback) {\r\n  ae.getGeneralPurposeBit().useDataDescriptor(true);\r\n  ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\r\n\r\n  this._writeLocalFileHeader(ae);\r\n\r\n  var smart = this._smartStream(ae, callback);\r\n  source.once('error', function(err) {\r\n    smart.emit('error', err);\r\n    smart.end();\r\n  })\r\n  source.pipe(smart);\r\n};\r\n\r\nZipArchiveOutputStream.prototype._defaults = function(o) {\r\n  if (typeof o !== 'object') {\r\n    o = {};\r\n  }\r\n\r\n  if (typeof o.zlib !== 'object') {\r\n    o.zlib = {};\r\n  }\r\n\r\n  if (typeof o.zlib.level !== 'number') {\r\n    o.zlib.level = constants.ZLIB_BEST_SPEED;\r\n  }\r\n\r\n  o.forceZip64 = !!o.forceZip64;\r\n  o.forceLocalTime = !!o.forceLocalTime;\r\n\r\n  return o;\r\n};\r\n\r\nZipArchiveOutputStream.prototype._finish = function() {\r\n  this._archive.centralOffset = this.offset;\r\n\r\n  this._entries.forEach(function(ae) {\r\n    this._writeCentralFileHeader(ae);\r\n  }.bind(this));\r\n\r\n  this._archive.centralLength = this.offset - this._archive.centralOffset;\r\n\r\n  if (this.isZip64()) {\r\n    this._writeCentralDirectoryZip64();\r\n  }\r\n\r\n  this._writeCentralDirectoryEnd();\r\n\r\n  this._archive.processing = false;\r\n  this._archive.finish = true;\r\n  this._archive.finished = true;\r\n  this.end();\r\n};\r\n\r\nZipArchiveOutputStream.prototype._normalizeEntry = function(ae) {\r\n  if (ae.getMethod() === -1) {\r\n    ae.setMethod(constants.METHOD_DEFLATED);\r\n  }\r\n\r\n  if (ae.getMethod() === constants.METHOD_DEFLATED) {\r\n    ae.getGeneralPurposeBit().useDataDescriptor(true);\r\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\r\n  }\r\n\r\n  if (ae.getTime() === -1) {\r\n    ae.setTime(new Date(), this._archive.forceLocalTime);\r\n  }\r\n\r\n  ae._offsets = {\r\n    file: 0,\r\n    data: 0,\r\n    contents: 0,\r\n  };\r\n};\r\n\r\nZipArchiveOutputStream.prototype._smartStream = function(ae, callback) {\r\n  var deflate = ae.getMethod() === constants.METHOD_DEFLATED;\r\n  var process = deflate ? new DeflateCRC32Stream(this.options.zlib) : new CRC32Stream();\r\n  var error = null;\r\n\r\n  function handleStuff() {\r\n    var digest = process.digest().readUInt32BE(0);\r\n    ae.setCrc(digest);\r\n    ae.setSize(process.size());\r\n    ae.setCompressedSize(process.size(true));\r\n    this._afterAppend(ae);\r\n    callback(error, ae);\r\n  }\r\n\r\n  process.once('end', handleStuff.bind(this));\r\n  process.once('error', function(err) {\r\n    error = err;\r\n  });\r\n\r\n  process.pipe(this, { end: false });\r\n\r\n  return process;\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeCentralDirectoryEnd = function() {\r\n  var records = this._entries.length;\r\n  var size = this._archive.centralLength;\r\n  var offset = this._archive.centralOffset;\r\n\r\n  if (this.isZip64()) {\r\n    records = constants.ZIP64_MAGIC_SHORT;\r\n    size = constants.ZIP64_MAGIC;\r\n    offset = constants.ZIP64_MAGIC;\r\n  }\r\n\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_EOCD));\r\n\r\n  // disk numbers\r\n  this.write(constants.SHORT_ZERO);\r\n  this.write(constants.SHORT_ZERO);\r\n\r\n  // number of entries\r\n  this.write(zipUtil.getShortBytes(records));\r\n  this.write(zipUtil.getShortBytes(records));\r\n\r\n  // length and location of CD\r\n  this.write(zipUtil.getLongBytes(size));\r\n  this.write(zipUtil.getLongBytes(offset));\r\n\r\n  // archive comment\r\n  var comment = this.getComment();\r\n  var commentLength = Buffer.byteLength(comment);\r\n  this.write(zipUtil.getShortBytes(commentLength));\r\n  this.write(comment);\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeCentralDirectoryZip64 = function() {\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD));\r\n\r\n  // size of the ZIP64 EOCD record\r\n  this.write(zipUtil.getEightBytes(44));\r\n\r\n  // version made by\r\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));\r\n\r\n  // version to extract\r\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));\r\n\r\n  // disk numbers\r\n  this.write(constants.LONG_ZERO);\r\n  this.write(constants.LONG_ZERO);\r\n\r\n  // number of entries\r\n  this.write(zipUtil.getEightBytes(this._entries.length));\r\n  this.write(zipUtil.getEightBytes(this._entries.length));\r\n\r\n  // length and location of CD\r\n  this.write(zipUtil.getEightBytes(this._archive.centralLength));\r\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset));\r\n\r\n  // extensible data sector\r\n  // not implemented at this time\r\n\r\n  // end of central directory locator\r\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD_LOC));\r\n\r\n  // disk number holding the ZIP64 EOCD record\r\n  this.write(constants.LONG_ZERO);\r\n\r\n  // relative offset of the ZIP64 EOCD record\r\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset + this._archive.centralLength));\r\n\r\n  // total number of disks\r\n  this.write(zipUtil.getLongBytes(1));\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeCentralFileHeader = function(ae) {\r\n  var gpb = ae.getGeneralPurposeBit();\r\n  var method = ae.getMethod();\r\n  var offsets = ae._offsets;\r\n\r\n  var size = ae.getSize();\r\n  var compressedSize = ae.getCompressedSize();\r\n\r\n  if (ae.isZip64() || offsets.file > constants.ZIP64_MAGIC) {\r\n    size = constants.ZIP64_MAGIC;\r\n    compressedSize = constants.ZIP64_MAGIC;\r\n\r\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\r\n\r\n    var extraBuf = Buffer.concat([\r\n      zipUtil.getShortBytes(constants.ZIP64_EXTRA_ID),\r\n      zipUtil.getShortBytes(24),\r\n      zipUtil.getEightBytes(ae.getSize()),\r\n      zipUtil.getEightBytes(ae.getCompressedSize()),\r\n      zipUtil.getEightBytes(offsets.file)\r\n    ], 28);\r\n\r\n    ae.setExtra(extraBuf);\r\n  }\r\n\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_CFH));\r\n\r\n  // version made by\r\n  this.write(zipUtil.getShortBytes((ae.getPlatform() << 8) | constants.VERSION_MADEBY));\r\n\r\n  // version to extract and general bit flag\r\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\r\n  this.write(gpb.encode());\r\n\r\n  // compression method\r\n  this.write(zipUtil.getShortBytes(method));\r\n\r\n  // datetime\r\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\r\n\r\n  // crc32 checksum\r\n  this.write(zipUtil.getLongBytes(ae.getCrc()));\r\n\r\n  // sizes\r\n  this.write(zipUtil.getLongBytes(compressedSize));\r\n  this.write(zipUtil.getLongBytes(size));\r\n\r\n  var name = ae.getName();\r\n  var comment = ae.getComment();\r\n  var extra = ae.getCentralDirectoryExtra();\r\n\r\n  if (gpb.usesUTF8ForNames()) {\r\n    name = Buffer.from(name);\r\n    comment = Buffer.from(comment);\r\n  }\r\n\r\n  // name length\r\n  this.write(zipUtil.getShortBytes(name.length));\r\n\r\n  // extra length\r\n  this.write(zipUtil.getShortBytes(extra.length));\r\n\r\n  // comments length\r\n  this.write(zipUtil.getShortBytes(comment.length));\r\n\r\n  // disk number start\r\n  this.write(constants.SHORT_ZERO);\r\n\r\n  // internal attributes\r\n  this.write(zipUtil.getShortBytes(ae.getInternalAttributes()));\r\n\r\n  // external attributes\r\n  this.write(zipUtil.getLongBytes(ae.getExternalAttributes()));\r\n\r\n  // relative offset of LFH\r\n  if (offsets.file > constants.ZIP64_MAGIC) {\r\n    this.write(zipUtil.getLongBytes(constants.ZIP64_MAGIC));\r\n  } else {\r\n    this.write(zipUtil.getLongBytes(offsets.file));\r\n  }\r\n\r\n  // name\r\n  this.write(name);\r\n\r\n  // extra\r\n  this.write(extra);\r\n\r\n  // comment\r\n  this.write(comment);\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeDataDescriptor = function(ae) {\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_DD));\r\n\r\n  // crc32 checksum\r\n  this.write(zipUtil.getLongBytes(ae.getCrc()));\r\n\r\n  // sizes\r\n  if (ae.isZip64()) {\r\n    this.write(zipUtil.getEightBytes(ae.getCompressedSize()));\r\n    this.write(zipUtil.getEightBytes(ae.getSize()));\r\n  } else {\r\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\r\n    this.write(zipUtil.getLongBytes(ae.getSize()));\r\n  }\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeLocalFileHeader = function(ae) {\r\n  var gpb = ae.getGeneralPurposeBit();\r\n  var method = ae.getMethod();\r\n  var name = ae.getName();\r\n  var extra = ae.getLocalFileDataExtra();\r\n\r\n  if (ae.isZip64()) {\r\n    gpb.useDataDescriptor(true);\r\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\r\n  }\r\n\r\n  if (gpb.usesUTF8ForNames()) {\r\n    name = Buffer.from(name);\r\n  }\r\n\r\n  ae._offsets.file = this.offset;\r\n\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_LFH));\r\n\r\n  // version to extract and general bit flag\r\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\r\n  this.write(gpb.encode());\r\n\r\n  // compression method\r\n  this.write(zipUtil.getShortBytes(method));\r\n\r\n  // datetime\r\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\r\n\r\n  ae._offsets.data = this.offset;\r\n\r\n  // crc32 checksum and sizes\r\n  if (gpb.usesDataDescriptor()) {\r\n    this.write(constants.LONG_ZERO);\r\n    this.write(constants.LONG_ZERO);\r\n    this.write(constants.LONG_ZERO);\r\n  } else {\r\n    this.write(zipUtil.getLongBytes(ae.getCrc()));\r\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\r\n    this.write(zipUtil.getLongBytes(ae.getSize()));\r\n  }\r\n\r\n  // name length\r\n  this.write(zipUtil.getShortBytes(name.length));\r\n\r\n  // extra length\r\n  this.write(zipUtil.getShortBytes(extra.length));\r\n\r\n  // name\r\n  this.write(name);\r\n\r\n  // extra\r\n  this.write(extra);\r\n\r\n  ae._offsets.contents = this.offset;\r\n};\r\n\r\nZipArchiveOutputStream.prototype.getComment = function(comment) {\r\n  return this._archive.comment !== null ? this._archive.comment : '';\r\n};\r\n\r\nZipArchiveOutputStream.prototype.isZip64 = function() {\r\n  return this._archive.forceZip64 || this._entries.length > constants.ZIP64_MAGIC_SHORT || this._archive.centralLength > constants.ZIP64_MAGIC || this._archive.centralOffset > constants.ZIP64_MAGIC;\r\n};\r\n\r\nZipArchiveOutputStream.prototype.setComment = function(comment) {\r\n  this._archive.comment = comment;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}