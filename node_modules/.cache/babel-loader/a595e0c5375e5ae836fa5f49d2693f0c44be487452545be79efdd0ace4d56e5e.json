{"ast":null,"code":"/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\nvar inherits = require('util').inherits;\nvar normalizePath = require('normalize-path');\nvar ArchiveEntry = require('../archive-entry');\nvar GeneralPurposeBit = require('./general-purpose-bit');\nvar UnixStat = require('./unix-stat');\nvar constants = require('./constants');\nvar zipUtil = require('./util');\nvar ZipArchiveEntry = module.exports = function (name) {\n  if (!(this instanceof ZipArchiveEntry)) {\n    return new ZipArchiveEntry(name);\n  }\n  ArchiveEntry.call(this);\n  this.platform = constants.PLATFORM_FAT;\n  this.method = -1;\n  this.name = null;\n  this.size = 0;\n  this.csize = 0;\n  this.gpb = new GeneralPurposeBit();\n  this.crc = 0;\n  this.time = -1;\n  this.minver = constants.MIN_VERSION_INITIAL;\n  this.mode = -1;\n  this.extra = null;\n  this.exattr = 0;\n  this.inattr = 0;\n  this.comment = null;\n  if (name) {\n    this.setName(name);\n  }\n};\ninherits(ZipArchiveEntry, ArchiveEntry);\n\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function () {\n  return this.getExtra();\n};\n\n/**\r\n * Returns the comment set for the entry.\r\n *\r\n * @returns {string}\r\n */\nZipArchiveEntry.prototype.getComment = function () {\n  return this.comment !== null ? this.comment : '';\n};\n\n/**\r\n * Returns the compressed size of the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getCompressedSize = function () {\n  return this.csize;\n};\n\n/**\r\n * Returns the CRC32 digest for the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getCrc = function () {\n  return this.crc;\n};\n\n/**\r\n * Returns the external file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getExternalAttributes = function () {\n  return this.exattr;\n};\n\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\nZipArchiveEntry.prototype.getExtra = function () {\n  return this.extra !== null ? this.extra : constants.EMPTY;\n};\n\n/**\r\n * Returns the general purpose bits related to the entry.\r\n *\r\n * @returns {GeneralPurposeBit}\r\n */\nZipArchiveEntry.prototype.getGeneralPurposeBit = function () {\n  return this.gpb;\n};\n\n/**\r\n * Returns the internal file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getInternalAttributes = function () {\n  return this.inattr;\n};\n\n/**\r\n * Returns the last modified date of the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getLastModifiedDate = function () {\n  return this.getTime();\n};\n\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\nZipArchiveEntry.prototype.getLocalFileDataExtra = function () {\n  return this.getExtra();\n};\n\n/**\r\n * Returns the compression method used on the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getMethod = function () {\n  return this.method;\n};\n\n/**\r\n * Returns the filename of the entry.\r\n *\r\n * @returns {string}\r\n */\nZipArchiveEntry.prototype.getName = function () {\n  return this.name;\n};\n\n/**\r\n * Returns the platform on which the entry was made.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getPlatform = function () {\n  return this.platform;\n};\n\n/**\r\n * Returns the size of the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getSize = function () {\n  return this.size;\n};\n\n/**\r\n * Returns a date object representing the last modified date of the entry.\r\n *\r\n * @returns {number|Date}\r\n */\nZipArchiveEntry.prototype.getTime = function () {\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\n};\n\n/**\r\n * Returns the DOS timestamp for the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getTimeDos = function () {\n  return this.time !== -1 ? this.time : 0;\n};\n\n/**\r\n * Returns the UNIX file permissions for the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getUnixMode = function () {\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : this.getExternalAttributes() >> constants.SHORT_SHIFT & constants.SHORT_MASK;\n};\n\n/**\r\n * Returns the version of ZIP needed to extract the entry.\r\n *\r\n * @returns {number}\r\n */\nZipArchiveEntry.prototype.getVersionNeededToExtract = function () {\n  return this.minver;\n};\n\n/**\r\n * Sets the comment of the entry.\r\n *\r\n * @param comment\r\n */\nZipArchiveEntry.prototype.setComment = function (comment) {\n  if (Buffer.byteLength(comment) !== comment.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n  this.comment = comment;\n};\n\n/**\r\n * Sets the compressed size of the entry.\r\n *\r\n * @param size\r\n */\nZipArchiveEntry.prototype.setCompressedSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry compressed size');\n  }\n  this.csize = size;\n};\n\n/**\r\n * Sets the checksum of the entry.\r\n *\r\n * @param crc\r\n */\nZipArchiveEntry.prototype.setCrc = function (crc) {\n  if (crc < 0) {\n    throw new Error('invalid entry crc32');\n  }\n  this.crc = crc;\n};\n\n/**\r\n * Sets the external file attributes of the entry.\r\n *\r\n * @param attr\r\n */\nZipArchiveEntry.prototype.setExternalAttributes = function (attr) {\n  this.exattr = attr >>> 0;\n};\n\n/**\r\n * Sets the extra fields related to the entry.\r\n *\r\n * @param extra\r\n */\nZipArchiveEntry.prototype.setExtra = function (extra) {\n  this.extra = extra;\n};\n\n/**\r\n * Sets the general purpose bits related to the entry.\r\n *\r\n * @param gpb\r\n */\nZipArchiveEntry.prototype.setGeneralPurposeBit = function (gpb) {\n  if (!(gpb instanceof GeneralPurposeBit)) {\n    throw new Error('invalid entry GeneralPurposeBit');\n  }\n  this.gpb = gpb;\n};\n\n/**\r\n * Sets the internal file attributes of the entry.\r\n *\r\n * @param attr\r\n */\nZipArchiveEntry.prototype.setInternalAttributes = function (attr) {\n  this.inattr = attr;\n};\n\n/**\r\n * Sets the compression method of the entry.\r\n *\r\n * @param method\r\n */\nZipArchiveEntry.prototype.setMethod = function (method) {\n  if (method < 0) {\n    throw new Error('invalid entry compression method');\n  }\n  this.method = method;\n};\n\n/**\r\n * Sets the name of the entry.\r\n *\r\n * @param name\r\n */\nZipArchiveEntry.prototype.setName = function (name) {\n  name = normalizePath(name, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\n  if (Buffer.byteLength(name) !== name.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n  this.name = name;\n};\n\n/**\r\n * Sets the platform on which the entry was made.\r\n *\r\n * @param platform\r\n */\nZipArchiveEntry.prototype.setPlatform = function (platform) {\n  this.platform = platform;\n};\n\n/**\r\n * Sets the size of the entry.\r\n *\r\n * @param size\r\n */\nZipArchiveEntry.prototype.setSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry size');\n  }\n  this.size = size;\n};\n\n/**\r\n * Sets the time of the entry.\r\n *\r\n * @param time\r\n * @param forceLocalTime\r\n */\nZipArchiveEntry.prototype.setTime = function (time, forceLocalTime) {\n  if (!(time instanceof Date)) {\n    throw new Error('invalid entry time');\n  }\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\n};\n\n/**\r\n * Sets the UNIX file permissions for the entry.\r\n *\r\n * @param mode\r\n */\nZipArchiveEntry.prototype.setUnixMode = function (mode) {\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\n  var extattr = 0;\n  extattr |= mode << constants.SHORT_SHIFT | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\n  this.setExternalAttributes(extattr);\n  this.mode = mode & constants.MODE_MASK;\n  this.platform = constants.PLATFORM_UNIX;\n};\n\n/**\r\n * Sets the version of ZIP needed to extract this entry.\r\n *\r\n * @param minver\r\n */\nZipArchiveEntry.prototype.setVersionNeededToExtract = function (minver) {\n  this.minver = minver;\n};\n\n/**\r\n * Returns true if this entry represents a directory.\r\n *\r\n * @returns {boolean}\r\n */\nZipArchiveEntry.prototype.isDirectory = function () {\n  return this.getName().slice(-1) === '/';\n};\n\n/**\r\n * Returns true if this entry represents a unix symlink,\r\n * in which case the entry's content contains the target path\r\n * for the symlink.\r\n *\r\n * @returns {boolean}\r\n */\nZipArchiveEntry.prototype.isUnixSymlink = function () {\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\n};\n\n/**\r\n * Returns true if this entry is using the ZIP64 extension of ZIP.\r\n *\r\n * @returns {boolean}\r\n */\nZipArchiveEntry.prototype.isZip64 = function () {\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\n};","map":{"version":3,"names":["inherits","require","normalizePath","ArchiveEntry","GeneralPurposeBit","UnixStat","constants","zipUtil","ZipArchiveEntry","module","exports","name","call","platform","PLATFORM_FAT","method","size","csize","gpb","crc","time","minver","MIN_VERSION_INITIAL","mode","extra","exattr","inattr","comment","setName","prototype","getCentralDirectoryExtra","getExtra","getComment","getCompressedSize","getCrc","getExternalAttributes","EMPTY","getGeneralPurposeBit","getInternalAttributes","getLastModifiedDate","getTime","getLocalFileDataExtra","getMethod","getName","getPlatform","getSize","dosToDate","getTimeDos","getUnixMode","PLATFORM_UNIX","SHORT_SHIFT","SHORT_MASK","getVersionNeededToExtract","setComment","Buffer","byteLength","length","useUTF8ForNames","setCompressedSize","Error","setCrc","setExternalAttributes","attr","setExtra","setGeneralPurposeBit","setInternalAttributes","setMethod","replace","setPlatform","setSize","setTime","forceLocalTime","Date","dateToDos","setUnixMode","isDirectory","S_IFDIR","S_IFREG","extattr","S_DOS_D","S_DOS_A","MODE_MASK","setVersionNeededToExtract","slice","isUnixSymlink","FILE_TYPE_FLAG","LINK_FLAG","isZip64","ZIP64_MAGIC"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/compress-commons/lib/archivers/zip/zip-archive-entry.js"],"sourcesContent":["/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\r\nvar inherits = require('util').inherits;\r\nvar normalizePath = require('normalize-path');\r\n\r\nvar ArchiveEntry = require('../archive-entry');\r\nvar GeneralPurposeBit = require('./general-purpose-bit');\r\nvar UnixStat = require('./unix-stat');\r\n\r\nvar constants = require('./constants');\r\nvar zipUtil = require('./util');\r\n\r\nvar ZipArchiveEntry = module.exports = function(name) {\r\n  if (!(this instanceof ZipArchiveEntry)) {\r\n    return new ZipArchiveEntry(name);\r\n  }\r\n\r\n  ArchiveEntry.call(this);\r\n\r\n  this.platform = constants.PLATFORM_FAT;\r\n  this.method = -1;\r\n\r\n  this.name = null;\r\n  this.size = 0;\r\n  this.csize = 0;\r\n  this.gpb = new GeneralPurposeBit();\r\n  this.crc = 0;\r\n  this.time = -1;\r\n\r\n  this.minver = constants.MIN_VERSION_INITIAL;\r\n  this.mode = -1;\r\n  this.extra = null;\r\n  this.exattr = 0;\r\n  this.inattr = 0;\r\n  this.comment = null;\r\n\r\n  if (name) {\r\n    this.setName(name);\r\n  }\r\n};\r\n\r\ninherits(ZipArchiveEntry, ArchiveEntry);\r\n\r\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\r\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function() {\r\n  return this.getExtra();\r\n};\r\n\r\n/**\r\n * Returns the comment set for the entry.\r\n *\r\n * @returns {string}\r\n */\r\nZipArchiveEntry.prototype.getComment = function() {\r\n  return this.comment !== null ? this.comment : '';\r\n};\r\n\r\n/**\r\n * Returns the compressed size of the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getCompressedSize = function() {\r\n  return this.csize;\r\n};\r\n\r\n/**\r\n * Returns the CRC32 digest for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getCrc = function() {\r\n  return this.crc;\r\n};\r\n\r\n/**\r\n * Returns the external file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getExternalAttributes = function() {\r\n  return this.exattr;\r\n};\r\n\r\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\r\nZipArchiveEntry.prototype.getExtra = function() {\r\n  return this.extra !== null ? this.extra : constants.EMPTY;\r\n};\r\n\r\n/**\r\n * Returns the general purpose bits related to the entry.\r\n *\r\n * @returns {GeneralPurposeBit}\r\n */\r\nZipArchiveEntry.prototype.getGeneralPurposeBit = function() {\r\n  return this.gpb;\r\n};\r\n\r\n/**\r\n * Returns the internal file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getInternalAttributes = function() {\r\n  return this.inattr;\r\n};\r\n\r\n/**\r\n * Returns the last modified date of the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getLastModifiedDate = function() {\r\n  return this.getTime();\r\n};\r\n\r\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\r\nZipArchiveEntry.prototype.getLocalFileDataExtra = function() {\r\n  return this.getExtra();\r\n};\r\n\r\n/**\r\n * Returns the compression method used on the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getMethod = function() {\r\n  return this.method;\r\n};\r\n\r\n/**\r\n * Returns the filename of the entry.\r\n *\r\n * @returns {string}\r\n */\r\nZipArchiveEntry.prototype.getName = function() {\r\n  return this.name;\r\n};\r\n\r\n/**\r\n * Returns the platform on which the entry was made.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getPlatform = function() {\r\n  return this.platform;\r\n};\r\n\r\n/**\r\n * Returns the size of the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getSize = function() {\r\n  return this.size;\r\n};\r\n\r\n/**\r\n * Returns a date object representing the last modified date of the entry.\r\n *\r\n * @returns {number|Date}\r\n */\r\nZipArchiveEntry.prototype.getTime = function() {\r\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\r\n};\r\n\r\n/**\r\n * Returns the DOS timestamp for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getTimeDos = function() {\r\n  return this.time !== -1 ? this.time : 0;\r\n};\r\n\r\n/**\r\n * Returns the UNIX file permissions for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getUnixMode = function() {\r\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : ((this.getExternalAttributes() >> constants.SHORT_SHIFT) & constants.SHORT_MASK);\r\n};\r\n\r\n/**\r\n * Returns the version of ZIP needed to extract the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getVersionNeededToExtract = function() {\r\n  return this.minver;\r\n};\r\n\r\n/**\r\n * Sets the comment of the entry.\r\n *\r\n * @param comment\r\n */\r\nZipArchiveEntry.prototype.setComment = function(comment) {\r\n  if (Buffer.byteLength(comment) !== comment.length) {\r\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\r\n  }\r\n\r\n  this.comment = comment;\r\n};\r\n\r\n/**\r\n * Sets the compressed size of the entry.\r\n *\r\n * @param size\r\n */\r\nZipArchiveEntry.prototype.setCompressedSize = function(size) {\r\n  if (size < 0) {\r\n    throw new Error('invalid entry compressed size');\r\n  }\r\n\r\n  this.csize = size;\r\n};\r\n\r\n/**\r\n * Sets the checksum of the entry.\r\n *\r\n * @param crc\r\n */\r\nZipArchiveEntry.prototype.setCrc = function(crc) {\r\n  if (crc < 0) {\r\n    throw new Error('invalid entry crc32');\r\n  }\r\n\r\n  this.crc = crc;\r\n};\r\n\r\n/**\r\n * Sets the external file attributes of the entry.\r\n *\r\n * @param attr\r\n */\r\nZipArchiveEntry.prototype.setExternalAttributes = function(attr) {\r\n  this.exattr = attr >>> 0;\r\n};\r\n\r\n/**\r\n * Sets the extra fields related to the entry.\r\n *\r\n * @param extra\r\n */\r\nZipArchiveEntry.prototype.setExtra = function(extra) {\r\n  this.extra = extra;\r\n};\r\n\r\n/**\r\n * Sets the general purpose bits related to the entry.\r\n *\r\n * @param gpb\r\n */\r\nZipArchiveEntry.prototype.setGeneralPurposeBit = function(gpb) {\r\n  if (!(gpb instanceof GeneralPurposeBit)) {\r\n    throw new Error('invalid entry GeneralPurposeBit');\r\n  }\r\n\r\n  this.gpb = gpb;\r\n};\r\n\r\n/**\r\n * Sets the internal file attributes of the entry.\r\n *\r\n * @param attr\r\n */\r\nZipArchiveEntry.prototype.setInternalAttributes = function(attr) {\r\n  this.inattr = attr;\r\n};\r\n\r\n/**\r\n * Sets the compression method of the entry.\r\n *\r\n * @param method\r\n */\r\nZipArchiveEntry.prototype.setMethod = function(method) {\r\n  if (method < 0) {\r\n    throw new Error('invalid entry compression method');\r\n  }\r\n\r\n  this.method = method;\r\n};\r\n\r\n/**\r\n * Sets the name of the entry.\r\n *\r\n * @param name\r\n */\r\nZipArchiveEntry.prototype.setName = function(name) {\r\n  name = normalizePath(name, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\r\n\r\n  if (Buffer.byteLength(name) !== name.length) {\r\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\r\n  }\r\n\r\n  this.name = name;\r\n};\r\n\r\n/**\r\n * Sets the platform on which the entry was made.\r\n *\r\n * @param platform\r\n */\r\nZipArchiveEntry.prototype.setPlatform = function(platform) {\r\n  this.platform = platform;\r\n};\r\n\r\n/**\r\n * Sets the size of the entry.\r\n *\r\n * @param size\r\n */\r\nZipArchiveEntry.prototype.setSize = function(size) {\r\n  if (size < 0) {\r\n    throw new Error('invalid entry size');\r\n  }\r\n\r\n  this.size = size;\r\n};\r\n\r\n/**\r\n * Sets the time of the entry.\r\n *\r\n * @param time\r\n * @param forceLocalTime\r\n */\r\nZipArchiveEntry.prototype.setTime = function(time, forceLocalTime) {\r\n  if (!(time instanceof Date)) {\r\n    throw new Error('invalid entry time');\r\n  }\r\n\r\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\r\n};\r\n\r\n/**\r\n * Sets the UNIX file permissions for the entry.\r\n *\r\n * @param mode\r\n */\r\nZipArchiveEntry.prototype.setUnixMode = function(mode) {\r\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\r\n\r\n  var extattr = 0;\r\n  extattr |= (mode << constants.SHORT_SHIFT) | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\r\n\r\n  this.setExternalAttributes(extattr);\r\n  this.mode = mode & constants.MODE_MASK;\r\n  this.platform = constants.PLATFORM_UNIX;\r\n};\r\n\r\n/**\r\n * Sets the version of ZIP needed to extract this entry.\r\n *\r\n * @param minver\r\n */\r\nZipArchiveEntry.prototype.setVersionNeededToExtract = function(minver) {\r\n  this.minver = minver;\r\n};\r\n\r\n/**\r\n * Returns true if this entry represents a directory.\r\n *\r\n * @returns {boolean}\r\n */\r\nZipArchiveEntry.prototype.isDirectory = function() {\r\n  return this.getName().slice(-1) === '/';\r\n};\r\n\r\n/**\r\n * Returns true if this entry represents a unix symlink,\r\n * in which case the entry's content contains the target path\r\n * for the symlink.\r\n *\r\n * @returns {boolean}\r\n */\r\nZipArchiveEntry.prototype.isUnixSymlink = function() {\r\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\r\n};\r\n\r\n/**\r\n * Returns true if this entry is using the ZIP64 extension of ZIP.\r\n *\r\n * @returns {boolean}\r\n */\r\nZipArchiveEntry.prototype.isZip64 = function() {\r\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}