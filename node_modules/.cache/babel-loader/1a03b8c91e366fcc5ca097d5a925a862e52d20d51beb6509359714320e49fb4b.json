{"ast":null,"code":"/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\n\n'use strict';\n\nconst {\n  Transform\n} = require('readable-stream');\nconst {\n  crc32\n} = require('crc');\nclass CRC32Stream extends Transform {\n  constructor(options) {\n    super(options);\n    this.checksum = Buffer.allocUnsafe(4);\n    this.checksum.writeInt32BE(0, 0);\n    this.rawSize = 0;\n  }\n  _transform(chunk, encoding, callback) {\n    if (chunk) {\n      this.checksum = crc32(chunk, this.checksum);\n      this.rawSize += chunk.length;\n    }\n    callback(null, chunk);\n  }\n  digest(encoding) {\n    const checksum = Buffer.allocUnsafe(4);\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\n    return encoding ? checksum.toString(encoding) : checksum;\n  }\n  hex() {\n    return this.digest('hex').toUpperCase();\n  }\n  size() {\n    return this.rawSize;\n  }\n}\nmodule.exports = CRC32Stream;","map":{"version":3,"names":["Transform","require","crc32","CRC32Stream","constructor","options","checksum","Buffer","allocUnsafe","writeInt32BE","rawSize","_transform","chunk","encoding","callback","length","digest","writeUInt32BE","toString","hex","toUpperCase","size","module","exports"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/crc32-stream/lib/crc32-stream.js"],"sourcesContent":["/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\r\n\r\n 'use strict';\r\n\r\nconst {Transform} = require('readable-stream');\r\n\r\nconst {crc32} = require('crc');\r\n\r\nclass CRC32Stream extends Transform {\r\n  constructor(options) {\r\n    super(options);\r\n    this.checksum = Buffer.allocUnsafe(4);\r\n    this.checksum.writeInt32BE(0, 0);\r\n\r\n    this.rawSize = 0;\r\n  }\r\n\r\n  _transform(chunk, encoding, callback) {\r\n    if (chunk) {\r\n      this.checksum = crc32(chunk, this.checksum);\r\n      this.rawSize += chunk.length;\r\n    }\r\n\r\n    callback(null, chunk);\r\n  }\r\n\r\n  digest(encoding) {\r\n    const checksum = Buffer.allocUnsafe(4);\r\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\r\n    return encoding ? checksum.toString(encoding) : checksum;\r\n  }\r\n\r\n  hex() {\r\n    return this.digest('hex').toUpperCase();\r\n  }\r\n\r\n  size() {\r\n    return this.rawSize;\r\n  }\r\n}\r\n\r\nmodule.exports = CRC32Stream;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,YAAY;;AAEb,MAAM;EAACA;AAAS,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE9C,MAAM;EAACC;AAAK,CAAC,GAAGD,OAAO,CAAC,KAAK,CAAC;AAE9B,MAAME,WAAW,SAASH,SAAS,CAAC;EAClCI,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,QAAQ,GAAGC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;IACrC,IAAI,CAACF,QAAQ,CAACG,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;IAEhC,IAAI,CAACC,OAAO,GAAG,CAAC;EAClB;EAEAC,UAAU,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACpC,IAAIF,KAAK,EAAE;MACT,IAAI,CAACN,QAAQ,GAAGJ,KAAK,CAACU,KAAK,EAAE,IAAI,CAACN,QAAQ,CAAC;MAC3C,IAAI,CAACI,OAAO,IAAIE,KAAK,CAACG,MAAM;IAC9B;IAEAD,QAAQ,CAAC,IAAI,EAAEF,KAAK,CAAC;EACvB;EAEAI,MAAM,CAACH,QAAQ,EAAE;IACf,MAAMP,QAAQ,GAAGC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;IACtCF,QAAQ,CAACW,aAAa,CAAC,IAAI,CAACX,QAAQ,KAAK,CAAC,EAAE,CAAC,CAAC;IAC9C,OAAOO,QAAQ,GAAGP,QAAQ,CAACY,QAAQ,CAACL,QAAQ,CAAC,GAAGP,QAAQ;EAC1D;EAEAa,GAAG,GAAG;IACJ,OAAO,IAAI,CAACH,MAAM,CAAC,KAAK,CAAC,CAACI,WAAW,EAAE;EACzC;EAEAC,IAAI,GAAG;IACL,OAAO,IAAI,CAACX,OAAO;EACrB;AACF;AAEAY,MAAM,CAACC,OAAO,GAAGpB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}