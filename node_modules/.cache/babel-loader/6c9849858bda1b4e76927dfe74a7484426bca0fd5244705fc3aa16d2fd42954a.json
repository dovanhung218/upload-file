{"ast":null,"code":"//\n// officegen: All the code to generate XLSX files.\n//\n// Please refer to README.md for this module's documentations.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n\n/**\n * Basicgen plugin to create xlsx files (Microsoft Excel).\n */\n\nvar baseobj = require('./basicgen.js');\nvar msdoc = require('./msofficegen.js');\nvar docplugman = require('./docplug');\n\n// Officegen xlsx plugins:\n// BMK_XLSX_PLUG:\n\nfunction encodeHTML(inStr) {\n  return inStr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\n/**\n * Extend officegen object with XLSX support.\n *\n * This method extending the given officegen object to create XLSX document.\n *\n * @param {object} genobj The object to extend.\n * @param {string} new_type The type of object to create.\n * @param {object} options The object's options.\n * @param {object} gen_private Access to the internals of this object.\n * @param {object} type_info Additional information about this type.\n * @constructor\n * @name makeXlsx\n */\nfunction makeXlsx(genobj, new_type, options, gen_private, type_info) {\n  /**\n   * Prepare the default data.\n   * @param {object} docpluginman Access to the document plugins manager.\n   */\n  function setDefaultDocValues(docpluginman) {\n    // var pptxData = docpluginman.getDataStorage()\n    // Please put any setting that API can override here:\n  }\n\n  /**\n   * Create the shared string resource.\n   *\n   * This resource holding all the text strings of any Excel document.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsSharedStrings(data) {\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + genobj.generate_data.total_strings + '\" uniqueCount=\"' + genobj.generate_data.shared_strings.length + '\">';\n    for (var i = 0, total_size = genobj.generate_data.shared_strings.length; i < total_size; i++) {\n      outString += '<si><t>' + encodeHTML(genobj.generate_data.shared_strings[i]) + '</t></si>';\n    } // Endif.\n\n    return outString + '</sst>';\n  }\n\n  /**\n   * Prepare everything to generate XLSX files.\n   *\n   * This method working on all the Excel cells to find out information needed by the generator engine.\n   */\n  function cbPrepareXlsxToGenerate() {\n    genobj.generate_data = {};\n    genobj.generate_data.shared_strings = [];\n    genobj.lookup_strings = {};\n    genobj.generate_data.total_strings = 0;\n    genobj.generate_data.cell_strings = [];\n\n    // Tell all the features (plugins) that we are about to generate a new document zip:\n    gen_private.features.type.xlsx.emitEvent('beforeGen', genobj);\n\n    // Allow some plugins to do more stuff after all the plugins added their data:\n    gen_private.features.type.xlsx.emitEvent('beforeGenFinal', genobj);\n\n    // Create the share strings data:\n    for (var i = 0, total_size = gen_private.pages.length; i < total_size; i++) {\n      if (gen_private.pages[i]) {\n        for (var rowId = 0, total_size_y = gen_private.pages[i].sheet.data.length; rowId < total_size_y; rowId++) {\n          if (gen_private.pages[i].sheet.data[rowId]) {\n            for (var columnId = 0, total_size_x = gen_private.pages[i].sheet.data[rowId].length; columnId < total_size_x; columnId++) {\n              if (typeof gen_private.pages[i].sheet.data[rowId][columnId] !== 'undefined') {\n                switch (typeof gen_private.pages[i].sheet.data[rowId][columnId]) {\n                  case 'string':\n                    genobj.generate_data.total_strings++;\n                    if (!genobj.generate_data.cell_strings[i]) {\n                      genobj.generate_data.cell_strings[i] = [];\n                    } // Endif.\n\n                    if (!genobj.generate_data.cell_strings[i][rowId]) {\n                      genobj.generate_data.cell_strings[i][rowId] = [];\n                    } // Endif.\n\n                    var shared_str = gen_private.pages[i].sheet.data[rowId][columnId];\n                    if (shared_str in genobj.lookup_strings) {\n                      genobj.generate_data.cell_strings[i][rowId][columnId] = genobj.lookup_strings[shared_str];\n                    } else {\n                      var shared_str_position = genobj.generate_data.shared_strings.length;\n                      genobj.generate_data.cell_strings[i][rowId][columnId] = shared_str_position;\n                      genobj.lookup_strings[shared_str] = shared_str_position;\n                      genobj.generate_data.shared_strings[shared_str_position] = shared_str;\n                    } // Endif.\n                    break;\n                } // End of switch.\n              } // Endif.\n            } // End of for loop.\n          } // Endif.\n        } // End of for loop.\n      } // Endif.\n    } // End of for loop.\n\n    if (genobj.generate_data.total_strings) {\n      gen_private.plugs.intAddAnyResourceToParse('xl\\\\sharedStrings.xml', 'buffer', null, cbMakeXlsSharedStrings, false);\n      gen_private.type.msoffice.files_list.push({\n        name: '/xl/sharedStrings.xml',\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n        clear: 'generate'\n      });\n      gen_private.type.msoffice.rels_app.push({\n        type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n        target: 'sharedStrings.xml',\n        clear: 'generate'\n      });\n    } // Endif.\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsStyles(data) {\n    return gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><fonts count=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"2\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/><xf applyAlignment=\"1\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\" xfId=\"0\"><alignment wrapText=\"1\"/></xf></cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleLight16\"/></styleSheet>';\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsApp(data) {\n    var pagesCount = gen_private.pages.length;\n    var userName = genobj.options.author || genobj.options.creator || 'officegen';\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>' + pagesCount + '</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"' + pagesCount + '\" baseType=\"lpstr\">';\n    for (var i = 0, total_size = gen_private.pages.length; i < total_size; i++) {\n      outString += '<vt:lpstr>Sheet' + (i + 1) + '</vt:lpstr>';\n    } // End of for loop.\n\n    outString += '</vt:vector></TitlesOfParts><Company>' + userName + '</Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>12.0000</AppVersion></Properties>';\n    return outString;\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsWorkbook(data) {\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"><fileVersion appName=\"xl\" lastEdited=\"4\" lowestEdited=\"4\" rupBuild=\"4507\"/><workbookPr defaultThemeVersion=\"124226\"/><bookViews><workbookView xWindow=\"120\" yWindow=\"75\" windowWidth=\"19095\" windowHeight=\"7485\"/></bookViews><sheets>';\n    for (var i = 0, total_size = gen_private.pages.length; i < total_size; i++) {\n      var sheetName = gen_private.pages[i].sheet.name || 'Sheet' + (i + 1);\n      var rId = gen_private.pages[i].relId;\n      outString += '<sheet name=\"' + sheetName + '\" sheetId=\"' + (i + 1) + '\" r:id=\"rId' + rId + '\"/>';\n    } // End of for loop.\n\n    outString += '</sheets><calcPr calcId=\"125725\"/></workbook>';\n    return outString;\n  }\n\n  /**\n   * Translate from the Excel displayed row name into index number.\n   *\n   * @param {string} cell_string Either the cell displayed position or the row displayed position.\n   * @param {boolean} ret_also_column ???.\n   * @return The cell's row Id.\n   */\n  function cbCellToNumber(cell_string, ret_also_column) {\n    var cellNumber = 0;\n    var cellIndex = 0;\n    var cellMax = cell_string.length;\n    var rowId = 0;\n\n    // Converted from C++ (from DuckWriteC++):\n    while (cellIndex < cellMax) {\n      var curChar = cell_string.charCodeAt(cellIndex);\n      if (curChar >= 0x30 && curChar <= 0x39) {\n        rowId = parseInt(cell_string.slice(cellIndex), 10);\n        rowId = rowId > 0 ? rowId - 1 : 0;\n        break;\n      } else if (curChar >= 0x41 && curChar <= 0x5a) {\n        if (cellIndex > 0) {\n          cellNumber++;\n          cellNumber *= 0x5b - 0x41;\n        } // Endif.\n\n        cellNumber += curChar - 0x41;\n      } else if (curChar >= 0x61 && curChar <= 0x7a) {\n        if (cellIndex > 0) {\n          cellNumber++;\n          cellNumber *= 0x5b - 0x41;\n        } // Endif.\n\n        cellNumber += curChar - 0x61;\n      } // Endif.\n\n      cellIndex++;\n    } // End of while loop.\n\n    if (ret_also_column) {\n      return {\n        row: rowId,\n        column: cellNumber\n      };\n    } // Endif.\n\n    return cellNumber;\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} cell_number ???.\n   * @return ???.\n   */\n  function cbNumberToCell(cell_number) {\n    var outCell = '';\n    var curCell = cell_number;\n    while (curCell >= 0) {\n      outCell = String.fromCharCode(curCell % (0x5b - 0x41) + 0x41) + outCell;\n      if (curCell >= 0x5b - 0x41) {\n        curCell = Math.floor(curCell / (0x5b - 0x41)) - 1;\n      } else {\n        break;\n      }\n    } // End of while loop.\n\n    return outCell;\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data The main sheet object.\n   * @return Text string.\n   */\n  function cbMakeXlsSheet(data) {\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">';\n    var maxX = 0;\n    var maxY = 0;\n    var curColMax;\n    var rowId;\n    var columnId;\n    var colsFound = 0;\n    var total_size_y;\n    var total_size_x;\n\n    // Find the maximum cells area:\n    maxY = data.sheet.data.length ? data.sheet.data.length - 1 : 0;\n    for (rowId = 0, total_size_y = data.sheet.data.length; rowId < total_size_y; rowId++) {\n      if (data.sheet.data[rowId]) {\n        curColMax = data.sheet.data[rowId].length ? data.sheet.data[rowId].length - 1 : 0;\n        maxX = maxX < curColMax ? curColMax : maxX;\n      } // Endif.\n    } // End of for loop.\n\n    outString += '<dimension ref=\"A1:' + cbNumberToCell(maxX) + '' + (maxY + 1) + '\"/><sheetViews>';\n    outString += '<sheetView tabSelected=\"1\" workbookViewId=\"0\"/>';\n    // outString += '<selection activeCell=\"A1\" sqref=\"A1\"/>'\n    outString += '</sheetViews><sheetFormatPr defaultRowHeight=\"15\"/>';\n    if (data.sheet.width) {\n      data.sheet.width.forEach(function (value, indexId) {\n        if (typeof value === 'object') {\n          var outAttr = '';\n\n          /* eslint-disable no-self-compare */\n          if (typeof value.width === 'number' && value.width === value.width) {\n            outAttr = ' width=\"' + value.width + '\" customWidth=\"1\"';\n          } // Endif.\n\n          /* eslint-disable no-self-compare */\n          if (typeof value.styleCode === 'number' && value.styleCode === value.styleCode) {\n            outAttr = ' style=\"' + value.styleCode + '\"';\n          } // Endif.\n\n          if (!colsFound) {\n            outString += '<cols>';\n          } // Endif.\n\n          outString += '<col min=\"' + (value.colId + 1) + '\" max=\"' + (value.colId + 1) + '\"' + outAttr + '/>';\n          colsFound++;\n\n          // Support for old code, not recommended:\n        } else if (typeof value === 'number') {\n          if (!colsFound) {\n            outString += '<cols>';\n          } // Endif.\n\n          outString += '<col min=\"' + (indexId + 1) + '\" max=\"' + (indexId + 1) + '\" width=\"' + value + '\" customWidth=\"1\"/>';\n          colsFound++;\n        } // Endif.\n      });\n\n      if (colsFound) {\n        outString += '</cols>';\n      } // Endif.\n    } // Endif.\n\n    outString += '<sheetData>';\n    for (rowId = 0, total_size_y = data.sheet.data.length; rowId < total_size_y; rowId++) {\n      if (data.sheet.data[rowId]) {\n        // Patch by arnesten <notifications@github.com>: Automatically support line breaks if used in cell + calculates row height:\n        var rowLines = 1;\n        data.sheet.data[rowId].forEach(function (cellData) {\n          if (typeof cellData === 'string') {\n            var candidate = cellData.split('\\n').length;\n            rowLines = Math.max(rowLines, candidate);\n          }\n        });\n        outString += '<row r=\"' + (rowId + 1) + '\" spans=\"1:' + data.sheet.data[rowId].length + '\" ht=\"' + rowLines * 15 + '\">';\n        // End of patch.\n\n        for (columnId = 0, total_size_x = data.sheet.data[rowId].length; columnId < total_size_x; columnId++) {\n          var cellData = data.sheet.data[rowId][columnId];\n          if (typeof cellData !== 'undefined') {\n            var isString = '';\n            var cellOutData = '0';\n            switch (typeof cellData) {\n              case 'number':\n                cellOutData = cellData;\n                break;\n              case 'string':\n                cellOutData = genobj.generate_data.cell_strings[data.id][rowId][columnId];\n                if (cellData.indexOf('\\n') >= 0) {\n                  isString = ' s=\"1\" t=\"s\"';\n                } else {\n                  isString = ' t=\"s\"';\n                }\n                break;\n            } // End of switch.\n\n            outString += '<c r=\"' + cbNumberToCell(columnId) + '' + (rowId + 1) + '\"' + isString + '><v>' + cellOutData + '</v></c>';\n          } // Endif.\n        } // End of for loop.\n\n        outString += '</row>';\n      } // Endif.\n    } // End of for loop.\n\n    outString += '</sheetData><pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/></worksheet>';\n    return outString;\n  }\n\n  // Prepare genobj for MS-Office:\n  msdoc.makemsdoc(genobj, new_type, options, gen_private, type_info);\n  gen_private.plugs.type.msoffice.makeOfficeGenerator('xl', 'workbook', {});\n  gen_private.features.page_name = 'sheets'; // This document type must have pages.\n\n  // On each generate we'll prepare the shared strings list:\n  genobj.on('beforeGen', cbPrepareXlsxToGenerate);\n\n  // Create the plugins manager:\n  var plugsmanObj = new docplugman(genobj, gen_private, 'xlsx', setDefaultDocValues);\n\n  // We'll register now any officegen internal plugin that we want to always use for Excel based documents:\n  // BMK_XLSX_PLUG:\n\n  // Dynamic loading of additional plugins requested by the user:\n  if (options.extraPlugs && typeof options.extraPlugs === 'object' && options.extraPlugs.forEach) {\n    options.extraPlugs.forEach(function (value) {\n      var newPlug;\n      if (value) {\n        if (typeof value === 'function') {\n          // You already loaded the plugin:\n          newPlug = value;\n        } else if (typeof value === 'string') {\n          // We need to load the plugin:\n          newPlug = require('./' + value);\n        } // Endif.\n      } // Endif.\n\n      plugsmanObj.plugsList.push(new newPlug(plugsmanObj));\n    });\n  } // Endif.\n\n  gen_private.type.msoffice.files_list.push({\n    name: '/xl/styles.xml',\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n    clear: 'type'\n  }, {\n    name: '/xl/workbook.xml',\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n    clear: 'type'\n  });\n  gen_private.type.msoffice.rels_app.push({\n    type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n    target: 'styles.xml',\n    clear: 'type'\n  }, {\n    type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n    target: 'theme/theme1.xml',\n    clear: 'type'\n  });\n  gen_private.plugs.intAddAnyResourceToParse('docProps\\\\app.xml', 'buffer', null, cbMakeXlsApp, true);\n  gen_private.plugs.intAddAnyResourceToParse('xl\\\\styles.xml', 'buffer', null, cbMakeXlsStyles, true);\n  gen_private.plugs.intAddAnyResourceToParse('xl\\\\workbook.xml', 'buffer', null, cbMakeXlsWorkbook, true);\n  gen_private.plugs.intAddAnyResourceToParse('xl\\\\_rels\\\\workbook.xml.rels', 'buffer', gen_private.type.msoffice.rels_app, gen_private.plugs.type.msoffice.cbMakeRels, true);\n\n  // ----- API for Excel documents: -----\n\n  /**\n   * Create a new sheet.\n   *\n   * This method creating a new Excel sheet.\n   */\n  genobj.makeNewSheet = function () {\n    var pageNumber = gen_private.pages.length;\n\n    // The sheet object that the user will use:\n    var sheetObj = {\n      data: [],\n      // Place here all the data.\n      width: []\n    };\n    gen_private.pages[pageNumber] = {};\n    gen_private.pages[pageNumber].id = pageNumber;\n    gen_private.pages[pageNumber].relId = gen_private.type.msoffice.rels_app.length + 1;\n    gen_private.pages[pageNumber].sheet = sheetObj;\n    gen_private.type.msoffice.rels_app.push({\n      type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n      target: 'worksheets/sheet' + (pageNumber + 1) + '.xml',\n      clear: 'data'\n    });\n    gen_private.type.msoffice.files_list.push({\n      name: '/xl/worksheets/sheet' + (pageNumber + 1) + '.xml',\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n      clear: 'data'\n    });\n    sheetObj.setColumnWidth = function (colId, width) {\n      var colRec = null;\n      colId = cbCellToNumber(colId + '1', false);\n      sheetObj.width.every(function (value) {\n        if (value.colId === colId) {\n          colRec = value;\n          return false;\n        } // Endif.\n\n        return true;\n      });\n      if (!colRec) {\n        sheetObj.width.push({\n          colId: colId,\n          width: width\n        });\n        return;\n      } // Endif.\n\n      colRec.width = width;\n    };\n    sheetObj.setColumnCenter = function (colId) {\n      var colRec = null;\n      colId = cbCellToNumber(colId + '1', false);\n      sheetObj.width.every(function (value) {\n        if (value.colId === colId) {\n          colRec = value;\n          return false;\n        } // Endif.\n\n        return true;\n      });\n      if (!colRec) {\n        sheetObj.width.push({\n          colId: colId,\n          width: 9.140625,\n          styleCode: 1\n        });\n        return;\n      } // Endif.\n\n      colRec.styleCode = 1;\n    };\n    sheetObj.setCell = function (position, data_val) {\n      var rel_pos = cbCellToNumber(position, true);\n      if (!sheetObj.data[rel_pos.row]) {\n        sheetObj.data[rel_pos.row] = [];\n      } // Endif.\n\n      sheetObj.data[rel_pos.row][rel_pos.column] = data_val;\n    };\n    gen_private.plugs.intAddAnyResourceToParse('xl\\\\worksheets\\\\sheet' + (pageNumber + 1) + '.xml', 'buffer', gen_private.pages[pageNumber], cbMakeXlsSheet, false);\n\n    // Signal to the plugins about a new sheet:\n    gen_private.features.type.xlsx.emitEvent('newPage', {\n      genobj: genobj,\n      page: sheetObj,\n      pageData: gen_private.pages[pageNumber],\n      pageNumber: pageNumber\n    });\n    return sheetObj;\n  };\n\n  // Tell all the features (plugins) to add extra API:\n  gen_private.features.type.xlsx.emitEvent('makeDocApi', genobj);\n  return this;\n}\nbaseobj.plugins.registerDocType('xlsx', makeXlsx, {}, baseobj.docType.SPREADSHEET, 'Microsoft Excel Document');","map":{"version":3,"names":["baseobj","require","msdoc","docplugman","encodeHTML","inStr","replace","makeXlsx","genobj","new_type","options","gen_private","type_info","setDefaultDocValues","docpluginman","cbMakeXlsSharedStrings","data","outString","plugs","type","msoffice","cbMakeMsOfficeBasicXml","generate_data","total_strings","shared_strings","length","i","total_size","cbPrepareXlsxToGenerate","lookup_strings","cell_strings","features","xlsx","emitEvent","pages","rowId","total_size_y","sheet","columnId","total_size_x","shared_str","shared_str_position","intAddAnyResourceToParse","files_list","push","name","clear","rels_app","target","cbMakeXlsStyles","cbMakeXlsApp","pagesCount","userName","author","creator","cbMakeXlsWorkbook","sheetName","rId","relId","cbCellToNumber","cell_string","ret_also_column","cellNumber","cellIndex","cellMax","curChar","charCodeAt","parseInt","slice","row","column","cbNumberToCell","cell_number","outCell","curCell","String","fromCharCode","Math","floor","cbMakeXlsSheet","maxX","maxY","curColMax","colsFound","width","forEach","value","indexId","outAttr","styleCode","colId","rowLines","cellData","candidate","split","max","isString","cellOutData","id","indexOf","makemsdoc","makeOfficeGenerator","page_name","on","plugsmanObj","extraPlugs","newPlug","plugsList","cbMakeRels","makeNewSheet","pageNumber","sheetObj","setColumnWidth","colRec","every","setColumnCenter","setCell","position","data_val","rel_pos","page","pageData","plugins","registerDocType","docType","SPREADSHEET"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/officegen/lib/genxlsx.js"],"sourcesContent":["//\n// officegen: All the code to generate XLSX files.\n//\n// Please refer to README.md for this module's documentations.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n\n/**\n * Basicgen plugin to create xlsx files (Microsoft Excel).\n */\n\nvar baseobj = require('./basicgen.js')\nvar msdoc = require('./msofficegen.js')\n\nvar docplugman = require('./docplug')\n\n// Officegen xlsx plugins:\n// BMK_XLSX_PLUG:\n\nfunction encodeHTML(inStr) {\n  return inStr\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n}\n\n/**\n * Extend officegen object with XLSX support.\n *\n * This method extending the given officegen object to create XLSX document.\n *\n * @param {object} genobj The object to extend.\n * @param {string} new_type The type of object to create.\n * @param {object} options The object's options.\n * @param {object} gen_private Access to the internals of this object.\n * @param {object} type_info Additional information about this type.\n * @constructor\n * @name makeXlsx\n */\nfunction makeXlsx(genobj, new_type, options, gen_private, type_info) {\n  /**\n   * Prepare the default data.\n   * @param {object} docpluginman Access to the document plugins manager.\n   */\n  function setDefaultDocValues(docpluginman) {\n    // var pptxData = docpluginman.getDataStorage()\n    // Please put any setting that API can override here:\n  }\n\n  /**\n   * Create the shared string resource.\n   *\n   * This resource holding all the text strings of any Excel document.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsSharedStrings(data) {\n    var outString =\n      gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) +\n      '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' +\n      genobj.generate_data.total_strings +\n      '\" uniqueCount=\"' +\n      genobj.generate_data.shared_strings.length +\n      '\">'\n\n    for (\n      var i = 0, total_size = genobj.generate_data.shared_strings.length;\n      i < total_size;\n      i++\n    ) {\n      outString +=\n        '<si><t>' +\n        encodeHTML(genobj.generate_data.shared_strings[i]) +\n        '</t></si>'\n    } // Endif.\n\n    return outString + '</sst>'\n  }\n\n  /**\n   * Prepare everything to generate XLSX files.\n   *\n   * This method working on all the Excel cells to find out information needed by the generator engine.\n   */\n  function cbPrepareXlsxToGenerate() {\n    genobj.generate_data = {}\n    genobj.generate_data.shared_strings = []\n    genobj.lookup_strings = {}\n    genobj.generate_data.total_strings = 0\n    genobj.generate_data.cell_strings = []\n\n    // Tell all the features (plugins) that we are about to generate a new document zip:\n    gen_private.features.type.xlsx.emitEvent('beforeGen', genobj)\n\n    // Allow some plugins to do more stuff after all the plugins added their data:\n    gen_private.features.type.xlsx.emitEvent('beforeGenFinal', genobj)\n\n    // Create the share strings data:\n    for (\n      var i = 0, total_size = gen_private.pages.length;\n      i < total_size;\n      i++\n    ) {\n      if (gen_private.pages[i]) {\n        for (\n          var rowId = 0, total_size_y = gen_private.pages[i].sheet.data.length;\n          rowId < total_size_y;\n          rowId++\n        ) {\n          if (gen_private.pages[i].sheet.data[rowId]) {\n            for (\n              var columnId = 0,\n                total_size_x = gen_private.pages[i].sheet.data[rowId].length;\n              columnId < total_size_x;\n              columnId++\n            ) {\n              if (\n                typeof gen_private.pages[i].sheet.data[rowId][columnId] !==\n                'undefined'\n              ) {\n                switch (\n                  typeof gen_private.pages[i].sheet.data[rowId][columnId]\n                ) {\n                  case 'string':\n                    genobj.generate_data.total_strings++\n\n                    if (!genobj.generate_data.cell_strings[i]) {\n                      genobj.generate_data.cell_strings[i] = []\n                    } // Endif.\n\n                    if (!genobj.generate_data.cell_strings[i][rowId]) {\n                      genobj.generate_data.cell_strings[i][rowId] = []\n                    } // Endif.\n\n                    var shared_str =\n                      gen_private.pages[i].sheet.data[rowId][columnId]\n\n                    if (shared_str in genobj.lookup_strings) {\n                      genobj.generate_data.cell_strings[i][rowId][columnId] =\n                        genobj.lookup_strings[shared_str]\n                    } else {\n                      var shared_str_position =\n                        genobj.generate_data.shared_strings.length\n                      genobj.generate_data.cell_strings[i][rowId][\n                        columnId\n                      ] = shared_str_position\n                      genobj.lookup_strings[shared_str] = shared_str_position\n                      genobj.generate_data.shared_strings[\n                        shared_str_position\n                      ] = shared_str\n                    } // Endif.\n                    break\n                } // End of switch.\n              } // Endif.\n            } // End of for loop.\n          } // Endif.\n        } // End of for loop.\n      } // Endif.\n    } // End of for loop.\n\n    if (genobj.generate_data.total_strings) {\n      gen_private.plugs.intAddAnyResourceToParse(\n        'xl\\\\sharedStrings.xml',\n        'buffer',\n        null,\n        cbMakeXlsSharedStrings,\n        false\n      )\n      gen_private.type.msoffice.files_list.push({\n        name: '/xl/sharedStrings.xml',\n        type:\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n        clear: 'generate'\n      })\n\n      gen_private.type.msoffice.rels_app.push({\n        type:\n          'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n        target: 'sharedStrings.xml',\n        clear: 'generate'\n      })\n    } // Endif.\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsStyles(data) {\n    return (\n      gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) +\n      '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><fonts count=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"2\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/><xf applyAlignment=\"1\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\" xfId=\"0\"><alignment wrapText=\"1\"/></xf></cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleLight16\"/></styleSheet>'\n    )\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsApp(data) {\n    var pagesCount = gen_private.pages.length\n    var userName =\n      genobj.options.author || genobj.options.creator || 'officegen'\n    var outString =\n      gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) +\n      '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>' +\n      pagesCount +\n      '</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"' +\n      pagesCount +\n      '\" baseType=\"lpstr\">'\n\n    for (\n      var i = 0, total_size = gen_private.pages.length;\n      i < total_size;\n      i++\n    ) {\n      outString += '<vt:lpstr>Sheet' + (i + 1) + '</vt:lpstr>'\n    } // End of for loop.\n\n    outString +=\n      '</vt:vector></TitlesOfParts><Company>' +\n      userName +\n      '</Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>12.0000</AppVersion></Properties>'\n    return outString\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  function cbMakeXlsWorkbook(data) {\n    var outString =\n      gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) +\n      '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"><fileVersion appName=\"xl\" lastEdited=\"4\" lowestEdited=\"4\" rupBuild=\"4507\"/><workbookPr defaultThemeVersion=\"124226\"/><bookViews><workbookView xWindow=\"120\" yWindow=\"75\" windowWidth=\"19095\" windowHeight=\"7485\"/></bookViews><sheets>'\n\n    for (\n      var i = 0, total_size = gen_private.pages.length;\n      i < total_size;\n      i++\n    ) {\n      var sheetName = gen_private.pages[i].sheet.name || 'Sheet' + (i + 1)\n      var rId = gen_private.pages[i].relId\n      outString +=\n        '<sheet name=\"' +\n        sheetName +\n        '\" sheetId=\"' +\n        (i + 1) +\n        '\" r:id=\"rId' +\n        rId +\n        '\"/>'\n    } // End of for loop.\n\n    outString += '</sheets><calcPr calcId=\"125725\"/></workbook>'\n    return outString\n  }\n\n  /**\n   * Translate from the Excel displayed row name into index number.\n   *\n   * @param {string} cell_string Either the cell displayed position or the row displayed position.\n   * @param {boolean} ret_also_column ???.\n   * @return The cell's row Id.\n   */\n  function cbCellToNumber(cell_string, ret_also_column) {\n    var cellNumber = 0\n    var cellIndex = 0\n    var cellMax = cell_string.length\n    var rowId = 0\n\n    // Converted from C++ (from DuckWriteC++):\n    while (cellIndex < cellMax) {\n      var curChar = cell_string.charCodeAt(cellIndex)\n      if (curChar >= 0x30 && curChar <= 0x39) {\n        rowId = parseInt(cell_string.slice(cellIndex), 10)\n        rowId = rowId > 0 ? rowId - 1 : 0\n        break\n      } else if (curChar >= 0x41 && curChar <= 0x5a) {\n        if (cellIndex > 0) {\n          cellNumber++\n          cellNumber *= 0x5b - 0x41\n        } // Endif.\n\n        cellNumber += curChar - 0x41\n      } else if (curChar >= 0x61 && curChar <= 0x7a) {\n        if (cellIndex > 0) {\n          cellNumber++\n          cellNumber *= 0x5b - 0x41\n        } // Endif.\n\n        cellNumber += curChar - 0x61\n      } // Endif.\n\n      cellIndex++\n    } // End of while loop.\n\n    if (ret_also_column) {\n      return { row: rowId, column: cellNumber }\n    } // Endif.\n\n    return cellNumber\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} cell_number ???.\n   * @return ???.\n   */\n  function cbNumberToCell(cell_number) {\n    var outCell = ''\n    var curCell = cell_number\n\n    while (curCell >= 0) {\n      outCell = String.fromCharCode((curCell % (0x5b - 0x41)) + 0x41) + outCell\n      if (curCell >= 0x5b - 0x41) {\n        curCell = Math.floor(curCell / (0x5b - 0x41)) - 1\n      } else {\n        break\n      }\n    } // End of while loop.\n\n    return outCell\n  }\n\n  /**\n   * ???.\n   *\n   * @param {object} data The main sheet object.\n   * @return Text string.\n   */\n  function cbMakeXlsSheet(data) {\n    var outString =\n      gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) +\n      '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">'\n    var maxX = 0\n    var maxY = 0\n    var curColMax\n    var rowId\n    var columnId\n    var colsFound = 0\n    var total_size_y\n    var total_size_x\n\n    // Find the maximum cells area:\n    maxY = data.sheet.data.length ? data.sheet.data.length - 1 : 0\n    for (\n      rowId = 0, total_size_y = data.sheet.data.length;\n      rowId < total_size_y;\n      rowId++\n    ) {\n      if (data.sheet.data[rowId]) {\n        curColMax = data.sheet.data[rowId].length\n          ? data.sheet.data[rowId].length - 1\n          : 0\n        maxX = maxX < curColMax ? curColMax : maxX\n      } // Endif.\n    } // End of for loop.\n\n    outString +=\n      '<dimension ref=\"A1:' +\n      cbNumberToCell(maxX) +\n      '' +\n      (maxY + 1) +\n      '\"/><sheetViews>'\n    outString += '<sheetView tabSelected=\"1\" workbookViewId=\"0\"/>'\n    // outString += '<selection activeCell=\"A1\" sqref=\"A1\"/>'\n    outString += '</sheetViews><sheetFormatPr defaultRowHeight=\"15\"/>'\n\n    if (data.sheet.width) {\n      data.sheet.width.forEach(function(value, indexId) {\n        if (typeof value === 'object') {\n          var outAttr = ''\n\n          /* eslint-disable no-self-compare */\n          if (typeof value.width === 'number' && value.width === value.width) {\n            outAttr = ' width=\"' + value.width + '\" customWidth=\"1\"'\n          } // Endif.\n\n          /* eslint-disable no-self-compare */\n          if (\n            typeof value.styleCode === 'number' &&\n            value.styleCode === value.styleCode\n          ) {\n            outAttr = ' style=\"' + value.styleCode + '\"'\n          } // Endif.\n\n          if (!colsFound) {\n            outString += '<cols>'\n          } // Endif.\n\n          outString +=\n            '<col min=\"' +\n            (value.colId + 1) +\n            '\" max=\"' +\n            (value.colId + 1) +\n            '\"' +\n            outAttr +\n            '/>'\n          colsFound++\n\n          // Support for old code, not recommended:\n        } else if (typeof value === 'number') {\n          if (!colsFound) {\n            outString += '<cols>'\n          } // Endif.\n\n          outString +=\n            '<col min=\"' +\n            (indexId + 1) +\n            '\" max=\"' +\n            (indexId + 1) +\n            '\" width=\"' +\n            value +\n            '\" customWidth=\"1\"/>'\n          colsFound++\n        } // Endif.\n      })\n\n      if (colsFound) {\n        outString += '</cols>'\n      } // Endif.\n    } // Endif.\n\n    outString += '<sheetData>'\n\n    for (\n      rowId = 0, total_size_y = data.sheet.data.length;\n      rowId < total_size_y;\n      rowId++\n    ) {\n      if (data.sheet.data[rowId]) {\n        // Patch by arnesten <notifications@github.com>: Automatically support line breaks if used in cell + calculates row height:\n        var rowLines = 1\n        data.sheet.data[rowId].forEach(function(cellData) {\n          if (typeof cellData === 'string') {\n            var candidate = cellData.split('\\n').length\n            rowLines = Math.max(rowLines, candidate)\n          }\n        })\n        outString +=\n          '<row r=\"' +\n          (rowId + 1) +\n          '\" spans=\"1:' +\n          data.sheet.data[rowId].length +\n          '\" ht=\"' +\n          rowLines * 15 +\n          '\">'\n        // End of patch.\n\n        for (\n          columnId = 0, total_size_x = data.sheet.data[rowId].length;\n          columnId < total_size_x;\n          columnId++\n        ) {\n          var cellData = data.sheet.data[rowId][columnId]\n          if (typeof cellData !== 'undefined') {\n            var isString = ''\n            var cellOutData = '0'\n\n            switch (typeof cellData) {\n              case 'number':\n                cellOutData = cellData\n                break\n\n              case 'string':\n                cellOutData =\n                  genobj.generate_data.cell_strings[data.id][rowId][columnId]\n                if (cellData.indexOf('\\n') >= 0) {\n                  isString = ' s=\"1\" t=\"s\"'\n                } else {\n                  isString = ' t=\"s\"'\n                }\n                break\n            } // End of switch.\n\n            outString +=\n              '<c r=\"' +\n              cbNumberToCell(columnId) +\n              '' +\n              (rowId + 1) +\n              '\"' +\n              isString +\n              '><v>' +\n              cellOutData +\n              '</v></c>'\n          } // Endif.\n        } // End of for loop.\n\n        outString += '</row>'\n      } // Endif.\n    } // End of for loop.\n\n    outString +=\n      '</sheetData><pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/></worksheet>'\n    return outString\n  }\n\n  // Prepare genobj for MS-Office:\n  msdoc.makemsdoc(genobj, new_type, options, gen_private, type_info)\n  gen_private.plugs.type.msoffice.makeOfficeGenerator('xl', 'workbook', {})\n\n  gen_private.features.page_name = 'sheets' // This document type must have pages.\n\n  // On each generate we'll prepare the shared strings list:\n  genobj.on('beforeGen', cbPrepareXlsxToGenerate)\n\n  // Create the plugins manager:\n  var plugsmanObj = new docplugman(\n    genobj,\n    gen_private,\n    'xlsx',\n    setDefaultDocValues\n  )\n\n  // We'll register now any officegen internal plugin that we want to always use for Excel based documents:\n  // BMK_XLSX_PLUG:\n\n  // Dynamic loading of additional plugins requested by the user:\n  if (\n    options.extraPlugs &&\n    typeof options.extraPlugs === 'object' &&\n    options.extraPlugs.forEach\n  ) {\n    options.extraPlugs.forEach(function(value) {\n      var newPlug\n\n      if (value) {\n        if (typeof value === 'function') {\n          // You already loaded the plugin:\n          newPlug = value\n        } else if (typeof value === 'string') {\n          // We need to load the plugin:\n          newPlug = require('./' + value)\n        } // Endif.\n      } // Endif.\n\n      plugsmanObj.plugsList.push(new newPlug(plugsmanObj))\n    })\n  } // Endif.\n\n  gen_private.type.msoffice.files_list.push(\n    {\n      name: '/xl/styles.xml',\n      type:\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n      clear: 'type'\n    },\n    {\n      name: '/xl/workbook.xml',\n      type:\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n      clear: 'type'\n    }\n  )\n\n  gen_private.type.msoffice.rels_app.push(\n    {\n      type:\n        'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n      target: 'styles.xml',\n      clear: 'type'\n    },\n    {\n      type:\n        'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n      target: 'theme/theme1.xml',\n      clear: 'type'\n    }\n  )\n\n  gen_private.plugs.intAddAnyResourceToParse(\n    'docProps\\\\app.xml',\n    'buffer',\n    null,\n    cbMakeXlsApp,\n    true\n  )\n  gen_private.plugs.intAddAnyResourceToParse(\n    'xl\\\\styles.xml',\n    'buffer',\n    null,\n    cbMakeXlsStyles,\n    true\n  )\n  gen_private.plugs.intAddAnyResourceToParse(\n    'xl\\\\workbook.xml',\n    'buffer',\n    null,\n    cbMakeXlsWorkbook,\n    true\n  )\n\n  gen_private.plugs.intAddAnyResourceToParse(\n    'xl\\\\_rels\\\\workbook.xml.rels',\n    'buffer',\n    gen_private.type.msoffice.rels_app,\n    gen_private.plugs.type.msoffice.cbMakeRels,\n    true\n  )\n\n  // ----- API for Excel documents: -----\n\n  /**\n   * Create a new sheet.\n   *\n   * This method creating a new Excel sheet.\n   */\n  genobj.makeNewSheet = function() {\n    var pageNumber = gen_private.pages.length\n\n    // The sheet object that the user will use:\n    var sheetObj = {\n      data: [], // Place here all the data.\n      width: []\n    }\n\n    gen_private.pages[pageNumber] = {}\n    gen_private.pages[pageNumber].id = pageNumber\n    gen_private.pages[pageNumber].relId =\n      gen_private.type.msoffice.rels_app.length + 1\n    gen_private.pages[pageNumber].sheet = sheetObj\n\n    gen_private.type.msoffice.rels_app.push({\n      type:\n        'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n      target: 'worksheets/sheet' + (pageNumber + 1) + '.xml',\n      clear: 'data'\n    })\n\n    gen_private.type.msoffice.files_list.push({\n      name: '/xl/worksheets/sheet' + (pageNumber + 1) + '.xml',\n      type:\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n      clear: 'data'\n    })\n\n    sheetObj.setColumnWidth = function(colId, width) {\n      var colRec = null\n\n      colId = cbCellToNumber(colId + '1', false)\n\n      sheetObj.width.every(function(value) {\n        if (value.colId === colId) {\n          colRec = value\n          return false\n        } // Endif.\n\n        return true\n      })\n\n      if (!colRec) {\n        sheetObj.width.push({\n          colId: colId,\n          width: width\n        })\n        return\n      } // Endif.\n\n      colRec.width = width\n    }\n\n    sheetObj.setColumnCenter = function(colId) {\n      var colRec = null\n\n      colId = cbCellToNumber(colId + '1', false)\n\n      sheetObj.width.every(function(value) {\n        if (value.colId === colId) {\n          colRec = value\n          return false\n        } // Endif.\n\n        return true\n      })\n\n      if (!colRec) {\n        sheetObj.width.push({\n          colId: colId,\n          width: 9.140625,\n          styleCode: 1\n        })\n        return\n      } // Endif.\n\n      colRec.styleCode = 1\n    }\n\n    sheetObj.setCell = function(position, data_val) {\n      var rel_pos = cbCellToNumber(position, true)\n\n      if (!sheetObj.data[rel_pos.row]) {\n        sheetObj.data[rel_pos.row] = []\n      } // Endif.\n\n      sheetObj.data[rel_pos.row][rel_pos.column] = data_val\n    }\n\n    gen_private.plugs.intAddAnyResourceToParse(\n      'xl\\\\worksheets\\\\sheet' + (pageNumber + 1) + '.xml',\n      'buffer',\n      gen_private.pages[pageNumber],\n      cbMakeXlsSheet,\n      false\n    )\n\n    // Signal to the plugins about a new sheet:\n    gen_private.features.type.xlsx.emitEvent('newPage', {\n      genobj: genobj,\n      page: sheetObj,\n      pageData: gen_private.pages[pageNumber],\n      pageNumber: pageNumber\n    })\n\n    return sheetObj\n  }\n\n  // Tell all the features (plugins) to add extra API:\n  gen_private.features.type.xlsx.emitEvent('makeDocApi', genobj)\n\n  return this\n}\n\nbaseobj.plugins.registerDocType(\n  'xlsx',\n  makeXlsx,\n  {},\n  baseobj.docType.SPREADSHEET,\n  'Microsoft Excel Document'\n)\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AACtC,IAAIC,KAAK,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAEvC,IAAIE,UAAU,GAAGF,OAAO,CAAC,WAAW,CAAC;;AAErC;AACA;;AAEA,SAASG,UAAU,CAACC,KAAK,EAAE;EACzB,OAAOA,KAAK,CACTC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAACC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,EAAE;EACnE;AACF;AACA;AACA;EACE,SAASC,mBAAmB,CAACC,YAAY,EAAE;IACzC;IACA;EAAA;;EAGF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,sBAAsB,CAACC,IAAI,EAAE;IACpC,IAAIC,SAAS,GACXN,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,sBAAsB,CAACL,IAAI,CAAC,GAC5D,gFAAgF,GAChFR,MAAM,CAACc,aAAa,CAACC,aAAa,GAClC,iBAAiB,GACjBf,MAAM,CAACc,aAAa,CAACE,cAAc,CAACC,MAAM,GAC1C,IAAI;IAEN,KACE,IAAIC,CAAC,GAAG,CAAC,EAAEC,UAAU,GAAGnB,MAAM,CAACc,aAAa,CAACE,cAAc,CAACC,MAAM,EAClEC,CAAC,GAAGC,UAAU,EACdD,CAAC,EAAE,EACH;MACAT,SAAS,IACP,SAAS,GACTb,UAAU,CAACI,MAAM,CAACc,aAAa,CAACE,cAAc,CAACE,CAAC,CAAC,CAAC,GAClD,WAAW;IACf,CAAC,CAAC;;IAEF,OAAOT,SAAS,GAAG,QAAQ;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASW,uBAAuB,GAAG;IACjCpB,MAAM,CAACc,aAAa,GAAG,CAAC,CAAC;IACzBd,MAAM,CAACc,aAAa,CAACE,cAAc,GAAG,EAAE;IACxChB,MAAM,CAACqB,cAAc,GAAG,CAAC,CAAC;IAC1BrB,MAAM,CAACc,aAAa,CAACC,aAAa,GAAG,CAAC;IACtCf,MAAM,CAACc,aAAa,CAACQ,YAAY,GAAG,EAAE;;IAEtC;IACAnB,WAAW,CAACoB,QAAQ,CAACZ,IAAI,CAACa,IAAI,CAACC,SAAS,CAAC,WAAW,EAAEzB,MAAM,CAAC;;IAE7D;IACAG,WAAW,CAACoB,QAAQ,CAACZ,IAAI,CAACa,IAAI,CAACC,SAAS,CAAC,gBAAgB,EAAEzB,MAAM,CAAC;;IAElE;IACA,KACE,IAAIkB,CAAC,GAAG,CAAC,EAAEC,UAAU,GAAGhB,WAAW,CAACuB,KAAK,CAACT,MAAM,EAChDC,CAAC,GAAGC,UAAU,EACdD,CAAC,EAAE,EACH;MACA,IAAIf,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,EAAE;QACxB,KACE,IAAIS,KAAK,GAAG,CAAC,EAAEC,YAAY,GAAGzB,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACrB,IAAI,CAACS,MAAM,EACpEU,KAAK,GAAGC,YAAY,EACpBD,KAAK,EAAE,EACP;UACA,IAAIxB,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,EAAE;YAC1C,KACE,IAAIG,QAAQ,GAAG,CAAC,EACdC,YAAY,GAAG5B,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACV,MAAM,EAC9Da,QAAQ,GAAGC,YAAY,EACvBD,QAAQ,EAAE,EACV;cACA,IACE,OAAO3B,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACG,QAAQ,CAAC,KACvD,WAAW,EACX;gBACA,QACE,OAAO3B,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACG,QAAQ,CAAC;kBAEvD,KAAK,QAAQ;oBACX9B,MAAM,CAACc,aAAa,CAACC,aAAa,EAAE;oBAEpC,IAAI,CAACf,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACJ,CAAC,CAAC,EAAE;sBACzClB,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACJ,CAAC,CAAC,GAAG,EAAE;oBAC3C,CAAC,CAAC;;oBAEF,IAAI,CAAClB,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACJ,CAAC,CAAC,CAACS,KAAK,CAAC,EAAE;sBAChD3B,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACJ,CAAC,CAAC,CAACS,KAAK,CAAC,GAAG,EAAE;oBAClD,CAAC,CAAC;;oBAEF,IAAIK,UAAU,GACZ7B,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACG,QAAQ,CAAC;oBAElD,IAAIE,UAAU,IAAIhC,MAAM,CAACqB,cAAc,EAAE;sBACvCrB,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACJ,CAAC,CAAC,CAACS,KAAK,CAAC,CAACG,QAAQ,CAAC,GACnD9B,MAAM,CAACqB,cAAc,CAACW,UAAU,CAAC;oBACrC,CAAC,MAAM;sBACL,IAAIC,mBAAmB,GACrBjC,MAAM,CAACc,aAAa,CAACE,cAAc,CAACC,MAAM;sBAC5CjB,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACJ,CAAC,CAAC,CAACS,KAAK,CAAC,CACzCG,QAAQ,CACT,GAAGG,mBAAmB;sBACvBjC,MAAM,CAACqB,cAAc,CAACW,UAAU,CAAC,GAAGC,mBAAmB;sBACvDjC,MAAM,CAACc,aAAa,CAACE,cAAc,CACjCiB,mBAAmB,CACpB,GAAGD,UAAU;oBAChB,CAAC,CAAC;oBACF;gBAAK,CACR,CAAC;cACJ,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF,IAAIhC,MAAM,CAACc,aAAa,CAACC,aAAa,EAAE;MACtCZ,WAAW,CAACO,KAAK,CAACwB,wBAAwB,CACxC,uBAAuB,EACvB,QAAQ,EACR,IAAI,EACJ3B,sBAAsB,EACtB,KAAK,CACN;MACDJ,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAACuB,UAAU,CAACC,IAAI,CAAC;QACxCC,IAAI,EAAE,uBAAuB;QAC7B1B,IAAI,EACF,+EAA+E;QACjF2B,KAAK,EAAE;MACT,CAAC,CAAC;MAEFnC,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAAC2B,QAAQ,CAACH,IAAI,CAAC;QACtCzB,IAAI,EACF,mFAAmF;QACrF6B,MAAM,EAAE,mBAAmB;QAC3BF,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASG,eAAe,CAACjC,IAAI,EAAE;IAC7B,OACEL,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,sBAAsB,CAACL,IAAI,CAAC,GAC5D,25BAA25B;EAE/5B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASkC,YAAY,CAAClC,IAAI,EAAE;IAC1B,IAAImC,UAAU,GAAGxC,WAAW,CAACuB,KAAK,CAACT,MAAM;IACzC,IAAI2B,QAAQ,GACV5C,MAAM,CAACE,OAAO,CAAC2C,MAAM,IAAI7C,MAAM,CAACE,OAAO,CAAC4C,OAAO,IAAI,WAAW;IAChE,IAAIrC,SAAS,GACXN,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,sBAAsB,CAACL,IAAI,CAAC,GAC5D,kZAAkZ,GAClZmC,UAAU,GACV,kFAAkF,GAClFA,UAAU,GACV,qBAAqB;IAEvB,KACE,IAAIzB,CAAC,GAAG,CAAC,EAAEC,UAAU,GAAGhB,WAAW,CAACuB,KAAK,CAACT,MAAM,EAChDC,CAAC,GAAGC,UAAU,EACdD,CAAC,EAAE,EACH;MACAT,SAAS,IAAI,iBAAiB,IAAIS,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa;IAC1D,CAAC,CAAC;;IAEFT,SAAS,IACP,uCAAuC,GACvCmC,QAAQ,GACR,qKAAqK;IACvK,OAAOnC,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASsC,iBAAiB,CAACvC,IAAI,EAAE;IAC/B,IAAIC,SAAS,GACXN,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,sBAAsB,CAACL,IAAI,CAAC,GAC5D,kYAAkY;IAEpY,KACE,IAAIU,CAAC,GAAG,CAAC,EAAEC,UAAU,GAAGhB,WAAW,CAACuB,KAAK,CAACT,MAAM,EAChDC,CAAC,GAAGC,UAAU,EACdD,CAAC,EAAE,EACH;MACA,IAAI8B,SAAS,GAAG7C,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACW,KAAK,CAACQ,IAAI,IAAI,OAAO,IAAInB,CAAC,GAAG,CAAC,CAAC;MACpE,IAAI+B,GAAG,GAAG9C,WAAW,CAACuB,KAAK,CAACR,CAAC,CAAC,CAACgC,KAAK;MACpCzC,SAAS,IACP,eAAe,GACfuC,SAAS,GACT,aAAa,IACZ9B,CAAC,GAAG,CAAC,CAAC,GACP,aAAa,GACb+B,GAAG,GACH,KAAK;IACT,CAAC,CAAC;;IAEFxC,SAAS,IAAI,+CAA+C;IAC5D,OAAOA,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAAS0C,cAAc,CAACC,WAAW,EAAEC,eAAe,EAAE;IACpD,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,OAAO,GAAGJ,WAAW,CAACnC,MAAM;IAChC,IAAIU,KAAK,GAAG,CAAC;;IAEb;IACA,OAAO4B,SAAS,GAAGC,OAAO,EAAE;MAC1B,IAAIC,OAAO,GAAGL,WAAW,CAACM,UAAU,CAACH,SAAS,CAAC;MAC/C,IAAIE,OAAO,IAAI,IAAI,IAAIA,OAAO,IAAI,IAAI,EAAE;QACtC9B,KAAK,GAAGgC,QAAQ,CAACP,WAAW,CAACQ,KAAK,CAACL,SAAS,CAAC,EAAE,EAAE,CAAC;QAClD5B,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC,GAAG,CAAC;QACjC;MACF,CAAC,MAAM,IAAI8B,OAAO,IAAI,IAAI,IAAIA,OAAO,IAAI,IAAI,EAAE;QAC7C,IAAIF,SAAS,GAAG,CAAC,EAAE;UACjBD,UAAU,EAAE;UACZA,UAAU,IAAI,IAAI,GAAG,IAAI;QAC3B,CAAC,CAAC;;QAEFA,UAAU,IAAIG,OAAO,GAAG,IAAI;MAC9B,CAAC,MAAM,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,IAAI,IAAI,EAAE;QAC7C,IAAIF,SAAS,GAAG,CAAC,EAAE;UACjBD,UAAU,EAAE;UACZA,UAAU,IAAI,IAAI,GAAG,IAAI;QAC3B,CAAC,CAAC;;QAEFA,UAAU,IAAIG,OAAO,GAAG,IAAI;MAC9B,CAAC,CAAC;;MAEFF,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF,IAAIF,eAAe,EAAE;MACnB,OAAO;QAAEQ,GAAG,EAAElC,KAAK;QAAEmC,MAAM,EAAER;MAAW,CAAC;IAC3C,CAAC,CAAC;;IAEF,OAAOA,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASS,cAAc,CAACC,WAAW,EAAE;IACnC,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,GAAGF,WAAW;IAEzB,OAAOE,OAAO,IAAI,CAAC,EAAE;MACnBD,OAAO,GAAGE,MAAM,CAACC,YAAY,CAAEF,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,GAAI,IAAI,CAAC,GAAGD,OAAO;MACzE,IAAIC,OAAO,IAAI,IAAI,GAAG,IAAI,EAAE;QAC1BA,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACJ,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC;MACnD,CAAC,MAAM;QACL;MACF;IACF,CAAC,CAAC;;IAEF,OAAOD,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASM,cAAc,CAAC/D,IAAI,EAAE;IAC5B,IAAIC,SAAS,GACXN,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,sBAAsB,CAACL,IAAI,CAAC,GAC5D,6JAA6J;IAC/J,IAAIgE,IAAI,GAAG,CAAC;IACZ,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS;IACb,IAAI/C,KAAK;IACT,IAAIG,QAAQ;IACZ,IAAI6C,SAAS,GAAG,CAAC;IACjB,IAAI/C,YAAY;IAChB,IAAIG,YAAY;;IAEhB;IACA0C,IAAI,GAAGjE,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACS,MAAM,GAAGT,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACS,MAAM,GAAG,CAAC,GAAG,CAAC;IAC9D,KACEU,KAAK,GAAG,CAAC,EAAEC,YAAY,GAAGpB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACS,MAAM,EAChDU,KAAK,GAAGC,YAAY,EACpBD,KAAK,EAAE,EACP;MACA,IAAInB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,EAAE;QAC1B+C,SAAS,GAAGlE,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACV,MAAM,GACrCT,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACV,MAAM,GAAG,CAAC,GACjC,CAAC;QACLuD,IAAI,GAAGA,IAAI,GAAGE,SAAS,GAAGA,SAAS,GAAGF,IAAI;MAC5C,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF/D,SAAS,IACP,qBAAqB,GACrBsD,cAAc,CAACS,IAAI,CAAC,GACpB,EAAE,IACDC,IAAI,GAAG,CAAC,CAAC,GACV,iBAAiB;IACnBhE,SAAS,IAAI,iDAAiD;IAC9D;IACAA,SAAS,IAAI,qDAAqD;IAElE,IAAID,IAAI,CAACqB,KAAK,CAAC+C,KAAK,EAAE;MACpBpE,IAAI,CAACqB,KAAK,CAAC+C,KAAK,CAACC,OAAO,CAAC,UAASC,KAAK,EAAEC,OAAO,EAAE;QAChD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;UAC7B,IAAIE,OAAO,GAAG,EAAE;;UAEhB;UACA,IAAI,OAAOF,KAAK,CAACF,KAAK,KAAK,QAAQ,IAAIE,KAAK,CAACF,KAAK,KAAKE,KAAK,CAACF,KAAK,EAAE;YAClEI,OAAO,GAAG,UAAU,GAAGF,KAAK,CAACF,KAAK,GAAG,mBAAmB;UAC1D,CAAC,CAAC;;UAEF;UACA,IACE,OAAOE,KAAK,CAACG,SAAS,KAAK,QAAQ,IACnCH,KAAK,CAACG,SAAS,KAAKH,KAAK,CAACG,SAAS,EACnC;YACAD,OAAO,GAAG,UAAU,GAAGF,KAAK,CAACG,SAAS,GAAG,GAAG;UAC9C,CAAC,CAAC;;UAEF,IAAI,CAACN,SAAS,EAAE;YACdlE,SAAS,IAAI,QAAQ;UACvB,CAAC,CAAC;;UAEFA,SAAS,IACP,YAAY,IACXqE,KAAK,CAACI,KAAK,GAAG,CAAC,CAAC,GACjB,SAAS,IACRJ,KAAK,CAACI,KAAK,GAAG,CAAC,CAAC,GACjB,GAAG,GACHF,OAAO,GACP,IAAI;UACNL,SAAS,EAAE;;UAEX;QACF,CAAC,MAAM,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;UACpC,IAAI,CAACH,SAAS,EAAE;YACdlE,SAAS,IAAI,QAAQ;UACvB,CAAC,CAAC;;UAEFA,SAAS,IACP,YAAY,IACXsE,OAAO,GAAG,CAAC,CAAC,GACb,SAAS,IACRA,OAAO,GAAG,CAAC,CAAC,GACb,WAAW,GACXD,KAAK,GACL,qBAAqB;UACvBH,SAAS,EAAE;QACb,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF,IAAIA,SAAS,EAAE;QACblE,SAAS,IAAI,SAAS;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEFA,SAAS,IAAI,aAAa;IAE1B,KACEkB,KAAK,GAAG,CAAC,EAAEC,YAAY,GAAGpB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACS,MAAM,EAChDU,KAAK,GAAGC,YAAY,EACpBD,KAAK,EAAE,EACP;MACA,IAAInB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,EAAE;QAC1B;QACA,IAAIwD,QAAQ,GAAG,CAAC;QAChB3E,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACkD,OAAO,CAAC,UAASO,QAAQ,EAAE;UAChD,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;YAChC,IAAIC,SAAS,GAAGD,QAAQ,CAACE,KAAK,CAAC,IAAI,CAAC,CAACrE,MAAM;YAC3CkE,QAAQ,GAAGd,IAAI,CAACkB,GAAG,CAACJ,QAAQ,EAAEE,SAAS,CAAC;UAC1C;QACF,CAAC,CAAC;QACF5E,SAAS,IACP,UAAU,IACTkB,KAAK,GAAG,CAAC,CAAC,GACX,aAAa,GACbnB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACV,MAAM,GAC7B,QAAQ,GACRkE,QAAQ,GAAG,EAAE,GACb,IAAI;QACN;;QAEA,KACErD,QAAQ,GAAG,CAAC,EAAEC,YAAY,GAAGvB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACV,MAAM,EAC1Da,QAAQ,GAAGC,YAAY,EACvBD,QAAQ,EAAE,EACV;UACA,IAAIsD,QAAQ,GAAG5E,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACmB,KAAK,CAAC,CAACG,QAAQ,CAAC;UAC/C,IAAI,OAAOsD,QAAQ,KAAK,WAAW,EAAE;YACnC,IAAII,QAAQ,GAAG,EAAE;YACjB,IAAIC,WAAW,GAAG,GAAG;YAErB,QAAQ,OAAOL,QAAQ;cACrB,KAAK,QAAQ;gBACXK,WAAW,GAAGL,QAAQ;gBACtB;cAEF,KAAK,QAAQ;gBACXK,WAAW,GACTzF,MAAM,CAACc,aAAa,CAACQ,YAAY,CAACd,IAAI,CAACkF,EAAE,CAAC,CAAC/D,KAAK,CAAC,CAACG,QAAQ,CAAC;gBAC7D,IAAIsD,QAAQ,CAACO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;kBAC/BH,QAAQ,GAAG,cAAc;gBAC3B,CAAC,MAAM;kBACLA,QAAQ,GAAG,QAAQ;gBACrB;gBACA;YAAK,CACR,CAAC;;YAEF/E,SAAS,IACP,QAAQ,GACRsD,cAAc,CAACjC,QAAQ,CAAC,GACxB,EAAE,IACDH,KAAK,GAAG,CAAC,CAAC,GACX,GAAG,GACH6D,QAAQ,GACR,MAAM,GACNC,WAAW,GACX,UAAU;UACd,CAAC,CAAC;QACJ,CAAC,CAAC;;QAEFhF,SAAS,IAAI,QAAQ;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEFA,SAAS,IACP,kHAAkH;IACpH,OAAOA,SAAS;EAClB;;EAEA;EACAf,KAAK,CAACkG,SAAS,CAAC5F,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,CAAC;EAClED,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACiF,mBAAmB,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;EAEzE1F,WAAW,CAACoB,QAAQ,CAACuE,SAAS,GAAG,QAAQ,EAAC;;EAE1C;EACA9F,MAAM,CAAC+F,EAAE,CAAC,WAAW,EAAE3E,uBAAuB,CAAC;;EAE/C;EACA,IAAI4E,WAAW,GAAG,IAAIrG,UAAU,CAC9BK,MAAM,EACNG,WAAW,EACX,MAAM,EACNE,mBAAmB,CACpB;;EAED;EACA;;EAEA;EACA,IACEH,OAAO,CAAC+F,UAAU,IAClB,OAAO/F,OAAO,CAAC+F,UAAU,KAAK,QAAQ,IACtC/F,OAAO,CAAC+F,UAAU,CAACpB,OAAO,EAC1B;IACA3E,OAAO,CAAC+F,UAAU,CAACpB,OAAO,CAAC,UAASC,KAAK,EAAE;MACzC,IAAIoB,OAAO;MAEX,IAAIpB,KAAK,EAAE;QACT,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;UAC/B;UACAoB,OAAO,GAAGpB,KAAK;QACjB,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UACpC;UACAoB,OAAO,GAAGzG,OAAO,CAAC,IAAI,GAAGqF,KAAK,CAAC;QACjC,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEFkB,WAAW,CAACG,SAAS,CAAC/D,IAAI,CAAC,IAAI8D,OAAO,CAACF,WAAW,CAAC,CAAC;IACtD,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF7F,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAACuB,UAAU,CAACC,IAAI,CACvC;IACEC,IAAI,EAAE,gBAAgB;IACtB1B,IAAI,EACF,wEAAwE;IAC1E2B,KAAK,EAAE;EACT,CAAC,EACD;IACED,IAAI,EAAE,kBAAkB;IACxB1B,IAAI,EACF,4EAA4E;IAC9E2B,KAAK,EAAE;EACT,CAAC,CACF;EAEDnC,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAAC2B,QAAQ,CAACH,IAAI,CACrC;IACEzB,IAAI,EACF,4EAA4E;IAC9E6B,MAAM,EAAE,YAAY;IACpBF,KAAK,EAAE;EACT,CAAC,EACD;IACE3B,IAAI,EACF,2EAA2E;IAC7E6B,MAAM,EAAE,kBAAkB;IAC1BF,KAAK,EAAE;EACT,CAAC,CACF;EAEDnC,WAAW,CAACO,KAAK,CAACwB,wBAAwB,CACxC,mBAAmB,EACnB,QAAQ,EACR,IAAI,EACJQ,YAAY,EACZ,IAAI,CACL;EACDvC,WAAW,CAACO,KAAK,CAACwB,wBAAwB,CACxC,gBAAgB,EAChB,QAAQ,EACR,IAAI,EACJO,eAAe,EACf,IAAI,CACL;EACDtC,WAAW,CAACO,KAAK,CAACwB,wBAAwB,CACxC,kBAAkB,EAClB,QAAQ,EACR,IAAI,EACJa,iBAAiB,EACjB,IAAI,CACL;EAED5C,WAAW,CAACO,KAAK,CAACwB,wBAAwB,CACxC,8BAA8B,EAC9B,QAAQ,EACR/B,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAAC2B,QAAQ,EAClCpC,WAAW,CAACO,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACwF,UAAU,EAC1C,IAAI,CACL;;EAED;;EAEA;AACF;AACA;AACA;AACA;EACEpG,MAAM,CAACqG,YAAY,GAAG,YAAW;IAC/B,IAAIC,UAAU,GAAGnG,WAAW,CAACuB,KAAK,CAACT,MAAM;;IAEzC;IACA,IAAIsF,QAAQ,GAAG;MACb/F,IAAI,EAAE,EAAE;MAAE;MACVoE,KAAK,EAAE;IACT,CAAC;IAEDzE,WAAW,CAACuB,KAAK,CAAC4E,UAAU,CAAC,GAAG,CAAC,CAAC;IAClCnG,WAAW,CAACuB,KAAK,CAAC4E,UAAU,CAAC,CAACZ,EAAE,GAAGY,UAAU;IAC7CnG,WAAW,CAACuB,KAAK,CAAC4E,UAAU,CAAC,CAACpD,KAAK,GACjC/C,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAAC2B,QAAQ,CAACtB,MAAM,GAAG,CAAC;IAC/Cd,WAAW,CAACuB,KAAK,CAAC4E,UAAU,CAAC,CAACzE,KAAK,GAAG0E,QAAQ;IAE9CpG,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAAC2B,QAAQ,CAACH,IAAI,CAAC;MACtCzB,IAAI,EACF,+EAA+E;MACjF6B,MAAM,EAAE,kBAAkB,IAAI8D,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM;MACtDhE,KAAK,EAAE;IACT,CAAC,CAAC;IAEFnC,WAAW,CAACQ,IAAI,CAACC,QAAQ,CAACuB,UAAU,CAACC,IAAI,CAAC;MACxCC,IAAI,EAAE,sBAAsB,IAAIiE,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM;MACxD3F,IAAI,EACF,2EAA2E;MAC7E2B,KAAK,EAAE;IACT,CAAC,CAAC;IAEFiE,QAAQ,CAACC,cAAc,GAAG,UAAStB,KAAK,EAAEN,KAAK,EAAE;MAC/C,IAAI6B,MAAM,GAAG,IAAI;MAEjBvB,KAAK,GAAG/B,cAAc,CAAC+B,KAAK,GAAG,GAAG,EAAE,KAAK,CAAC;MAE1CqB,QAAQ,CAAC3B,KAAK,CAAC8B,KAAK,CAAC,UAAS5B,KAAK,EAAE;QACnC,IAAIA,KAAK,CAACI,KAAK,KAAKA,KAAK,EAAE;UACzBuB,MAAM,GAAG3B,KAAK;UACd,OAAO,KAAK;QACd,CAAC,CAAC;;QAEF,OAAO,IAAI;MACb,CAAC,CAAC;MAEF,IAAI,CAAC2B,MAAM,EAAE;QACXF,QAAQ,CAAC3B,KAAK,CAACxC,IAAI,CAAC;UAClB8C,KAAK,EAAEA,KAAK;UACZN,KAAK,EAAEA;QACT,CAAC,CAAC;QACF;MACF,CAAC,CAAC;;MAEF6B,MAAM,CAAC7B,KAAK,GAAGA,KAAK;IACtB,CAAC;IAED2B,QAAQ,CAACI,eAAe,GAAG,UAASzB,KAAK,EAAE;MACzC,IAAIuB,MAAM,GAAG,IAAI;MAEjBvB,KAAK,GAAG/B,cAAc,CAAC+B,KAAK,GAAG,GAAG,EAAE,KAAK,CAAC;MAE1CqB,QAAQ,CAAC3B,KAAK,CAAC8B,KAAK,CAAC,UAAS5B,KAAK,EAAE;QACnC,IAAIA,KAAK,CAACI,KAAK,KAAKA,KAAK,EAAE;UACzBuB,MAAM,GAAG3B,KAAK;UACd,OAAO,KAAK;QACd,CAAC,CAAC;;QAEF,OAAO,IAAI;MACb,CAAC,CAAC;MAEF,IAAI,CAAC2B,MAAM,EAAE;QACXF,QAAQ,CAAC3B,KAAK,CAACxC,IAAI,CAAC;UAClB8C,KAAK,EAAEA,KAAK;UACZN,KAAK,EAAE,QAAQ;UACfK,SAAS,EAAE;QACb,CAAC,CAAC;QACF;MACF,CAAC,CAAC;;MAEFwB,MAAM,CAACxB,SAAS,GAAG,CAAC;IACtB,CAAC;IAEDsB,QAAQ,CAACK,OAAO,GAAG,UAASC,QAAQ,EAAEC,QAAQ,EAAE;MAC9C,IAAIC,OAAO,GAAG5D,cAAc,CAAC0D,QAAQ,EAAE,IAAI,CAAC;MAE5C,IAAI,CAACN,QAAQ,CAAC/F,IAAI,CAACuG,OAAO,CAAClD,GAAG,CAAC,EAAE;QAC/B0C,QAAQ,CAAC/F,IAAI,CAACuG,OAAO,CAAClD,GAAG,CAAC,GAAG,EAAE;MACjC,CAAC,CAAC;;MAEF0C,QAAQ,CAAC/F,IAAI,CAACuG,OAAO,CAAClD,GAAG,CAAC,CAACkD,OAAO,CAACjD,MAAM,CAAC,GAAGgD,QAAQ;IACvD,CAAC;IAED3G,WAAW,CAACO,KAAK,CAACwB,wBAAwB,CACxC,uBAAuB,IAAIoE,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM,EACnD,QAAQ,EACRnG,WAAW,CAACuB,KAAK,CAAC4E,UAAU,CAAC,EAC7B/B,cAAc,EACd,KAAK,CACN;;IAED;IACApE,WAAW,CAACoB,QAAQ,CAACZ,IAAI,CAACa,IAAI,CAACC,SAAS,CAAC,SAAS,EAAE;MAClDzB,MAAM,EAAEA,MAAM;MACdgH,IAAI,EAAET,QAAQ;MACdU,QAAQ,EAAE9G,WAAW,CAACuB,KAAK,CAAC4E,UAAU,CAAC;MACvCA,UAAU,EAAEA;IACd,CAAC,CAAC;IAEF,OAAOC,QAAQ;EACjB,CAAC;;EAED;EACApG,WAAW,CAACoB,QAAQ,CAACZ,IAAI,CAACa,IAAI,CAACC,SAAS,CAAC,YAAY,EAAEzB,MAAM,CAAC;EAE9D,OAAO,IAAI;AACb;AAEAR,OAAO,CAAC0H,OAAO,CAACC,eAAe,CAC7B,MAAM,EACNpH,QAAQ,EACR,CAAC,CAAC,EACFP,OAAO,CAAC4H,OAAO,CAACC,WAAW,EAC3B,0BAA0B,CAC3B"},"metadata":{},"sourceType":"script","externalDependencies":[]}