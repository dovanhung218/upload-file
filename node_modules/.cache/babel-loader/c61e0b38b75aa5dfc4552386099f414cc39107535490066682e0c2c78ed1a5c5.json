{"ast":null,"code":"/**\r\n * Archiver Vending\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar Archiver = require('./lib/core');\nvar formats = {};\n\n/**\r\n * Dispenses a new Archiver instance.\r\n *\r\n * @constructor\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\nvar vending = function (format, options) {\n  return vending.create(format, options);\n};\n\n/**\r\n * Creates a new Archiver instance.\r\n *\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\nvending.create = function (format, options) {\n  if (formats[format]) {\n    var instance = new Archiver(format, options);\n    instance.setFormat(format);\n    instance.setModule(new formats[format](options));\n    return instance;\n  } else {\n    throw new Error('create(' + format + '): format not registered');\n  }\n};\n\n/**\r\n * Registers a format for use with archiver.\r\n *\r\n * @param  {String} format The name of the format.\r\n * @param  {Function} module The function for archiver to interact with.\r\n * @return void\r\n */\nvending.registerFormat = function (format, module) {\n  if (formats[format]) {\n    throw new Error('register(' + format + '): format already registered');\n  }\n  if (typeof module !== 'function') {\n    throw new Error('register(' + format + '): format module invalid');\n  }\n  if (typeof module.prototype.append !== 'function' || typeof module.prototype.finalize !== 'function') {\n    throw new Error('register(' + format + '): format module missing methods');\n  }\n  formats[format] = module;\n};\nvending.registerFormat('zip', require('./lib/plugins/zip'));\nvending.registerFormat('tar', require('./lib/plugins/tar'));\nvending.registerFormat('json', require('./lib/plugins/json'));\nmodule.exports = vending;","map":{"version":3,"names":["Archiver","require","formats","vending","format","options","create","instance","setFormat","setModule","Error","registerFormat","module","prototype","append","finalize","exports"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/archiver/index.js"],"sourcesContent":["/**\r\n * Archiver Vending\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\r\nvar Archiver = require('./lib/core');\r\n\r\nvar formats = {};\r\n\r\n/**\r\n * Dispenses a new Archiver instance.\r\n *\r\n * @constructor\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\r\nvar vending = function(format, options) {\r\n  return vending.create(format, options);\r\n};\r\n\r\n/**\r\n * Creates a new Archiver instance.\r\n *\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\r\nvending.create = function(format, options) {\r\n  if (formats[format]) {\r\n    var instance = new Archiver(format, options);\r\n    instance.setFormat(format);\r\n    instance.setModule(new formats[format](options));\r\n\r\n    return instance;\r\n  } else {\r\n    throw new Error('create(' + format + '): format not registered');\r\n  }\r\n};\r\n\r\n/**\r\n * Registers a format for use with archiver.\r\n *\r\n * @param  {String} format The name of the format.\r\n * @param  {Function} module The function for archiver to interact with.\r\n * @return void\r\n */\r\nvending.registerFormat = function(format, module) {\r\n  if (formats[format]) {\r\n    throw new Error('register(' + format + '): format already registered');\r\n  }\r\n\r\n  if (typeof module !== 'function') {\r\n    throw new Error('register(' + format + '): format module invalid');\r\n  }\r\n\r\n  if (typeof module.prototype.append !== 'function' || typeof module.prototype.finalize !== 'function') {\r\n    throw new Error('register(' + format + '): format module missing methods');\r\n  }\r\n\r\n  formats[format] = module;\r\n};\r\n\r\nvending.registerFormat('zip', require('./lib/plugins/zip'));\r\nvending.registerFormat('tar', require('./lib/plugins/tar'));\r\nvending.registerFormat('json', require('./lib/plugins/json'));\r\n\r\nmodule.exports = vending;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEpC,IAAIC,OAAO,GAAG,CAAC,CAAC;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,UAASC,MAAM,EAAEC,OAAO,EAAE;EACtC,OAAOF,OAAO,CAACG,MAAM,CAACF,MAAM,EAAEC,OAAO,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,MAAM,GAAG,UAASF,MAAM,EAAEC,OAAO,EAAE;EACzC,IAAIH,OAAO,CAACE,MAAM,CAAC,EAAE;IACnB,IAAIG,QAAQ,GAAG,IAAIP,QAAQ,CAACI,MAAM,EAAEC,OAAO,CAAC;IAC5CE,QAAQ,CAACC,SAAS,CAACJ,MAAM,CAAC;IAC1BG,QAAQ,CAACE,SAAS,CAAC,IAAIP,OAAO,CAACE,MAAM,CAAC,CAACC,OAAO,CAAC,CAAC;IAEhD,OAAOE,QAAQ;EACjB,CAAC,MAAM;IACL,MAAM,IAAIG,KAAK,CAAC,SAAS,GAAGN,MAAM,GAAG,0BAA0B,CAAC;EAClE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,OAAO,CAACQ,cAAc,GAAG,UAASP,MAAM,EAAEQ,MAAM,EAAE;EAChD,IAAIV,OAAO,CAACE,MAAM,CAAC,EAAE;IACnB,MAAM,IAAIM,KAAK,CAAC,WAAW,GAAGN,MAAM,GAAG,8BAA8B,CAAC;EACxE;EAEA,IAAI,OAAOQ,MAAM,KAAK,UAAU,EAAE;IAChC,MAAM,IAAIF,KAAK,CAAC,WAAW,GAAGN,MAAM,GAAG,0BAA0B,CAAC;EACpE;EAEA,IAAI,OAAOQ,MAAM,CAACC,SAAS,CAACC,MAAM,KAAK,UAAU,IAAI,OAAOF,MAAM,CAACC,SAAS,CAACE,QAAQ,KAAK,UAAU,EAAE;IACpG,MAAM,IAAIL,KAAK,CAAC,WAAW,GAAGN,MAAM,GAAG,kCAAkC,CAAC;EAC5E;EAEAF,OAAO,CAACE,MAAM,CAAC,GAAGQ,MAAM;AAC1B,CAAC;AAEDT,OAAO,CAACQ,cAAc,CAAC,KAAK,EAAEV,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC3DE,OAAO,CAACQ,cAAc,CAAC,KAAK,EAAEV,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC3DE,OAAO,CAACQ,cAAc,CAAC,MAAM,EAAEV,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAE7DW,MAAM,CAACI,OAAO,GAAGb,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}