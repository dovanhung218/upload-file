{"ast":null,"code":"'use strict';\n\n// The Node team wants to deprecate `process.bind(...)`.\n//   https://github.com/nodejs/node/pull/2768\n//\n// However, we need the 'uv' binding for errname support.\n// This is a defensive wrapper around it so `execa` will not fail entirely if it stops working someday.\n//\n// If this ever stops working. See: https://github.com/sindresorhus/execa/issues/31#issuecomment-215939939 for another possible solution.\nlet uv;\ntry {\n  uv = process.binding('uv');\n  if (typeof uv.errname !== 'function') {\n    throw new TypeError('uv.errname is not a function');\n  }\n} catch (err) {\n  console.error('execa/lib/errname: unable to establish process.binding(\\'uv\\')', err);\n  uv = null;\n}\nfunction errname(uv, code) {\n  if (uv) {\n    return uv.errname(code);\n  }\n  if (!(code < 0)) {\n    throw new Error('err >= 0');\n  }\n  return `Unknown system error ${code}`;\n}\nmodule.exports = code => errname(uv, code);\n\n// Used for testing the fallback behavior\nmodule.exports.__test__ = errname;","map":{"version":3,"names":["uv","process","binding","errname","TypeError","err","console","error","code","Error","module","exports","__test__"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/redocx/node_modules/execa/lib/errname.js"],"sourcesContent":["'use strict';\n// The Node team wants to deprecate `process.bind(...)`.\n//   https://github.com/nodejs/node/pull/2768\n//\n// However, we need the 'uv' binding for errname support.\n// This is a defensive wrapper around it so `execa` will not fail entirely if it stops working someday.\n//\n// If this ever stops working. See: https://github.com/sindresorhus/execa/issues/31#issuecomment-215939939 for another possible solution.\nlet uv;\n\ntry {\n\tuv = process.binding('uv');\n\n\tif (typeof uv.errname !== 'function') {\n\t\tthrow new TypeError('uv.errname is not a function');\n\t}\n} catch (err) {\n\tconsole.error('execa/lib/errname: unable to establish process.binding(\\'uv\\')', err);\n\tuv = null;\n}\n\nfunction errname(uv, code) {\n\tif (uv) {\n\t\treturn uv.errname(code);\n\t}\n\n\tif (!(code < 0)) {\n\t\tthrow new Error('err >= 0');\n\t}\n\n\treturn `Unknown system error ${code}`;\n}\n\nmodule.exports = code => errname(uv, code);\n\n// Used for testing the fallback behavior\nmodule.exports.__test__ = errname;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,EAAE;AAEN,IAAI;EACHA,EAAE,GAAGC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAE1B,IAAI,OAAOF,EAAE,CAACG,OAAO,KAAK,UAAU,EAAE;IACrC,MAAM,IAAIC,SAAS,CAAC,8BAA8B,CAAC;EACpD;AACD,CAAC,CAAC,OAAOC,GAAG,EAAE;EACbC,OAAO,CAACC,KAAK,CAAC,gEAAgE,EAAEF,GAAG,CAAC;EACpFL,EAAE,GAAG,IAAI;AACV;AAEA,SAASG,OAAO,CAACH,EAAE,EAAEQ,IAAI,EAAE;EAC1B,IAAIR,EAAE,EAAE;IACP,OAAOA,EAAE,CAACG,OAAO,CAACK,IAAI,CAAC;EACxB;EAEA,IAAI,EAAEA,IAAI,GAAG,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,UAAU,CAAC;EAC5B;EAEA,OAAQ,wBAAuBD,IAAK,EAAC;AACtC;AAEAE,MAAM,CAACC,OAAO,GAAGH,IAAI,IAAIL,OAAO,CAACH,EAAE,EAAEQ,IAAI,CAAC;;AAE1C;AACAE,MAAM,CAACC,OAAO,CAACC,QAAQ,GAAGT,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}