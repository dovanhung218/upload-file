{"ast":null,"code":"// author vtloc\n// date 2014Jan09\n// author GradualStudent\n// date 2015jan06\n// This module's purpose is to transform\nvar _ = require('lodash'); // replacing underscore to get merge function\nvar xmlBuilder = require('xmlbuilder');\nvar _chartSpecs = require('./charts');\nfunction OfficeChart(chartInfo) {\n  if (chartInfo instanceof OfficeChart) {\n    return chartInfo;\n  }\n  return {\n    chartSpec: null,\n    // Javascript object that represents the XML tree for the PowerPoint chart\n\n    toXML: function () {\n      return xmlBuilder.create(this.chartSpec, {\n        version: '1.0',\n        encoding: 'UTF-8',\n        standalone: true\n      }).end({\n        pretty: true,\n        indent: '  ',\n        newline: '\\n'\n      });\n    },\n    toJSON: function () {\n      return this.chartSpec;\n    },\n    getClass: function () {\n      return 'OfficeChart';\n    },\n    // @brief Create XML representation of chart object\n    // @param chartInfo {object}\n    // {\n    //   [\n    //      title: 'eSurvey chart',\n    //      data:  [ // array of series\n    //      {\n    //        name: 'Income',\n    //        labels: ['2005', '2006', '2007', '2008', '2009'],\n    //        values: [23.5, 26.2, 30.1, 29.5, 24.6],\n    //       color: 'ff0000'\n    //      }\n    //    ],\n    //   overlap:  \"0\",\n    //   gapWidth: \"150\"\n    // }\n\n    initialize: function (chartInfo) {\n      if (chartInfo.getClass && chartInfo.getClass() === 'OfficeChart') {\n        return chartInfo;\n      }\n\n      // overlap [\"50\"] is handled as an option within the chartbase\n      // gapWidth [\"150\"] is handled as an option within the chartbase\n      // valAxisCrossAtMaxCategory [true|false] is handled as an option within the chart base\n      // catAxisReverseOrder [true|false] is handled as an option within the chart base\n\n      this.chartSpec = OfficeChart.getChartBase(chartInfo); // get foundation XML for the chart type\n\n      // Below are methods for handling options with more complex XML to mix in\n      this.setData(chartInfo['data']);\n      this.setTitle(chartInfo.title || chartInfo.name);\n      this.setValAxisTitle(chartInfo.valAxisTitle);\n      this.setCatAxisTitle(chartInfo.catAxisTitle);\n      this.setValAxisNumFmt(chartInfo.valAxisNumFmt);\n      this.setValAxisScale(chartInfo.valAxisMinValue, chartInfo.valAxisMaxValue);\n      this.setTextSize(chartInfo.fontSize);\n      this.mergeChartXml(chartInfo.xml);\n      this.setValAxisMajorGridlines(chartInfo.valAxisMajorGridlines);\n      this.setValAxisMinorGridlines(chartInfo.valAxisMinorGridlines);\n      return this;\n    },\n    setTextSize: function (textSize) {\n      if (textSize !== undefined) {\n        var textRef = this._text(textSize);\n        _.merge(this.chartSpec['c:chartSpace'], textRef);\n      }\n    },\n    setTitle: function (title) {\n      if (title !== undefined) {\n        var titleRef = this._title(chartInfo.title || chartInfo.name);\n        _.merge(this.chartSpec['c:chartSpace']['c:chart'], titleRef);\n      }\n    },\n    setValAxisTitle: function (title) {\n      if (title) {\n        var titleRef = this._title(title);\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'], titleRef);\n      }\n    },\n    setCatAxisTitle: function (title) {\n      if (title) {\n        var titleRef = this._title(title);\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:catAx'], titleRef);\n      }\n    },\n    setValAxisNumFmt: function (format) {\n      if (format !== undefined) {\n        var numFmtRef = this._numFmt(format);\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'], numFmtRef);\n      }\n    },\n    setValAxisScale: function (min, max) {\n      if (min !== undefined || max !== undefined) {\n        var scalingRef = this._scaling(min, max);\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'], scalingRef);\n      }\n    },\n    mergeChartXml: function (xml) {\n      if (xml !== undefined) {\n        _.merge(this.chartSpec['c:chartSpace'], xml);\n      }\n    },\n    setValAxisMajorGridlines: function (boolean) {\n      if (boolean) {\n        this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx']['c:majorGridlines'] = {};\n      }\n    },\n    setValAxisMinorGridlines: function (boolean) {\n      if (boolean) {\n        this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx']['c:minorGridlines'] = {};\n      }\n    },\n    setData: function (data) {\n      var seriesDataRef;\n      if (data) {\n        this.data = data;\n\n        // Mix in data series\n        if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']['#text'];\n        } else {\n          if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:areaChart']) {\n            seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:areaChart']['#text'];\n          } else {\n            if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:barChart']) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:barChart']['#text'];\n            } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:doughnutChart']) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:doughnutChart']['#text'];\n            } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']['#text'];\n            } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:pieChart']) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:pieChart']['#text'];\n            } else {\n              throw new Error(\"Can't add data to chart that is not initialized or not a recognized type\");\n            } // Endif.\n          } // Endif.\n        } // Endif.\n\n        // the barChart/pieChart objects has other attributes too, so we push the series data on, not replace it\n        if (chartInfo['data']) {\n          var seriesData = this.getSeriesRef(chartInfo['data']);\n          for (var i = 0; i < seriesData.length; i++) {\n            seriesDataRef.push(seriesData[i]);\n          }\n        }\n      }\n      return this;\n    },\n    /**\n     * Transform an array of string into an office's compliance structure\n     *\n     * @param region {string} The reference cell of the string, for example: $A$1.\n     * @param stringArr {Array} An array of string, for example: ['foo', 'bar'].\n     */\n    _strRef: function (region, stringArr) {\n      var obj = {\n        'c:strRef': {\n          'c:f': region,\n          'c:strCache': function () {\n            var result = {};\n            result['c:ptCount'] = {\n              '@val': stringArr.length\n            };\n            result['#text'] = [];\n            for (var i = 0; i < stringArr.length; i++) {\n              result['#text'].push({\n                'c:pt': {\n                  '@idx': i,\n                  'c:v': stringArr[i]\n                }\n              });\n            } // End of for loop.\n\n            return result;\n          }\n        }\n      };\n      return obj;\n    },\n    /**\n     * Transform an array of numbers into an office's compliance structure\n     *\n     * @param region {string} The reference cell of the string, for example: $A$1.\n     * @param numArr {Array} An array of numArr, for example: [4, 7, 8].\n     * @param formatCode {string} A string describe the number's format. Example: General.\n     */\n    _numRef: function (region, numArr, formatCode) {\n      var obj = {\n        'c:numRef': {\n          'c:f': region,\n          'c:numCache': {\n            'c:formatCode': formatCode,\n            'c:ptCount': {\n              '@val': '' + numArr.length\n            },\n            '#text': function () {\n              var result = [];\n              for (var i = 0; i < numArr.length; i++) {\n                result.push({\n                  'c:pt': {\n                    '@idx': i,\n                    'c:v': numArr[i].toString()\n                  }\n                });\n              } // End of for loop.\n\n              return result;\n            }\n          }\n        }\n      };\n      return obj;\n    },\n    _numFmt: function (formatCode) {\n      return {\n        'c:numFmt': {\n          '@formatCode': formatCode || 'General',\n          '@sourceLinked': formatCode ? '0' : '1'\n        }\n      };\n    },\n    /**\n     * Transform an array of string into an office's compliance structure\n     *\n     * @param colorArr {Array} An array of colorArr, for example: ['ff0000', '00ff00', '0000ff'].\n     */\n    _colorRef: function (colorArr) {\n      var arr = [];\n      for (var i = 0; i < colorArr.length; i++) {\n        arr.push({\n          'c:dPt': {\n            'c:idx': {\n              '@val': i\n            },\n            'c:bubble3D': {\n              '@val': 0\n            },\n            'c:spPr': {\n              'a:solidFill': {\n                'a:srgbClr': {\n                  '@val': colorArr[i].toString()\n                }\n              }\n            }\n          }\n        });\n      } // End of for loop.\n\n      return arr;\n    },\n    /**\n     * @brief Transform an array of string into an office's compliance structure\n     *\n     * @param row {number} Row index.\n     * @param col {number} Col index.\n     * @param isRowAbsolute {boolean} Will add $ into cell's address if this parameter is true.\n     * @param isColAbsolute {boolean} Will add $ into cell's address if this parameter is true.\n     */\n    _rowColToSheetAddress: function (row, col, isRowAbsolute, isColAbsolute) {\n      var address = '';\n      if (isColAbsolute) {\n        address += '$';\n      } // Endif.\n\n      // these lines of code will transform the number 1-26 into A->Z\n      // used in excel's cell's coordination\n      while (col > 0) {\n        var num = col % 26;\n        col = (col - num) / 26;\n        address += String.fromCharCode(65 + num - 1);\n      } // End of while loop.\n\n      if (isRowAbsolute) {\n        address += '$';\n      } // Endif.\n\n      address += row;\n      return address;\n    },\n    // returns XML snippet for a chart dataseries\n    _ser: function (serie, i) {\n      var rc2a = this._rowColToSheetAddress; // shortcut\n\n      var serieData = {\n        'c:ser': {\n          'c:idx': {\n            '@val': i\n          },\n          'c:order': {\n            '@val': i\n          },\n          'c:tx': this._strRef('Sheet1!' + rc2a(1, 2 + i, true, true), [serie.name]),\n          // serie's value\n          'c:invertIfNegative': {\n            '@val': '0'\n          },\n          'c:cat': this._strRef('Sheet1!' + rc2a(2, 1, true, true) + ':' + rc2a(2 + serie.labels.length - 1, 1, true, true), serie.labels),\n          'c:val': this._numRef('Sheet1!' + rc2a(2, 2 + i, true, true) + ':' + rc2a(2 + serie.labels.length - 1, 2 + i, true, true), serie.values, 'General')\n        }\n      };\n      if (serie.color) {\n        serieData['c:ser']['c:spPr'] = {\n          'a:solidFill': {\n            'a:srgbClr': {\n              '@val': serie.color\n            }\n          }\n        };\n      } else if (serie.schemeColor) {\n        serieData['c:ser']['c:spPr'] = {\n          'a:solidFill': {\n            'a:schemeClr': {\n              '@val': serie.schemeColor\n            }\n          }\n        };\n      } // Endif.\n\n      if (serie.xml) {\n        serieData['c:ser'] = _.merge(serieData['c:ser'], serie.xml);\n      } // Endif.\n\n      // for pie charts\n      if (serie.colors) {\n        serieData['c:ser']['#text'] = this._colorRef(serie.colors);\n      } // Endif.\n\n      return serieData;\n    },\n    // returns XML snippet for a chart dataseries\n    getSeriesRef: function (data) {\n      return data.map(this._ser, this);\n    },\n    // returns XML snippet for axis number format e.g. \"$0\" for US currency, \"0%\" for percentages\n    xmlValAxisFormat: function (formatCode) {\n      return {\n        'c:chartSpace': {\n          'c:chart': {\n            'c:plotArea': {\n              'c:valAx': {\n                'c:majorGridlines': {},\n                'c:numFmt': {\n                  '@formatCode': formatCode,\n                  '@sourceLinked': '0'\n                }\n              }\n            }\n          }\n        }\n      };\n    },\n    // returns XML snippet for an axis scale\n    // currently just min/max are supported\n    /*\n      <c:scaling><c:orientation val=\"minMax\"/>\n        <c:max val=\"24.0\"/>\n        <c:min val=\"24.0\"/>\n      </c:scaling>\n    */\n    _scaling: function (minValue, maxValue) {\n      var ref = {\n        'c:scaling': {\n          'c:orientation': {\n            '@val': 'minMax'\n          }\n        }\n      };\n      if (maxValue !== undefined) {\n        ref['c:scaling']['c:max'] = {\n          '@val': '' + (maxValue || '')\n        };\n      } // Endif.\n\n      if (minValue !== undefined) {\n        ref['c:scaling']['c:min'] = {\n          '@val': '' + (minValue || '')\n        };\n      } // Endif.\n\n      return ref;\n    },\n    _text: function (textSize) {\n      return {\n        'c:txPr': {\n          'a:bodyPr': {},\n          'a:listStyle': {},\n          'a:p': {\n            'a:pPr': {\n              'a:defRPr': {\n                '@sz': textSize\n              }\n            },\n            'a:endParaRPr': {\n              '@lang': 'en-US'\n            }\n          }\n        }\n      };\n    },\n    // @brief returns XML snippet for an axis title\n    _title: function (title) {\n      if (typeof title === 'object') return title; // assume it's an XML representations\n      return {\n        'c:title': {\n          'c:tx': {\n            'c:rich': {\n              'a:bodyPr': {},\n              'a:lstStyle': {},\n              'a:p': {\n                'a:pPr': {\n                  'a:defRPr': {}\n                },\n                'a:r': {\n                  'a:rPr': {\n                    '@lang': 'en-US',\n                    '@dirty': '0',\n                    '@smtClean': '0'\n                  },\n                  'a:t': title\n                },\n                'a:endParaRPr': {\n                  '@lang': 'en-US',\n                  '@dirty': '0'\n                }\n              }\n            }\n          },\n          'c:layout': {},\n          'c:overlay': {\n            '@val': '0'\n          }\n        }\n      };\n    }\n  }.initialize(chartInfo);\n}\nOfficeChart.getChartBase = function (chartInfo) {\n  var chartBase;\n  if (typeof chartInfo === 'string') {\n    chartBase = _chartSpecs[chartInfo]();\n  } else if (typeof chartInfo.renderType === 'string') {\n    chartBase = _chartSpecs[chartInfo.renderType](chartInfo);\n  } else if (chartInfo.xml) {\n    chartBase = chartInfo.xml;\n  } else {\n    throw new Error('invalid chart type');\n  }\n  // return deep copy so can create multiple charts from same base within one PowerPoint document\n  return JSON.parse(JSON.stringify(chartBase));\n};\nmodule.exports = OfficeChart;\n\n/*\n // Column chart\n new OfficeChart({\n  title: 'eSurvey chart',\n  renderType: 'column',\n  data: [ // array of series\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    },\n    {\n      name: 'Expense',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [18.1, 22.8, 23.9, 25.1, 25],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    }\n  ]\n});\n\n // Pie chart\n new OfficeChart({\n  title: 'eSurvey chart',\n  renderType: 'pie',\n  data: [ // array of series\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    }\n  ]\n});\n\n // Clustered bar chat\n new OfficeChart({\n  title: 'eSurvey chart',\n  renderType: 'group-bar',\n  data: [ // array of series\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    }\n  ]\n});\n*/","map":{"version":3,"names":["_","require","xmlBuilder","_chartSpecs","OfficeChart","chartInfo","chartSpec","toXML","create","version","encoding","standalone","end","pretty","indent","newline","toJSON","getClass","initialize","getChartBase","setData","setTitle","title","name","setValAxisTitle","valAxisTitle","setCatAxisTitle","catAxisTitle","setValAxisNumFmt","valAxisNumFmt","setValAxisScale","valAxisMinValue","valAxisMaxValue","setTextSize","fontSize","mergeChartXml","xml","setValAxisMajorGridlines","valAxisMajorGridlines","setValAxisMinorGridlines","valAxisMinorGridlines","textSize","undefined","textRef","_text","merge","titleRef","_title","format","numFmtRef","_numFmt","min","max","scalingRef","_scaling","boolean","data","seriesDataRef","Error","seriesData","getSeriesRef","i","length","push","_strRef","region","stringArr","obj","result","_numRef","numArr","formatCode","toString","_colorRef","colorArr","arr","_rowColToSheetAddress","row","col","isRowAbsolute","isColAbsolute","address","num","String","fromCharCode","_ser","serie","rc2a","serieData","labels","values","color","schemeColor","colors","map","xmlValAxisFormat","minValue","maxValue","ref","chartBase","renderType","JSON","parse","stringify","module","exports"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/officegen/lib/officechart.js"],"sourcesContent":["// author vtloc\n// date 2014Jan09\n// author GradualStudent\n// date 2015jan06\n// This module's purpose is to transform\nvar _ = require('lodash') // replacing underscore to get merge function\nvar xmlBuilder = require('xmlbuilder')\nvar _chartSpecs = require('./charts')\n\nfunction OfficeChart(chartInfo) {\n  if (chartInfo instanceof OfficeChart) {\n    return chartInfo\n  }\n\n  return {\n    chartSpec: null, // Javascript object that represents the XML tree for the PowerPoint chart\n\n    toXML: function() {\n      return xmlBuilder\n        .create(this.chartSpec, {\n          version: '1.0',\n          encoding: 'UTF-8',\n          standalone: true\n        })\n        .end({ pretty: true, indent: '  ', newline: '\\n' })\n    },\n\n    toJSON: function() {\n      return this.chartSpec\n    },\n\n    getClass: function() {\n      return 'OfficeChart'\n    },\n\n    // @brief Create XML representation of chart object\n    // @param chartInfo {object}\n    // {\n    //   [\n    //      title: 'eSurvey chart',\n    //      data:  [ // array of series\n    //      {\n    //        name: 'Income',\n    //        labels: ['2005', '2006', '2007', '2008', '2009'],\n    //        values: [23.5, 26.2, 30.1, 29.5, 24.6],\n    //       color: 'ff0000'\n    //      }\n    //    ],\n    //   overlap:  \"0\",\n    //   gapWidth: \"150\"\n    // }\n\n    initialize: function(chartInfo) {\n      if (chartInfo.getClass && chartInfo.getClass() === 'OfficeChart') {\n        return chartInfo\n      }\n\n      // overlap [\"50\"] is handled as an option within the chartbase\n      // gapWidth [\"150\"] is handled as an option within the chartbase\n      // valAxisCrossAtMaxCategory [true|false] is handled as an option within the chart base\n      // catAxisReverseOrder [true|false] is handled as an option within the chart base\n\n      this.chartSpec = OfficeChart.getChartBase(chartInfo) // get foundation XML for the chart type\n\n      // Below are methods for handling options with more complex XML to mix in\n      this.setData(chartInfo['data'])\n      this.setTitle(chartInfo.title || chartInfo.name)\n      this.setValAxisTitle(chartInfo.valAxisTitle)\n      this.setCatAxisTitle(chartInfo.catAxisTitle)\n      this.setValAxisNumFmt(chartInfo.valAxisNumFmt)\n      this.setValAxisScale(chartInfo.valAxisMinValue, chartInfo.valAxisMaxValue)\n      this.setTextSize(chartInfo.fontSize)\n      this.mergeChartXml(chartInfo.xml)\n      this.setValAxisMajorGridlines(chartInfo.valAxisMajorGridlines)\n      this.setValAxisMinorGridlines(chartInfo.valAxisMinorGridlines)\n\n      return this\n    },\n\n    setTextSize: function(textSize) {\n      if (textSize !== undefined) {\n        var textRef = this._text(textSize)\n        _.merge(this.chartSpec['c:chartSpace'], textRef)\n      }\n    },\n\n    setTitle: function(title) {\n      if (title !== undefined) {\n        var titleRef = this._title(chartInfo.title || chartInfo.name)\n        _.merge(this.chartSpec['c:chartSpace']['c:chart'], titleRef)\n      }\n    },\n\n    setValAxisTitle: function(title) {\n      if (title) {\n        var titleRef = this._title(title)\n        _.merge(\n          this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'],\n          titleRef\n        )\n      }\n    },\n\n    setCatAxisTitle: function(title) {\n      if (title) {\n        var titleRef = this._title(title)\n        _.merge(\n          this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:catAx'],\n          titleRef\n        )\n      }\n    },\n\n    setValAxisNumFmt: function(format) {\n      if (format !== undefined) {\n        var numFmtRef = this._numFmt(format)\n        _.merge(\n          this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'],\n          numFmtRef\n        )\n      }\n    },\n\n    setValAxisScale: function(min, max) {\n      if (min !== undefined || max !== undefined) {\n        var scalingRef = this._scaling(min, max)\n        _.merge(\n          this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'],\n          scalingRef\n        )\n      }\n    },\n\n    mergeChartXml: function(xml) {\n      if (xml !== undefined) {\n        _.merge(this.chartSpec['c:chartSpace'], xml)\n      }\n    },\n\n    setValAxisMajorGridlines: function(boolean) {\n      if (boolean) {\n        this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'][\n          'c:majorGridlines'\n        ] = {}\n      }\n    },\n    setValAxisMinorGridlines: function(boolean) {\n      if (boolean) {\n        this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'][\n          'c:minorGridlines'\n        ] = {}\n      }\n    },\n\n    setData: function(data) {\n      var seriesDataRef\n\n      if (data) {\n        this.data = data\n\n        // Mix in data series\n        if (\n          this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']\n        ) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart'][\n            'c:plotArea'\n          ]['c:lineChart']['#text']\n        } else {\n          if (\n            this.chartSpec['c:chartSpace']['c:chart']['c:plotArea'][\n              'c:areaChart'\n            ]\n          ) {\n            seriesDataRef = this.chartSpec['c:chartSpace']['c:chart'][\n              'c:plotArea'\n            ]['c:areaChart']['#text']\n          } else {\n            if (\n              this.chartSpec['c:chartSpace']['c:chart']['c:plotArea'][\n                'c:barChart'\n              ]\n            ) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart'][\n                'c:plotArea'\n              ]['c:barChart']['#text']\n            } else if (\n              this.chartSpec['c:chartSpace']['c:chart']['c:plotArea'][\n                'c:doughnutChart'\n              ]\n            ) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart'][\n                'c:plotArea'\n              ]['c:doughnutChart']['#text']\n            } else if (\n              this.chartSpec['c:chartSpace']['c:chart']['c:plotArea'][\n                'c:lineChart'\n              ]\n            ) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart'][\n                'c:plotArea'\n              ]['c:lineChart']['#text']\n            } else if (\n              this.chartSpec['c:chartSpace']['c:chart']['c:plotArea'][\n                'c:pieChart'\n              ]\n            ) {\n              seriesDataRef = this.chartSpec['c:chartSpace']['c:chart'][\n                'c:plotArea'\n              ]['c:pieChart']['#text']\n            } else {\n              throw new Error(\n                \"Can't add data to chart that is not initialized or not a recognized type\"\n              )\n            } // Endif.\n          } // Endif.\n        } // Endif.\n\n        // the barChart/pieChart objects has other attributes too, so we push the series data on, not replace it\n        if (chartInfo['data']) {\n          var seriesData = this.getSeriesRef(chartInfo['data'])\n          for (var i = 0; i < seriesData.length; i++) {\n            seriesDataRef.push(seriesData[i])\n          }\n        }\n      }\n      return this\n    },\n\n    /**\n     * Transform an array of string into an office's compliance structure\n     *\n     * @param region {string} The reference cell of the string, for example: $A$1.\n     * @param stringArr {Array} An array of string, for example: ['foo', 'bar'].\n     */\n    _strRef: function(region, stringArr) {\n      var obj = {\n        'c:strRef': {\n          'c:f': region,\n          'c:strCache': function() {\n            var result = {}\n\n            result['c:ptCount'] = { '@val': stringArr.length }\n            result['#text'] = []\n            for (var i = 0; i < stringArr.length; i++) {\n              result['#text'].push({\n                'c:pt': { '@idx': i, 'c:v': stringArr[i] }\n              })\n            } // End of for loop.\n\n            return result\n          }\n        }\n      }\n\n      return obj\n    },\n\n    /**\n     * Transform an array of numbers into an office's compliance structure\n     *\n     * @param region {string} The reference cell of the string, for example: $A$1.\n     * @param numArr {Array} An array of numArr, for example: [4, 7, 8].\n     * @param formatCode {string} A string describe the number's format. Example: General.\n     */\n    _numRef: function(region, numArr, formatCode) {\n      var obj = {\n        'c:numRef': {\n          'c:f': region,\n          'c:numCache': {\n            'c:formatCode': formatCode,\n            'c:ptCount': { '@val': '' + numArr.length },\n            '#text': function() {\n              var result = []\n              for (var i = 0; i < numArr.length; i++) {\n                result.push({\n                  'c:pt': { '@idx': i, 'c:v': numArr[i].toString() }\n                })\n              } // End of for loop.\n\n              return result\n            }\n          }\n        }\n      }\n\n      return obj\n    },\n\n    _numFmt: function(formatCode) {\n      return {\n        'c:numFmt': {\n          '@formatCode': formatCode || 'General',\n          '@sourceLinked': formatCode ? '0' : '1'\n        }\n      }\n    },\n\n    /**\n     * Transform an array of string into an office's compliance structure\n     *\n     * @param colorArr {Array} An array of colorArr, for example: ['ff0000', '00ff00', '0000ff'].\n     */\n    _colorRef: function(colorArr) {\n      var arr = []\n      for (var i = 0; i < colorArr.length; i++) {\n        arr.push({\n          'c:dPt': {\n            'c:idx': { '@val': i },\n            'c:bubble3D': { '@val': 0 },\n            'c:spPr': {\n              'a:solidFill': {\n                'a:srgbClr': { '@val': colorArr[i].toString() }\n              }\n            }\n          }\n        })\n      } // End of for loop.\n\n      return arr\n    },\n\n    /**\n     * @brief Transform an array of string into an office's compliance structure\n     *\n     * @param row {number} Row index.\n     * @param col {number} Col index.\n     * @param isRowAbsolute {boolean} Will add $ into cell's address if this parameter is true.\n     * @param isColAbsolute {boolean} Will add $ into cell's address if this parameter is true.\n     */\n    _rowColToSheetAddress: function(row, col, isRowAbsolute, isColAbsolute) {\n      var address = ''\n\n      if (isColAbsolute) {\n        address += '$'\n      } // Endif.\n\n      // these lines of code will transform the number 1-26 into A->Z\n      // used in excel's cell's coordination\n      while (col > 0) {\n        var num = col % 26\n        col = (col - num) / 26\n        address += String.fromCharCode(65 + num - 1)\n      } // End of while loop.\n\n      if (isRowAbsolute) {\n        address += '$'\n      } // Endif.\n\n      address += row\n\n      return address\n    },\n\n    // returns XML snippet for a chart dataseries\n    _ser: function(serie, i) {\n      var rc2a = this._rowColToSheetAddress // shortcut\n\n      var serieData = {\n        'c:ser': {\n          'c:idx': { '@val': i },\n          'c:order': { '@val': i },\n          'c:tx': this._strRef('Sheet1!' + rc2a(1, 2 + i, true, true), [\n            serie.name\n          ]), // serie's value\n          'c:invertIfNegative': { '@val': '0' },\n          'c:cat': this._strRef(\n            'Sheet1!' +\n              rc2a(2, 1, true, true) +\n              ':' +\n              rc2a(2 + serie.labels.length - 1, 1, true, true),\n            serie.labels\n          ),\n          'c:val': this._numRef(\n            'Sheet1!' +\n              rc2a(2, 2 + i, true, true) +\n              ':' +\n              rc2a(2 + serie.labels.length - 1, 2 + i, true, true),\n            serie.values,\n            'General'\n          )\n        }\n      }\n\n      if (serie.color) {\n        serieData['c:ser']['c:spPr'] = {\n          'a:solidFill': {\n            'a:srgbClr': { '@val': serie.color }\n          }\n        }\n      } else if (serie.schemeColor) {\n        serieData['c:ser']['c:spPr'] = {\n          'a:solidFill': {\n            'a:schemeClr': { '@val': serie.schemeColor }\n          }\n        }\n      } // Endif.\n\n      if (serie.xml) {\n        serieData['c:ser'] = _.merge(serieData['c:ser'], serie.xml)\n      } // Endif.\n\n      // for pie charts\n      if (serie.colors) {\n        serieData['c:ser']['#text'] = this._colorRef(serie.colors)\n      } // Endif.\n\n      return serieData\n    },\n\n    // returns XML snippet for a chart dataseries\n    getSeriesRef: function(data) {\n      return data.map(this._ser, this)\n    },\n\n    // returns XML snippet for axis number format e.g. \"$0\" for US currency, \"0%\" for percentages\n    xmlValAxisFormat: function(formatCode) {\n      return {\n        'c:chartSpace': {\n          'c:chart': {\n            'c:plotArea': {\n              'c:valAx': {\n                'c:majorGridlines': {},\n                'c:numFmt': {\n                  '@formatCode': formatCode,\n                  '@sourceLinked': '0'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n\n    // returns XML snippet for an axis scale\n    // currently just min/max are supported\n    /*\n      <c:scaling><c:orientation val=\"minMax\"/>\n        <c:max val=\"24.0\"/>\n        <c:min val=\"24.0\"/>\n      </c:scaling>\n    */\n    _scaling: function(minValue, maxValue) {\n      var ref = {\n        'c:scaling': {\n          'c:orientation': {\n            '@val': 'minMax'\n          }\n        }\n      }\n\n      if (maxValue !== undefined) {\n        ref['c:scaling']['c:max'] = {\n          '@val': '' + (maxValue || '')\n        }\n      } // Endif.\n\n      if (minValue !== undefined) {\n        ref['c:scaling']['c:min'] = {\n          '@val': '' + (minValue || '')\n        }\n      } // Endif.\n\n      return ref\n    },\n\n    _text: function(textSize) {\n      return {\n        'c:txPr': {\n          'a:bodyPr': {},\n          'a:listStyle': {},\n          'a:p': {\n            'a:pPr': {\n              'a:defRPr': {\n                '@sz': textSize\n              }\n            },\n            'a:endParaRPr': {\n              '@lang': 'en-US'\n            }\n          }\n        }\n      }\n    },\n\n    // @brief returns XML snippet for an axis title\n    _title: function(title) {\n      if (typeof title === 'object') return title // assume it's an XML representations\n      return {\n        'c:title': {\n          'c:tx': {\n            'c:rich': {\n              'a:bodyPr': {},\n              'a:lstStyle': {},\n              'a:p': {\n                'a:pPr': {\n                  'a:defRPr': {}\n                },\n                'a:r': {\n                  'a:rPr': {\n                    '@lang': 'en-US',\n                    '@dirty': '0',\n                    '@smtClean': '0'\n                  },\n                  'a:t': title\n                },\n                'a:endParaRPr': {\n                  '@lang': 'en-US',\n                  '@dirty': '0'\n                }\n              }\n            }\n          },\n          'c:layout': {},\n          'c:overlay': {\n            '@val': '0'\n          }\n        }\n      }\n    }\n  }.initialize(chartInfo)\n}\n\nOfficeChart.getChartBase = function(chartInfo) {\n  var chartBase\n\n  if (typeof chartInfo === 'string') {\n    chartBase = _chartSpecs[chartInfo]()\n  } else if (typeof chartInfo.renderType === 'string') {\n    chartBase = _chartSpecs[chartInfo.renderType](chartInfo)\n  } else if (chartInfo.xml) {\n    chartBase = chartInfo.xml\n  } else {\n    throw new Error('invalid chart type')\n  }\n  // return deep copy so can create multiple charts from same base within one PowerPoint document\n  return JSON.parse(JSON.stringify(chartBase))\n}\n\nmodule.exports = OfficeChart\n\n/*\n // Column chart\n new OfficeChart({\n  title: 'eSurvey chart',\n  renderType: 'column',\n  data: [ // array of series\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    },\n    {\n      name: 'Expense',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [18.1, 22.8, 23.9, 25.1, 25],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    }\n  ]\n});\n\n // Pie chart\n new OfficeChart({\n  title: 'eSurvey chart',\n  renderType: 'pie',\n  data: [ // array of series\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    }\n  ]\n});\n\n // Clustered bar chat\n new OfficeChart({\n  title: 'eSurvey chart',\n  renderType: 'group-bar',\n  data: [ // array of series\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\n    }\n  ]\n});\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}