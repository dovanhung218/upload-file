{"ast":null,"code":"/**\r\n * TAR Format Plugin\r\n *\r\n * @module plugins/tar\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar zlib = require('zlib');\nvar engine = require('tar-stream');\nvar util = require('archiver-utils');\n\n/**\r\n * @constructor\r\n * @param {TarOptions} options\r\n */\nvar Tar = function (options) {\n  if (!(this instanceof Tar)) {\n    return new Tar(options);\n  }\n  options = this.options = util.defaults(options, {\n    gzip: false\n  });\n  if (typeof options.gzipOptions !== 'object') {\n    options.gzipOptions = {};\n  }\n  this.supports = {\n    directory: true,\n    symlink: true\n  };\n  this.engine = engine.pack(options);\n  this.compressor = false;\n  if (options.gzip) {\n    this.compressor = zlib.createGzip(options.gzipOptions);\n    this.compressor.on('error', this._onCompressorError.bind(this));\n  }\n};\n\n/**\r\n * [_onCompressorError description]\r\n *\r\n * @private\r\n * @param  {Error} err\r\n * @return void\r\n */\nTar.prototype._onCompressorError = function (err) {\n  this.engine.emit('error', err);\n};\n\n/**\r\n * [append description]\r\n *\r\n * @param  {(Buffer|Stream)} source\r\n * @param  {TarEntryData} data\r\n * @param  {Function} callback\r\n * @return void\r\n */\nTar.prototype.append = function (source, data, callback) {\n  var self = this;\n  data.mtime = data.date;\n  function append(err, sourceBuffer) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    self.engine.entry(data, sourceBuffer, function (err) {\n      callback(err, data);\n    });\n  }\n  if (data.sourceType === 'buffer') {\n    append(null, source);\n  } else if (data.sourceType === 'stream' && data.stats) {\n    data.size = data.stats.size;\n    var entry = self.engine.entry(data, function (err) {\n      callback(err, data);\n    });\n    source.pipe(entry);\n  } else if (data.sourceType === 'stream') {\n    util.collectStream(source, append);\n  }\n};\n\n/**\r\n * [finalize description]\r\n *\r\n * @return void\r\n */\nTar.prototype.finalize = function () {\n  this.engine.finalize();\n};\n\n/**\r\n * [on description]\r\n *\r\n * @return this.engine\r\n */\nTar.prototype.on = function () {\n  return this.engine.on.apply(this.engine, arguments);\n};\n\n/**\r\n * [pipe description]\r\n *\r\n * @param  {String} destination\r\n * @param  {Object} options\r\n * @return this.engine\r\n */\nTar.prototype.pipe = function (destination, options) {\n  if (this.compressor) {\n    return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);\n  } else {\n    return this.engine.pipe.apply(this.engine, arguments);\n  }\n};\n\n/**\r\n * [unpipe description]\r\n *\r\n * @return this.engine\r\n */\nTar.prototype.unpipe = function () {\n  if (this.compressor) {\n    return this.compressor.unpipe.apply(this.compressor, arguments);\n  } else {\n    return this.engine.unpipe.apply(this.engine, arguments);\n  }\n};\nmodule.exports = Tar;\n\n/**\r\n * @typedef {Object} TarOptions\r\n * @global\r\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\r\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n * to control compression.\r\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\r\n */\n\n/**\r\n * @typedef {Object} TarEntryData\r\n * @global\r\n * @property {String} name Sets the entry name including internal path.\r\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\r\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\r\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n */\n\n/**\r\n * TarStream Module\r\n * @external TarStream\r\n * @see {@link https://github.com/mafintosh/tar-stream}\r\n */","map":{"version":3,"names":["zlib","require","engine","util","Tar","options","defaults","gzip","gzipOptions","supports","directory","symlink","pack","compressor","createGzip","on","_onCompressorError","bind","prototype","err","emit","append","source","data","callback","self","mtime","date","sourceBuffer","entry","sourceType","stats","size","pipe","collectStream","finalize","apply","arguments","destination","unpipe","module","exports"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/archiver/lib/plugins/tar.js"],"sourcesContent":["/**\r\n * TAR Format Plugin\r\n *\r\n * @module plugins/tar\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\r\nvar zlib = require('zlib');\r\n\r\nvar engine = require('tar-stream');\r\nvar util = require('archiver-utils');\r\n\r\n/**\r\n * @constructor\r\n * @param {TarOptions} options\r\n */\r\nvar Tar = function(options) {\r\n  if (!(this instanceof Tar)) {\r\n    return new Tar(options);\r\n  }\r\n\r\n  options = this.options = util.defaults(options, {\r\n    gzip: false\r\n  });\r\n\r\n  if (typeof options.gzipOptions !== 'object') {\r\n    options.gzipOptions = {};\r\n  }\r\n\r\n  this.supports = {\r\n    directory: true,\r\n    symlink: true\r\n  };\r\n\r\n  this.engine = engine.pack(options);\r\n  this.compressor = false;\r\n\r\n  if (options.gzip) {\r\n    this.compressor = zlib.createGzip(options.gzipOptions);\r\n    this.compressor.on('error', this._onCompressorError.bind(this));\r\n  }\r\n};\r\n\r\n/**\r\n * [_onCompressorError description]\r\n *\r\n * @private\r\n * @param  {Error} err\r\n * @return void\r\n */\r\nTar.prototype._onCompressorError = function(err) {\r\n  this.engine.emit('error', err);\r\n};\r\n\r\n/**\r\n * [append description]\r\n *\r\n * @param  {(Buffer|Stream)} source\r\n * @param  {TarEntryData} data\r\n * @param  {Function} callback\r\n * @return void\r\n */\r\nTar.prototype.append = function(source, data, callback) {\r\n  var self = this;\r\n\r\n  data.mtime = data.date;\r\n\r\n  function append(err, sourceBuffer) {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n\r\n    self.engine.entry(data, sourceBuffer, function(err) {\r\n      callback(err, data);\r\n    });\r\n  }\r\n\r\n  if (data.sourceType === 'buffer') {\r\n    append(null, source);\r\n  } else if (data.sourceType === 'stream' && data.stats) {\r\n    data.size = data.stats.size;\r\n\r\n    var entry = self.engine.entry(data, function(err) {\r\n      callback(err, data);\r\n    });\r\n\r\n    source.pipe(entry);\r\n  } else if (data.sourceType === 'stream') {\r\n    util.collectStream(source, append);\r\n  }\r\n};\r\n\r\n/**\r\n * [finalize description]\r\n *\r\n * @return void\r\n */\r\nTar.prototype.finalize = function() {\r\n  this.engine.finalize();\r\n};\r\n\r\n/**\r\n * [on description]\r\n *\r\n * @return this.engine\r\n */\r\nTar.prototype.on = function() {\r\n  return this.engine.on.apply(this.engine, arguments);\r\n};\r\n\r\n/**\r\n * [pipe description]\r\n *\r\n * @param  {String} destination\r\n * @param  {Object} options\r\n * @return this.engine\r\n */\r\nTar.prototype.pipe = function(destination, options) {\r\n  if (this.compressor) {\r\n    return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);\r\n  } else {\r\n    return this.engine.pipe.apply(this.engine, arguments);\r\n  }\r\n};\r\n\r\n/**\r\n * [unpipe description]\r\n *\r\n * @return this.engine\r\n */\r\nTar.prototype.unpipe = function() {\r\n  if (this.compressor) {\r\n    return this.compressor.unpipe.apply(this.compressor, arguments);\r\n  } else {\r\n    return this.engine.unpipe.apply(this.engine, arguments);\r\n  }\r\n};\r\n\r\nmodule.exports = Tar;\r\n\r\n/**\r\n * @typedef {Object} TarOptions\r\n * @global\r\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\r\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n * to control compression.\r\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TarEntryData\r\n * @global\r\n * @property {String} name Sets the entry name including internal path.\r\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\r\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\r\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n */\r\n\r\n/**\r\n * TarStream Module\r\n * @external TarStream\r\n * @see {@link https://github.com/mafintosh/tar-stream}\r\n */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}