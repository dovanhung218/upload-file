{"ast":null,"code":"'use strict';\n\nvar isWin = process.platform === 'win32';\nvar resolveCommand = require('./util/resolveCommand');\nvar isNode10 = process.version.indexOf('v0.10.') === 0;\nfunction notFoundError(command, syscall) {\n  var err;\n  err = new Error(syscall + ' ' + command + ' ENOENT');\n  err.code = err.errno = 'ENOENT';\n  err.syscall = syscall + ' ' + command;\n  return err;\n}\nfunction hookChildProcess(cp, parsed) {\n  var originalEmit;\n  if (!isWin) {\n    return;\n  }\n  originalEmit = cp.emit;\n  cp.emit = function (name, arg1) {\n    var err;\n\n    // If emitting \"exit\" event and exit code is 1, we need to check if\n    // the command exists and emit an \"error\" instead\n    // See: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    if (name === 'exit') {\n      err = verifyENOENT(arg1, parsed, 'spawn');\n      if (err) {\n        return originalEmit.call(cp, 'error', err);\n      }\n    }\n    return originalEmit.apply(cp, arguments);\n  };\n}\nfunction verifyENOENT(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawn');\n  }\n  return null;\n}\nfunction verifyENOENTSync(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawnSync');\n  }\n\n  // If we are in node 10, then we are using spawn-sync; if it exited\n  // with -1 it probably means that the command does not exist\n  if (isNode10 && status === -1) {\n    parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);\n    if (!parsed.file) {\n      return notFoundError(parsed.original, 'spawnSync');\n    }\n  }\n  return null;\n}\nmodule.exports.hookChildProcess = hookChildProcess;\nmodule.exports.verifyENOENT = verifyENOENT;\nmodule.exports.verifyENOENTSync = verifyENOENTSync;\nmodule.exports.notFoundError = notFoundError;","map":{"version":3,"names":["isWin","process","platform","resolveCommand","require","isNode10","version","indexOf","notFoundError","command","syscall","err","Error","code","errno","hookChildProcess","cp","parsed","originalEmit","emit","name","arg1","verifyENOENT","call","apply","arguments","status","file","original","verifyENOENTSync","module","exports"],"sources":["/Users/abc/Downloads/Workspace/c2i/image-text/c2i-convert/node_modules/redocx/node_modules/cross-spawn/lib/enoent.js"],"sourcesContent":["'use strict';\n\nvar isWin = process.platform === 'win32';\nvar resolveCommand = require('./util/resolveCommand');\n\nvar isNode10 = process.version.indexOf('v0.10.') === 0;\n\nfunction notFoundError(command, syscall) {\n    var err;\n\n    err = new Error(syscall + ' ' + command + ' ENOENT');\n    err.code = err.errno = 'ENOENT';\n    err.syscall = syscall + ' ' + command;\n\n    return err;\n}\n\nfunction hookChildProcess(cp, parsed) {\n    var originalEmit;\n\n    if (!isWin) {\n        return;\n    }\n\n    originalEmit = cp.emit;\n    cp.emit = function (name, arg1) {\n        var err;\n\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === 'exit') {\n            err = verifyENOENT(arg1, parsed, 'spawn');\n\n            if (err) {\n                return originalEmit.call(cp, 'error', err);\n            }\n        }\n\n        return originalEmit.apply(cp, arguments);\n    };\n}\n\nfunction verifyENOENT(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawn');\n    }\n\n    return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawnSync');\n    }\n\n    // If we are in node 10, then we are using spawn-sync; if it exited\n    // with -1 it probably means that the command does not exist\n    if (isNode10 && status === -1) {\n        parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);\n\n        if (!parsed.file) {\n            return notFoundError(parsed.original, 'spawnSync');\n        }\n    }\n\n    return null;\n}\n\nmodule.exports.hookChildProcess = hookChildProcess;\nmodule.exports.verifyENOENT = verifyENOENT;\nmodule.exports.verifyENOENTSync = verifyENOENTSync;\nmodule.exports.notFoundError = notFoundError;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO;AACxC,IAAIC,cAAc,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAErD,IAAIC,QAAQ,GAAGJ,OAAO,CAACK,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;AAEtD,SAASC,aAAa,CAACC,OAAO,EAAEC,OAAO,EAAE;EACrC,IAAIC,GAAG;EAEPA,GAAG,GAAG,IAAIC,KAAK,CAACF,OAAO,GAAG,GAAG,GAAGD,OAAO,GAAG,SAAS,CAAC;EACpDE,GAAG,CAACE,IAAI,GAAGF,GAAG,CAACG,KAAK,GAAG,QAAQ;EAC/BH,GAAG,CAACD,OAAO,GAAGA,OAAO,GAAG,GAAG,GAAGD,OAAO;EAErC,OAAOE,GAAG;AACd;AAEA,SAASI,gBAAgB,CAACC,EAAE,EAAEC,MAAM,EAAE;EAClC,IAAIC,YAAY;EAEhB,IAAI,CAAClB,KAAK,EAAE;IACR;EACJ;EAEAkB,YAAY,GAAGF,EAAE,CAACG,IAAI;EACtBH,EAAE,CAACG,IAAI,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;IAC5B,IAAIV,GAAG;;IAEP;IACA;IACA;IACA,IAAIS,IAAI,KAAK,MAAM,EAAE;MACjBT,GAAG,GAAGW,YAAY,CAACD,IAAI,EAAEJ,MAAM,EAAE,OAAO,CAAC;MAEzC,IAAIN,GAAG,EAAE;QACL,OAAOO,YAAY,CAACK,IAAI,CAACP,EAAE,EAAE,OAAO,EAAEL,GAAG,CAAC;MAC9C;IACJ;IAEA,OAAOO,YAAY,CAACM,KAAK,CAACR,EAAE,EAAES,SAAS,CAAC;EAC5C,CAAC;AACL;AAEA,SAASH,YAAY,CAACI,MAAM,EAAET,MAAM,EAAE;EAClC,IAAIjB,KAAK,IAAI0B,MAAM,KAAK,CAAC,IAAI,CAACT,MAAM,CAACU,IAAI,EAAE;IACvC,OAAOnB,aAAa,CAACS,MAAM,CAACW,QAAQ,EAAE,OAAO,CAAC;EAClD;EAEA,OAAO,IAAI;AACf;AAEA,SAASC,gBAAgB,CAACH,MAAM,EAAET,MAAM,EAAE;EACtC,IAAIjB,KAAK,IAAI0B,MAAM,KAAK,CAAC,IAAI,CAACT,MAAM,CAACU,IAAI,EAAE;IACvC,OAAOnB,aAAa,CAACS,MAAM,CAACW,QAAQ,EAAE,WAAW,CAAC;EACtD;;EAEA;EACA;EACA,IAAIvB,QAAQ,IAAIqB,MAAM,KAAK,CAAC,CAAC,EAAE;IAC3BT,MAAM,CAACU,IAAI,GAAG3B,KAAK,GAAGiB,MAAM,CAACU,IAAI,GAAGxB,cAAc,CAACc,MAAM,CAACW,QAAQ,CAAC;IAEnE,IAAI,CAACX,MAAM,CAACU,IAAI,EAAE;MACd,OAAOnB,aAAa,CAACS,MAAM,CAACW,QAAQ,EAAE,WAAW,CAAC;IACtD;EACJ;EAEA,OAAO,IAAI;AACf;AAEAE,MAAM,CAACC,OAAO,CAAChB,gBAAgB,GAAGA,gBAAgB;AAClDe,MAAM,CAACC,OAAO,CAACT,YAAY,GAAGA,YAAY;AAC1CQ,MAAM,CAACC,OAAO,CAACF,gBAAgB,GAAGA,gBAAgB;AAClDC,MAAM,CAACC,OAAO,CAACvB,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}